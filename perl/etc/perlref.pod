=head1 NAME
X<reference> X<pointer> X<data structure> X<structure> X<struct>

=begin original

perlref - Perl references and nested data structures

=end original

perlref - Perl의 리퍼런스와 중복된 데이터 구조

=head1 NOTE

(주의)

=begin original

This is complete documentation about all aspects of references.
For a shorter, tutorial introduction to just the essential features,
see L<perlreftut>.

=end original

이 문서는 리퍼런스에 관한 것입니다.
튜토리얼에 관해서는 L<perlrefut>를 참조해주세요.

=head1 DESCRIPTION

=begin original

Before release 5 of Perl it was difficult to represent complex data
structures, because all references had to be symbolic--and even then
it was difficult to refer to a variable instead of a symbol table entry.
Perl now not only makes it easier to use symbolic references to variables,
but also lets you have "hard" references to any piece of data or code.
Any scalar may hold a hard reference.  Because arrays and hashes contain
scalars, you can now easily build arrays of arrays, arrays of hashes,
hashes of arrays, arrays of hashes of functions, and so on.

=end original

Perl 5릴리즈 이전에서는 모든 리퍼런스는 심볼릭이 아니면 안되었기 때문에,
복잡한 데이터 구조를 표현하는 것이 곤란했었습니다.
그리고 심볼릭 테이블의 엔트리가 아닌 변수를 참고하고 싶다고 생각할 때에도
곤란했습니다.
Perl 은 심볼릭리퍼런스를 변수로써 사용하는 것을 간단하게 한 것 뿐만 아니라,
임의의 데이터에 대해 "하드" 리퍼런스를 가지는 것도 가능했었습니다.
임의의 스칼라는 하드 리퍼런스를 가질 수 있습니다.
배열과 해쉬는 스칼라에서 구성되어있기에 배열의 배열, 해쉬의 배열,
배열의 해쉬, 함수의 해쉬의 배열 등을 간단하게 구성할 수 있을 것입니다.

=begin original

Hard references are smart--they keep track of reference counts for you,
automatically freeing the thing referred to when its reference count goes
to zero.  (Reference counts for values in self-referential or
cyclic data structures may not go to zero without a little help; see
L<perlobj/"Two-Phased Garbage Collection"> for a detailed explanation.)
If that thing happens to be an object, the object is destructed.  See
L<perlobj> for more about objects.  (In a sense, everything in Perl is an
object, but we usually reserve the word for references to objects that
have been officially "blessed" into a class package.)

=end original

하드 리퍼런스는 똑똑하게 실제로 참조된 수를 관리하며, 그 수가
0이 되면 자동적으로 해방을 수행합니다.
(자기 참조나 순환 데이터에 있는 값에 대한 참조카운터는,
간단한 조작없이는 0가 되지 않습니다.
자세한 내용은 L<perlobj/"Two-Phased Garbage Collection"> 을 참조해주세요)
그 것이 오브젝트일 때에는 파괴자가 동작합니다.
오브젝트에 대해서 보다 자세한 것은 L<perlobj> 를 참조해주세요.
(어떤 의미에서는, Perl 의 모든 것이 오브젝트이지만, 일반적으로는
클래스 패키지 안에서 공식적으로 bless 된 것의 리퍼런스에 대해서
이 용어를 사용합니다)

=begin original

Symbolic references are names of variables or other objects, just as a
symbolic link in a Unix filesystem contains merely the name of a file.
The C<*glob> notation is something of a symbolic reference.  (Symbolic
references are sometimes called "soft references", but please don't call
them that; references are confusing enough without useless synonyms.)
X<reference, symbolic> X<reference, soft>
X<symbolic reference> X<soft reference>

=end original

UNIX 파일 시스템 상에서의 심볼릭링크가 간단히 파일의 이름을
가지는 것처럼, 심볼릭리퍼런스는 변수의 이름을 가집니다.
C<*glob> 기법은, 심볼릭리퍼런스의 종류 중 하나입니다.
(심볼릭 리퍼런스는 한때 "소프트 리퍼런스"라 불리었지만,
그렇게 부르지 말아주세요. 리퍼런스는 동의어를 사용하지 않음으로서
혼란을 예방할 수 있기 때문입니다)
X<reference, symbolic> X<reference, soft>
X<symbolic reference> X<soft reference>

=begin original

In contrast, hard references are more like hard links in a Unix file
system: They are used to access an underlying object without concern for
what its (other) name is.  When the word "reference" is used without an
adjective, as in the following paragraph, it is usually talking about a
hard reference.
X<reference, hard> X<hard reference>

=end original

대조적으로, 하드 리퍼런스는 UNIX의 파일시스템 상의 하드링크와 비슷합니다.
하드 링크는 그것이 어떤 이름이든 기초가 되는 오브젝트에 접근하기 위해
사용합니다.
아래에 있는 "리퍼런스"라고 하는 말을 형용없이 사용한 경우,
일반적으로는 하드 리퍼런스를 말합니다.
X<reference, hard> X<hard reference>

=begin original

References are easy to use in Perl.  There is just one overriding
principle: Perl does no implicit referencing or dereferencing.  When a
scalar is holding a reference, it always behaves as a simple scalar.  It
doesn't magically start being an array or hash or subroutine; you have to
tell it explicitly to do so, by dereferencing it.

=end original

Perl 에서 리퍼런스를 사용하는 것은 꽤 간단합니다.
원래의 오버라이드가 하나있을 뿐입니다.
Perl 은 리퍼런스(referencing)이나 디리퍼런스(dereferencing) 을
암묵적으로 사용하는 것은 아닙니다.
스칼라가 리퍼런스를 가지고 있을 때, 그것은 항상 단순한 스칼라로써
행동합니다.
맘대로 배열이나, 해쉬, 서브루틴으로써 행동하는 것은 아닙니다.
디리퍼런스를 하는 것에 의해, 자신이 명시적으로 Perl에 알릴 필요가
있습니다.

=head2 Making References
X<reference, creation> X<referencing>

(리퍼런스 만들기)

=begin original

References can be created in several ways.

=end original

리퍼런스는 몇가지의 방법으로 구축할 수 있습니다.

=over 4

=item 1.
X<\> X<backslash>

=begin original

By using the backslash operator on a variable, subroutine, or value.
(This works much like the & (address-of) operator in C.)  
This typically creates I<another> reference to a variable, because
there's already a reference to the variable in the symbol table.  But
the symbol table reference might go away, and you'll still have the
reference that the backslash returned.  Here are some examples:

=end original

변수, 서브루틴, 값에 백슬래쉬연산자를 사용하는 것에 의해
(이것은 C에서의 & (주소) 연산자와 비슷한 일을 합니다)
이미 심볼릭 테이블에는 변수로의 리퍼런스가 존재하고 있으므로,
이 방법은 I<다른> 리퍼런스를 만드는 것입니다.
그러나, 심볼릭 테이블의 리퍼런스가 없어진다고 해도
백슬래쉬가 반환되거나 리퍼런스가 존재하는 것이 됩니다.
예를 몇개 들어보겠습니다.

    $scalarref = \$foo;
    $arrayref  = \@ARGV;
    $hashref   = \%ENV;
    $coderef   = \&handler;
    $globref   = \*foo;

=begin original

It isn't possible to create a true reference to an IO handle (filehandle
or dirhandle) using the backslash operator.  The most you can get is a
reference to a typeglob, which is actually a complete symbol table entry.
But see the explanation of the C<*foo{THING}> syntax below.  However,
you can still use type globs and globrefs as though they were IO handles.

=end original

백슬래쉬 연산자를 사용해 IO 핸들(파일핸들 혹은 디렉토리핸들)로의
리퍼런스를 생성할 수는 없습니다.
제일 좋게 다루는 리퍼런스는 형GLOB에 대한 리퍼런스(실제로는
심볼릭테이블의 엔트리인)일 것입니다.
기술한 *foo{THING} 구문의 설명을 참조해주세요.
그렇지만, IO 핸들인 것으로써 형GLOB나 형GLOB의 리퍼런스(globref)를
사용할 수도 있습니다.

=item 2.
X<array, anonymous> X<[> X<[]> X<square bracket>
X<bracket, square> X<arrayref> X<array reference> X<reference, array>

=begin original

A reference to an anonymous array can be created using square
brackets:

=end original

이름없는 배열로의 리퍼런스는, 대괄호를 사용해서 만들 수 있습니다.

    $arrayref = [1, 2, ['a', 'b', 'c']];

=begin original

Here we've created a reference to an anonymous array of three elements
whose final element is itself a reference to another anonymous array of three
elements.  (The multidimensional syntax described later can be used to
access this.  For example, after the above, C<< $arrayref->[2][1] >> would have
the value "b".)

=end original

여기에서는 ["이름없는 3개의 요소를 가진 배열" 을 마지막 요소로써 가지는
3개요소의 이름없는 배열]로의 리퍼런스를 만들고 있습니다.
(뒤에 기술할 다차원구문을 사용해, 이것에 접근할 수 있습니다.
예를 들면, 위처럼 한 뒤에는,
C<< $arrayref->[2][1] >> 이 "b"가 됩니다 )

=begin original

Taking a reference to an enumerated list is not the same
as using square brackets--instead it's the same as creating
a list of references!

=end original

열거한 리스트에 대한 리퍼런스를 얻는 것은 대괄호를 사용하는 것과
같지 않습니다.
이것은 리퍼런스의 리ì트를 생성하는 것과 같은 것입니다!

    @list = (\$a, \@b, \%c);
    @list = \($a, @b, %c);	# same thing!

=begin original

As a special case, C<\(@foo)> returns a list of references to the contents
of C<@foo>, not a reference to C<@foo> itself.  Likewise for C<%foo>,
except that the key references are to copies (since the keys are just
strings rather than full-fledged scalars).

=end original

특수한 경우로써, C<\(@foo)> 는 C<@foo> 의 내용으로의 리퍼런스의 리스트를
반환하고, 이것은 C<%foo> 와 비슷하지만, 키의 리퍼런스가 카피에 대한 것인
점이 다릅니다(이것은 키가 완전한 스칼라가 아닌 단순한 문자열이기때문입니다)

=item 3.
X<hash, anonymous> X<{> X<{}> X<curly bracket>
X<bracket, curly> X<brace> X<hashref> X<hash reference> X<reference, hash>

=begin original

A reference to an anonymous hash can be created using curly
brackets:

=end original

이름없는 해쉬로의 리퍼런스는, 중괄호를 사용해 만들 수 있습니다.

    $hashref = {
	'Adam'  => 'Eve',
	'Clyde' => 'Bonnie',
    };

=begin original

Anonymous hash and array composers like these can be intermixed freely to
produce as complicated a structure as you want.  The multidimensional
syntax described below works for these too.  The values above are
literals, but variables and expressions would work just as well, because
assignment operators in Perl (even within local() or my()) are executable
statements, not compile-time declarations.

=end original

이름없는 해쉬와 배열의 생성자는, 복잡한 구조를 만들기때문에 자유롭게
조합할 수 있습니다.
뒤에 기술할 다차원구문은, 그런 것에 대해서도 사용할 수 있습니다.
위의 값은 리터럴이지만, 변수나 식이어도 상관없습니다.
Perl 에서의 대입연산은 (예를 들어 local()이나 my() 안에서도) 컴파일 시의
선언문이 아닌 실행문이기때문입니다.

=begin original

Because curly brackets (braces) are used for several other things
including BLOCKs, you may occasionally have to disambiguate braces at the
beginning of a statement by putting a C<+> or a C<return> in front so
that Perl realizes the opening brace isn't starting a BLOCK.  The economy and
mnemonic value of using curlies is deemed worth this occasional extra
hassle.

=end original

중괄호는, BLOCK 을 시작으로써 다른 것에도 사용할 수 있기 때문에,
열린 괄호가 BLOCK의 시작이 아닌 것을 Perl에게 알리기 위해
구문의 최초의 중괄호의 앞에는 C<+> 나 C<return> 을 붙여서,
애매함을 없애도록 할 필요가 있는 경우가 있습니다.
이 잠깐의 작업은 중괄호의 사용에 관련해서 실제로 사용해보고
기억해 두는 것이 좋을 것입니다.

=begin original

For example, if you wanted a function to make a new hash and return a
reference to it, you have these options:

=end original

예를들면, 새로운 해쉬를 만들어서, 그것으로의 리퍼런스를 반환하는 함수가
필요하지않으면 아래처럼 선택지가 있습니다.

    sub hashem {        { @_ } }   # silently wrong
    sub hashem {       +{ @_ } }   # ok
    sub hashem { return { @_ } }   # ok

=begin original

On the other hand, if you want the other meaning, you can do this:

=end original

다른 한편으로는 이렇게 할 수도 있습니다:

    sub showem {        { @_ } }   # ambiguous (currently ok, but may change)
    sub showem {       {; @_ } }   # ok
    sub showem { { return @_ } }   # ok

=begin original

The leading C<+{> and C<{;> always serve to disambiguate
the expression to mean either the HASH reference, or the BLOCK.

=end original

맨앞에 있는 C<+{> 나 C<{;} 가 그 식이 실제로는
해쉬의 리퍼런스인지 블록인지의 애매함을 없애기 위해 있습니다.

=item 4.
X<subroutine, anonymous> X<subroutine, reference> X<reference, subroutine>
X<scope, lexical> X<closure> X<lexical> X<lexical scope>

=begin original

A reference to an anonymous subroutine can be created by using
C<sub> without a subname:

=end original

이릉없는 서브루틴으로의 리퍼런스는, 서브루틴이름이 없는 C<sub> 를 사용해
만들 수 있습니다.

    $coderef = sub { print "Boink!\n" };

=begin original

Note the semicolon.  Except for the code
inside not being immediately executed, a C<sub {}> is not so much a
declaration as it is an operator, like C<do{}> or C<eval{}>.  (However, no
matter how many times you execute that particular line (unless you're in an
C<eval("...")>), $coderef will still have a reference to the I<same>
anonymous subroutine.)

=end original

세미콜론에 주의해주세요.
내부의 코드가 즉각 실행되는 것이 아니라는 것을 제외하면, C<sub{}> 는,
선언이라고 하기보다는 C<do{}> 나 C<eval{}> 과 같은 연산자입니다(하지만,
C<eval("...")> 의 안이 아니면, 몇번이나 그 줄을 실행하려고 해도
$coderef 는, I<동일한> 이름없는 서브루틴을 리퍼런스하는 것이 됩니다).

=begin original

Anonymous subroutines act as closures with respect to my() variables,
that is, variables lexically visible within the current scope.  Closure
is a notion out of the Lisp world that says if you define an anonymous
function in a particular lexical context, it pretends to run in that
context even when it's called outside the context.

=end original

이름없는 서브루틴은 my() 변수에 관련하는 클로져처럼 행동합니다.
즉, 변수는 최근의 스코프 안에서 렉시컬처럼 보입니다.
클로져는 무명함수를 어떤 특정의 렉시컬컨텍스트로 정의한 경우에 혹
그 컨텍스트의 바깥쪽에서 호출되었다고 해도 정의된 때의 컨텍스트로
실행되는 것을 요구하는 Lisp 세계의 개념입니다.

=begin original

In human terms, it's a funny way of passing arguments to a subroutine when
you define it as well as when you call it.  It's useful for setting up
little bits of code to run later, such as callbacks.  You can even
do object-oriented stuff with it, though Perl already provides a different
mechanism to do that--see L<perlobj>.

=end original

알기 쉽게 얘기하면, 서브루틴을 호출할 때처럼 서브루틴을 정의할 때에
인수를 넘기는 기묘한 행동을 말합니다.
이것으로 오브젝트지향적성질을 실현하는 것도 가능합니다.
그렇지만, Perl 은 이미 이것과 다른 구성을 제공하고 있습니다 --
L<perlobj> 를 참조해주세요.

=begin original

You might also think of closure as a way to write a subroutine
template without using eval().  Here's a small example of how
closures work:

=end original

클로져는 eval 없이 서브루틴의 템플레이트를 기술하는 방법으로
생각할 수도 있습니다.
아래 나타내는 것은 클로져가 어떻게 동작하는 가의 예입니다.

    sub newprint {
	my $x = shift;
	return sub { my $y = shift; print "$x, $y!\n"; };
    }
    $h = newprint("Howdy");
    $g = newprint("Greetings");

    # Time passes...

    &$h("world");
    &$g("earthlings");

=begin original

This prints

=end original

출력은 이렇게 됩니다.

    Howdy, world!
    Greetings, earthlings!

=begin original

Note particularly that $x continues to refer to the value passed
into newprint() I<despite> "my $x" having gone out of scope by the
time the anonymous subroutine runs.  That's what a closure is all
about.

=end original

여기서 특히, 이름없는 서브루틴의 실행시에는 "my $x"가 스코프의 밖에 있는 것에
B<상관없이>, $x 가 newprint() 에 건네지는 값을 참조해나가는 것에
주의해주세요.
이것이 클로져의 모든 것입니다.

=begin original

This applies only to lexical variables, by the way.  Dynamic variables
continue to work as they have always worked.  Closure is not something
that most Perl programmers need trouble themselves about to begin with.

=end original

이것은 렉시컬변수에만 적용됩니다.
동적변수는 이것처럼 동작합니다.
클로져는 대부분의 Perl 프로그래머가 쓰기 시작하기 위해
트러블을 떠앉게되어버리는 것이 아닙니다.

=item 5.
X<constructor> X<new>

=begin original

References are often returned by special subroutines called constructors.
Perl objects are just references to a special type of object that happens to know
which package it's associated with.  Constructors are just special
subroutines that know how to create that association.  They do so by
starting with an ordinary reference, and it remains an ordinary reference
even while it's also being an object.  Constructors are often
named new() and called indirectly:

=end original

리퍼런스는 생성자라고 불리는 특별한 서브루틴이 반환하게 하는 것이
많아졌습니다. Perl 오브젝트는 자신이 어느 패키지와 관계를 가지고 있는가를
알고있는 것으로의 리퍼런스일 뿐입니다.
생성자는 그 관계를 어떻게 수행할 것인가를 알고 있다는 의미로,
특별한 서브루틴에 지나지 않습니다.
단순한 리퍼런스로써 시작해서, 오브젝트라고 불리는 동안에도
일반적인 리퍼런스인 것은 변함이 없습니다.
생성자는, 습관적으로 new() 라고 이름지어져, 간접적으로 호출됩니다: 

    $objref = new Doggie (Tail => 'short', Ears => 'long');

=begin original

But don't have to be:

=end original

아래처럼 해도 상관없습니다.

    $objref   = Doggie->new(Tail => 'short', Ears => 'long');

    use Term::Cap;
    $terminal = Term::Cap->Tgetent( { OSPEED => 9600 });

    use Tk;
    $main    = MainWindow->new();
    $menubar = $main->Frame(-relief              => "raised",
                            -borderwidth         => 2)

=item 6.
X<autovivification>

=begin original

References of the appropriate type can spring into existence if you
dereference them in a context that assumes they exist.  Because we haven't
talked about dereferencing yet, we can't show you any examples yet.

=end original

적절한 형태의 리퍼런스는 그런 리퍼런스가 존재하는 가하는 것 처럼 문맥에서
수행하면, 실제로 존재하게 됩니다. 디리퍼런스에 대해서는 아직 이야기하지
않았으므로, 아직 예제를 보일 수는 없습니다.

=item 7.
X<*foo{THING}> X<*>

=begin original

A reference can be created by using a special syntax, lovingly known as
the *foo{THING} syntax.  *foo{THING} returns a reference to the THING
slot in *foo (which is the symbol table entry which holds everything
known as foo).

=end original

리퍼런스는 *foo{THING} 구문으로 알려진 특별한 구문을 사용해 생성할 수 있습니다.
*foo{THING} 은 리퍼런스를 *foo 의 THING 슬롯(이것은
foo 라고 알려진 모든 것을 가지고 있는 심볼 테이블의 엔트리입니다)로
반환합니다.

    $scalarref = *foo{SCALAR};
    $arrayref  = *ARGV{ARRAY};
    $hashref   = *ENV{HASH};
    $coderef   = *handler{CODE};
    $ioref     = *STDIN{IO};
    $globref   = *foo{GLOB};
    $formatref = *foo{FORMAT};

=begin original

All of these are self-explanatory except for C<*foo{IO}>.  It returns
the IO handle, used for file handles (L<perlfunc/open>), sockets
(L<perlfunc/socket> and L<perlfunc/socketpair>), and directory
handles (L<perlfunc/opendir>).  For compatibility with previous
versions of Perl, C<*foo{FILEHANDLE}> is a synonym for C<*foo{IO}>, though it
is deprecated as of 5.8.0.  If deprecation warnings are in effect, it will warn
of its use.

=end original

이 모든것은 C<*foo{IO}> 를 제외하고, 자기설명을 합니다.
파일핸들(L<perlfunc/open>), 소켓(L<perlfunc/socket>과 L<perlfunc/soketpari>),
디렉토리핸들(L<perlfunc/opendir>)로 사용되는 IO핸들을 반환합니다.
과거 버젼의 Perl 에 대한 호환성을 위해
C<*foo{FILEHANDLE}>은 C<*foo{IO}> 의 동의어이지만, 5.8.0부터는
권장하지 않습니다.
경고가 유효가 되어있다면, 비권장 경고가 나옵니다.

=begin original

C<*foo{THING}> returns undef if that particular THING hasn't been used yet,
except in the case of scalars.  C<*foo{SCALAR}> returns a reference to an
anonymous scalar if $foo hasn't been used yet.  This might change in a
future release.

=end original

C<*foo{THING}> 는 스칼라의 경우를 빼고는 특정의 THING 이 아직 사용되지 않은
경우에는 undef를 반환합니다.
C<*foo{SCALAR}> 는 $foo 가 아직 사용되어 있지 않은 경우에는
이름없는 스칼라로의 리퍼런스를 반환합니다.
이것은 앞으로의 릴리즈에서 바뀔 가능성이 있습니다.

=begin original

C<*foo{IO}> is an alternative to the C<*HANDLE> mechanism given in
L<perldata/"Typeglobs and Filehandles"> for passing filehandles
into or out of subroutines, or storing into larger data structures.
Its disadvantage is that it won't create a new filehandle for you.
Its advantage is that you have less risk of clobbering more than
you want to with a typeglob assignment.  (It still conflates file
and directory handles, though.)  However, if you assign the incoming
value to a scalar instead of a typeglob as we do in the examples
below, there's no risk of that happening.

=end original

C<*foo{IO}> 는, L<perldata/"Typeglobs and Filehandles"> 에 있는
파일핸들을 서브루틴에 넘겨주거나, 혹은 거꾸로
서브루틴으로부터 반환하기 위해, 혹은 큰 데이터 구조를 넣기 위해
사용되는 C<*HANDLE> 구조르 대신해 쓸 수 있습니다.
불리한 점은 새로운 핸들을 코더를 위해서 만들어 주지 않는 다는 겁니다.
(그러나, 이것은 아직 파일핸들과 디렉토리핸들을 통합합니다)
그러나, 만약 아래의 예에서 수행되는 것처럼, 값을 형GLOB가 아닌
스칼라에 대입했을 때 발생하는 것에 대한 리스크는 없습니다.

    splutter(*STDOUT);		# pass the whole glob
    splutter(*STDOUT{IO});	# pass both file and dir handles

    sub splutter {
	my $fh = shift;
	print $fh "her um well a hmmm\n";
    }

    $rec = get_rec(*STDIN);	# pass the whole glob
    $rec = get_rec(*STDIN{IO}); # pass both file and dir handles

    sub get_rec {
	my $fh = shift;
	return scalar <$fh>;
    }

=back

=head2 Using References
X<reference, use> X<dereferencing> X<dereference>

(리퍼런스를 사용)

=begin original

That's it for creating references.  By now you're probably dying to
know how to use references to get back to your long-lost data.  There
are several basic methods.

=end original

리퍼런스를 만드는 법은 이것 뿐입니다.
여기까지 왔으면, 어디가 참조의 반대편으로 가버리는 데이터를 되찾기위해
어떻게 리퍼런스를 사용할까를 알고 싶으시겠죠?
기본적인 방법이 몇 개가 있습니다.

=over 4

=item 1.

=begin original

Anywhere you'd put an identifier (or chain of identifiers) as part
of a variable or subroutine name, you can replace the identifier with
a simple scalar variable containing a reference of the correct type:

=end original

변수이름이나 서브루틴이름의 일부로써 식별자를 두는 곳에서는,
적절한 형태의 리퍼런스를 가진 단순스칼라변수에서 그 식별자를
바꿔둘 수 있습니다.

    $bar = $$scalarref;
    push(@$arrayref, $filename);
    $$arrayref[0] = "January";
    $$hashref{"KEY"} = "VALUE";
    &$coderef(1,2,3);
    print $globref "output\n";

=begin original

It's important to understand that we are specifically I<not> dereferencing
C<$arrayref[0]> or C<$hashref{"KEY"}> there.  The dereference of the
scalar variable happens I<before> it does any key lookups.  Anything more
complicated than a simple scalar variable must use methods 2 or 3 below.
However, a "simple scalar" includes an identifier that itself uses method
1 recursively.  Therefore, the following prints "howdy".

=end original

$arrayref[0] 나 $hashref{"KEY"} 같은 형태를 하고 있는 I<것이 아닌> 편이 
적절합니다.
스칼라변수의 디리퍼런스는 어떤 key 의 검색보다도 I<먼저> 수행됩니다.
단순스칼라 변수에서 난입한 것은 모두, 아래의 2번과 3번의 방법이 쓰여집니다.
그렇지만, "단순스칼라"에는, 이 첫번째의 방법을 재귀적으로 사용하고 있는
식별자도 포함되어 있습니다.
따라서, 아래는 "howdy"라고 출력됩니다.

    $refrefref = \\\"howdy";
    print $$$$refrefref;

=item 2.
X<${}> X<@{}> X<%{}>

=begin original

Anywhere you'd put an identifier (or chain of identifiers) as part of a
variable or subroutine name, you can replace the identifier with a
BLOCK returning a reference of the correct type.  In other words, the
previous examples could be written like this:

=end original

변수이름이나 서브루틴이름의 일부로써 식별자를 두는 곳에서는,
적절한 형태의 리퍼런스를 반환하는 BLOCK 을 판정하는 식별자로 바꿀 필요가
있습니다. 바꿔말하면, 앞의 예는 아래처럼 쓸 수 있습니다:

    $bar = ${$scalarref};
    push(@{$arrayref}, $filename);
    ${$arrayref}[0] = "January";
    ${$hashref}{"KEY"} = "VALUE";
    &{$coderef}(1,2,3);
    $globref->print("output\n");  # iff IO::Handle is loaded

=begin original

Admittedly, it's a little silly to use the curlies in this case, but
the BLOCK can contain any arbitrary expression, in particular,
subscripted expressions:

=end original

확실히 이 경우에는 중괄호를 붙이는 것은 바보같을 지로 모릅니다만,
BLOCK 에는 임의의 식, 특히 첨자를 붙은 식을 넣을 수 있습니다.

    &{ $dispatch{$index} }(1,2,3);	# call correct routine

=begin original

Because of being able to omit the curlies for the simple case of C<$$x>,
people often make the mistake of viewing the dereferencing symbols as
proper operators, and wonder about their precedence.  If they were,
though, you could use parentheses instead of braces.  That's not the case.
Consider the difference below; case 0 is a short-hand version of case 1,
I<not> case 2:

=end original

단순한 <$$x> 의 경우에는 중괄호가 생략될 수 있기에, 심볼의
디리퍼런스를 적당한 연산자처럼 받아서, 그 우선순위는 어느정도일까하며
고민하는 사람도 있습니다.
그러나, 만약 연산자라면, 중괄호대신에, 보통 괄호를 쓸 수 있겠죠?
그렇지 않습니다.
아래의 차이를 생각해보세요
CASE 0는 CASE 1을 짧게 한 것이고, CASE 2를 짧게한 것이 B<아닙니다>:

    $$hashref{"KEY"}   = "VALUE";	# CASE 0
    ${$hashref}{"KEY"} = "VALUE";	# CASE 1
    ${$hashref{"KEY"}} = "VALUE";	# CASE 2
    ${$hashref->{"KEY"}} = "VALUE";	# CASE 3

=begin original

Case 2 is also deceptive in that you're accessing a variable
called %hashref, not dereferencing through $hashref to the hash
it's presumably referencing.  That would be case 3.

=end original

CASE 2 도 또 착각하기 쉬운 것으로, %hashref 라는 변수에 접근하는 것입니다.
$hashref를 중개해서, 그것이 가리키는 것인 해쉬를 디리퍼런스하는 것이
아닙니다.
그것은 CASE 3 입니다.

=item 3.
X<autovivification> X<< -> >> X<arrow>

=begin original

Subroutine calls and lookups of individual array elements arise often
enough that it gets cumbersome to use method 2.  As a form of
syntactic sugar, the examples for method 2 may be written:

=end original

배열의 각각의 요소를 사용하는 경우가 늘어나면, 2번의 방법을 사용하는 것이
번거로워 집니다.
구문상의 타개책으로써 위의 2번째 줄은 아래처럼 쓸 수 있습니다:

    $arrayref->[0] = "January";   # Array element
    $hashref->{"KEY"} = "VALUE";  # Hash element
    $coderef->(1,2,3);            # Subroutine call

=begin original

The left side of the arrow can be any expression returning a reference,
including a previous dereference.  Note that C<$array[$x]> is I<not> the
same thing as C<< $array->[$x] >> here:

=end original

화살표의 좌측에는 앞에서의 디리퍼런스를 포함해, 리피런스를 반환하는 임의의
식을 쓸수 있습니다. (C<$array[$x]> 는 C<< $array->[$x] >> 와 같지 I<않습니다>).

    $array[$x]->{"foo"}->[0] = "January";

=begin original

This is one of the cases we mentioned earlier in which references could
spring into existence when in an lvalue context.  Before this
statement, C<$array[$x]> may have been undefined.  If so, it's
automatically defined with a hash reference so that we can look up
C<{"foo"}> in it.  Likewise C<< $array[$x]->{"foo"} >> will automatically get
defined with an array reference so that we can look up C<[0]> in it.
This process is called I<autovivification>.

=end original

이것이 앞의 좌변치컨텍스트에서 쓰면 리퍼런스가 존재하게 되는 
케이스 중 하나입니다.
이 구문앞에는, C<$array[$x]> 는 정의되어 있지 않을지도 모릅니다.
그럴 경우 자동적으로 해쉬리퍼런스로 정의되어 C<{"foo"}> 를
검색할 수 있도록 합니다.
마찬가지로 C<< $array[$x]->{"foo"} >> 가 배열리퍼런스로 정의되었기 때문에
C<[0]> 을 거기서 찾을 수 있습니다.
이 프로세스는 I<자동유효화> (autovivification) 이라고 불립니다.

=begin original

One more thing here.  The arrow is optional I<between> brackets
subscripts, so you can shrink the above down to

=end original

하나 더. 화살표는 괄호붙은 첨자의 I<사이> 에서는, 생략할 수 있으므로,
위의 예제는 아래처럼 쓸 수 있습니다.

    $array[$x]{"foo"}[0] = "January";

=begin original

Which, in the degenerate case of using only ordinary arrays, gives you
multidimensional arrays just like C's:

=end original

일반적인 배열만을 사용하게 한정하면, 꼭 C의 다차원배열처럼
사용할 수 있습니다:

    $score[$x][$y][$z] += 42;

=begin original

Well, okay, not entirely like C's arrays, actually.  C doesn't know how
to grow its arrays on demand.  Perl does.

=end original

아아, 좋아요. 실제로는 전혀 C 의 배열과 같다는 건 아닙니다.
C 에서는, 필요에 따라서 배열을 크게하거나 하는 것은 있을 수 없죠.
Perl 에서는 그게 가능하지만.

=item 4.
X<encapsulation>

=begin original

If a reference happens to be a reference to an object, then there are
probably methods to access the things referred to, and you should probably
stick to those methods unless you're in the class package that defines the
object's methods.  In other words, be nice, and don't violate the object's
encapsulation without a very good reason.  Perl does not enforce
encapsulation.  We are not totalitarians here.  We do expect some basic
civility though.

=end original

리퍼런스가 오브젝트에 대한 것일 경우에는, 참조된 것에 접속하기 위한
메소드가 있을 것이므로, 오브젝트의 메소드를 정의하는 클래스 패키지 안이
아니면, 그 메소드를 사용하도록 하는 편이 좋을 겁니다.
바꿔 말하면, 특별하고 정당한 이유가 없는 한, 오브젝트의 캡슐화를
휴지로 만들어서는 안된다는 것입니다.
Perl 은 캡슐화를 강요하거나 하진 않습니다. 물론 저자도 전체주의자도 아니구요.
단지 기본적인 교양을 기대할 뿐입니다.

=back

=begin original

Using a string or number as a reference produces a symbolic reference,
as explained above.  Using a reference as a number produces an
integer representing its storage location in memory.  The only
useful thing to be done with this is to compare two references
numerically to see whether they refer to the same location.
X<reference, numeric context>

=end original

문자열이나 수치를 리퍼런스로 사용하면 위에 기술한 것 처럼 심볼릭 리퍼런스를
생성합니다. 리퍼런스를 숫자값으로 사용하면, 메모리안의 저장소 위치의
정수표현을 생성합니다.
이것을 이용해서 편리한 단 하나의 상황은, 두가지 리퍼런스를 숫자값으로써
비교하는 것으로, 같은 장소를 참조하고 있는 가 어떤 가를 조사하는 경우입니다.
X<reference, numeric context>

    if ($ref1 == $ref2) {  # cheap numeric compare of references
	print "refs 1 and 2 refer to the same thing\n";
    }

=begin original

Using a reference as a string produces both its referent's type,
including any package blessing as described in L<perlobj>, as well
as the numeric address expressed in hex.  The ref() operator returns
just the type of thing the reference is pointing to, without the
address.  See L<perlfunc/ref> for details and examples of its use.
X<reference, string context>

=end original

리퍼런스를 문자열로 사용하면, 참조하고 있는 것의 형태(L<perlobj>에서
기술한 것처럼, bless 된 패키지를 포함합니다)와,
16진수로 표현된 숫자값주소의 양쪽을 생성합니다.
ref() 연산자는 주소를 뺀, 리퍼런스가 표시하고 있는 것의 형태만을 반환합니다.
이 사용법의 자세한 내용과 예제에 대해서는 L<perlfunc/ref> 를 참조해주세요.
X<reference, string context>

=begin original

The bless() operator may be used to associate the object a reference
points to with a package functioning as an object class.  See L<perlobj>.

=end original

bless() 연산자는 오브젝트를 오브젝트클래스로 기능하는 패키지와
묶기 위해 사용할 수 있습니다.
L<perlobj> 를 참조해주세요.

=begin original

A typeglob may be dereferenced the same way a reference can, because
the dereference syntax always indicates the type of reference desired.
So C<${*foo}> and C<${\$foo}> both indicate the same scalar variable.

=end original

디리퍼런스의 구문에서는 항상 목적으로하는 리퍼런스의 형태를
나타내는 것이 가능하기 때문에, 형GLOB를 리퍼런스와 마찬가지로
디리퍼런스 할 수가 있습니다.
즉, C<${*foo}> 와 C<${\$foo}> 는 어느쪽에도 같은 스칼라 변수를
나타내게 됩니다.

=begin original

Here's a trick for interpolating a subroutine call into a string:

=end original

다음의 예제에서 나타내는 것은 문자열에 서브루틴호출을 넣는 트릭입니다:

    print "My sub returned @{[mysub(1,2,3)]} that time.\n";

=begin original

The way it works is that when the C<@{...}> is seen in the double-quoted
string, it's evaluated as a block.  The block creates a reference to an
anonymous array containing the results of the call to C<mysub(1,2,3)>.  So
the whole block returns a reference to an array, which is then
dereferenced by C<@{...}> and stuck into the double-quoted string. This
chicanery is also useful for arbitrary expressions:

=end original

쌍따옴표로 인용된 문자열 안에 C<@{...}> 이 발견되면, 그 문자열은
블록으로 평가됩니다.
블록에서는, C<mysub(1,2,3)> 호출을 실행해, 그 결과에 대한
이름없는 배열로의 리퍼런스를 만들 수 있습니다.
즉, 블록전체에는 배열로의 리퍼런스를 반환하는 것이 되어,
C<@{...}> 으로 디리퍼런스된 후, 쌍따옴표로 인용된 문자열 안에
들어가게 됩니다.
이 속임수는 제대로 처리하지 않는 식에도 유용합니다:

    print "That yields @{[$n + 5]} widgets\n";

=head2 Symbolic references
X<reference, symbolic> X<reference, soft>
X<symbolic reference> X<soft reference>

(심볼릭 리퍼런스)

=begin original

We said that references spring into existence as necessary if they are
undefined, but we didn't say what happens if a value used as a
reference is already defined, but I<isn't> a hard reference.  If you
use it as a reference, it'll be treated as a symbolic
reference.  That is, the value of the scalar is taken to be the I<name>
of a variable, rather than a direct link to a (possibly) anonymous
value.

=end original

리퍼런스는 만약 정의되지 않았으면 필요에 따라 존재하는 것이 된다고
말했지만, 만약 리퍼런스로 사용된 값이 이미 정의되어 있을 때에는 어떻게
되는 가 표시하지 않았습니다.
이것은 하드리퍼런스가 I<아닙니다>
리퍼런스로 사용된것이라면 그것은 심볼릭리퍼런스로 취급됩니다.
즉, 스칼라의 값은(아마도) 이름없는 값에 직접 링크가 아닌
변수의 I<이름> 으로 취급됩니다.

=begin original

People frequently expect it to work like this.  So it does.

=end original

사람들은 종종 이처럼 움직인다고 생각합니다. 그래서 그렇게 동작하는 겁니다.

    $name = "foo";
    $$name = 1;			# Sets $foo
    ${$name} = 2;		# Sets $foo
    ${$name x 2} = 3;		# Sets $foofoo
    $name->[0] = 4;		# Sets $foo[0]
    @$name = ();		# Clears @foo
    &$name();			# Calls &foo() (as in Perl 4)
    $pack = "THAT";
    ${"${pack}::$name"} = 5;	# Sets $THAT::foo without eval

=begin original

This is powerful, and slightly dangerous, in that it's possible
to intend (with the utmost sincerity) to use a hard reference, and
accidentally use a symbolic reference instead.  To protect against
that, you can say

=end original

이것은 강력하고, 다소 위험할 수도 있습니다.
(최대한의 주의를 기울여) 하드리퍼런스를 사용하려고 하는 경우에,
잘못해서 심볼릭리퍼런스를 사용해버릴는 경우가 있기때문입니다.
이것을 방지하기 위해서는,

    use strict 'refs';

=begin original

and then only hard references will be allowed for the rest of the enclosing
block.  An inner block may countermand that with

=end original

라고 쓰면, 포함된 블록 안의 남은 부분에서는 하드 리퍼런스만이
허락되도록 할 수 있습니다.
안쪽의 블록에서는 아래처럼 써 부정 할 수도 있습니다.

    no strict 'refs';

=begin original

Only package variables (globals, even if localized) are visible to
symbolic references.  Lexical variables (declared with my()) aren't in
a symbol table, and thus are invisible to this mechanism.  For example:

=end original

심볼릭리퍼런스에서는, 패키지변수(국소화된 것이라도 글로벌)만을
볼 수 있습니다.
(my() 로 선언한) 정적 로컬 변수는 심볼 테이블에 존재하지 않기에
심볼릭리퍼런스에서는 참조할 수 없습니다.
예를 들면:

    local $value = 10;
    $ref = "value";
    {
	my $value = 20;
	print $$ref;
    }

=begin original

This will still print 10, not 20.  Remember that local() affects package
variables, which are all "global" to the package.

=end original

이것은, 20이 아닌, 10으로 출력됩니다.
local() 은, 패키지에서 "글로벌한" 패키지변수에 영향을 줍니다.

=head2 Not-so-symbolic references

(그다지 심볼릭하지않은 리퍼런스)

=begin original

A new feature contributing to readability in perl version 5.001 is that the
brackets around a symbolic reference behave more like quotes, just as they
always have within a string.  That is,

=end original

perl 의 버젼 5.001 에서, 중괄호에 포함된 심볼릭리퍼런스가 더 인용된 것처럼
꼭 그것이 문자열안에 있는 것처럼 행동하는 새로운 기능이 가독성을 위해
추가되었습니다.

    $push = "pop on ";
    print "${push}over";

=begin original

has always meant to print "pop on over", even though push is
a reserved word.  This has been generalized to work the same outside
of quotes, so that

=end original

이것은 push 가 예약어인것에도 상관없이 항상 "pop on over"가 됩니다.
이것은 인용의 밖에 있어도 같습니다.
그래서,

    print ${push} . "over";

=begin original

and even

=end original

이나

    print ${ push } . "over";

=begin original

will have the same effect.  (This would have been a syntax error in
Perl 5.000, though Perl 4 allowed it in the spaceless form.)  This
construct is I<not> considered to be a symbolic reference when you're
using strict refs:

=end original

에서도 같은 효과가 됩니다.
(이것은 Perl 4 가 공백없는 형식을 허락하는 것에도 상관없이
Perl 5.000에서는 구문에러가 됩니다).
이 구조는 strict refs를 사용할 때에,
심볼릭 리퍼런스인 것을 I<고려하지 않았습니다>.

    use strict 'refs';
    ${ bareword };	# Okay, means $bareword.
    ${ "bareword" };	# Error, symbolic reference.

=begin original

Similarly, because of all the subscripting that is done using single
words, we've applied the same rule to any bareword that is used for
subscripting a hash.  So now, instead of writing

=end original

비슷하게, 첨자가 붙은 모든 것이 단일어로 수행되기에,
같은 룰을 해쉬에 대한 첨자붙은 것에 사용되는 임의의 빈 단어를 적용합니다.
그래서,

    $array{ "aaa" }{ "bbb" }{ "ccc" }

=begin original

you can write just

=end original

대신에 아래처럼 쓰고 :

    $array{ aaa }{ bbb }{ ccc }

=begin original

and not worry about whether the subscripts are reserved words.  In the
rare event that you do wish to do something like

=end original

그리고 첨자가 예약어인가 어떤가를 신경쓰지 않아도 됩니다.
아래 같은 것이 하고싶다는 특별한 경우에는;

    $array{ shift }

=begin original

you can force interpretation as a reserved word by adding anything that
makes it more than a bareword:

=end original

빈 단어가 아닌 작업할 무엇인 가를 추가하는 것으로 예약어처럼
강제적으로 해석시킬 수 있습니다.

    $array{ shift() }
    $array{ +shift }
    $array{ shift @_ }

=begin original

The C<use warnings> pragma or the B<-w> switch will warn you if it
interprets a reserved word as a string.
But it will no longer warn you about using lowercase words, because the
string is effectively quoted.

=end original

C<use warnings> 프라그마나 B<-w> 스위치는 문자열이 예약어로써
해석된 때에는 경고를 냅니다.
그러나, 소문자만으로 된 단어를 사용한 경우에는 더이상 경고를 내지 않습니다.
왜냐면 문자열은 사실상 인용된 것이기 때문입니다.

=head2 Pseudo-hashes: Using an array as a hash
X<pseudo-hash> X<pseudo hash> X<pseudohash>

(유사해쉬 : 배열을 해쉬로 사용)

=begin original

B<WARNING>:  This section describes an experimental feature.  Details may
change without notice in future versions.

=end original

B<경고>: 이 섹션은 실험적인 기능을 설명하 있습니다.
앞으로의 버젼에서는, 자세한 점ㅇ느 예고없이 변경될 가능성이 있습니다.

=begin original

B<NOTE>: The current user-visible implementation of pseudo-hashes
(the weird use of the first array element) is deprecated starting from
Perl 5.8.0 and will be removed in Perl 5.10.0, and the feature will be
implemented differently.  Not only is the current interface rather ugly,
but the current implementation slows down normal array and hash use quite
noticeably.  The 'fields' pragma interface will remain available.

=end original

B<주의>: 현재의 눈에띄는 형태의 유사해쉬의 완성(배열의 최초 요소를 
기묘한 형태로 사용하는 것)은 Perl 5.8.0 부터 비권장사항입니다; 
Perl 5.10.0 부터는 없어져서 이 기능은 별도의 방법으로 만들어질 예정입니다.
현재의 인터페이스는 지저분할 뿐아니라, 현재의 완성은 일반적인 배열과
해쉬의 이용을 꽤 눈에띄게 늦어지게 하고 있습니다.
"fields" 프라그마인터페이스는 이용가능한대로 남겨둡니다.

=begin original

Beginning with release 5.005 of Perl, you may use an array reference
in some contexts that would normally require a hash reference.  This
allows you to access array elements using symbolic names, as if they
were fields in a structure.

=end original

5.005 릴리즈부터 일반적인 해쉬리퍼런스가 요구되는 컨텍스트의 일부에서
배열리퍼런스를 사용할 수 있게 되었습니다.
이것은 그것이 구조체의 필드인 것처럼 심볼이름을 사용한 배열요소로의
접근을 가능하게 합니다.

=begin original

For this to work, the array must contain extra information.  The first
element of the array has to be a hash reference that maps field names
to array indices.  Here is an example:

=end original

이것을 수행하기 위해서, 배열은 쓸데없는 정보를 가지지 않으면 안됩니다.
배열의 최초의 요소는 필드이름을 배열의 첨자로 매핑하는
해쉬리퍼런스가 아니면 안됩니다.
예를 들어볼까요?

    $struct = [{foo => 1, bar => 2}, "FOO", "BAR"];

    $struct->{foo};  # same as $struct->[1], i.e. "FOO"
    $struct->{bar};  # same as $struct->[2], i.e. "BAR"

    keys %$struct;   # will return ("foo", "bar") in some order
    values %$struct; # will return ("FOO", "BAR") in same some order

    while (my($k,$v) = each %$struct) {
       print "$k => $v\n";
    }

=begin original

Perl will raise an exception if you try to access nonexistent fields.
To avoid inconsistencies, always use the fields::phash() function
provided by the C<fields> pragma.

=end original

존재하지 않는 필드에 대해 접근하려고 한 경우, Perl 은
예외를 발생합니다.
모순을 피하기 위해, C<fields> 프라그마로 제공된 fields::phash() 함수를
항상 사용해주세요.

    use fields;
    $pseudohash = fields::phash(foo => "FOO", bar => "BAR");

=begin original

For better performance, Perl can also do the translation from field
names to array indices at compile time for typed object references.
See L<fields>.

=end original

퍼포먼스를 향상시키기 위해, Perl 은 정리된 오브젝트 리퍼런스를 위한
필드이름으로부터 배열첨자로의 변환을 컴파일시에 수행해 버릴 수도 있습니다.
L<fields> 를 참조해주세요.

=begin original

There are two ways to check for the existence of a key in a
pseudo-hash.  The first is to use exists().  This checks to see if the
given field has ever been set.  It acts this way to match the behavior
of a regular hash.  For instance:

=end original

유사해쉬로 키의 존재를 체크하는 방법은 2가지 있습니다.
첫번째는 exists() 를 사용하는 것입니다.
이 체크는 지정된 필드 값이 정해졌는지 어떤지를 알수 있습니다.
이것은 이 의미로 일반적인 해쉬의 행동과 일치합니다.
예를 들면;

    use fields;
    $phash = fields::phash([qw(foo bar pants)], ['FOO']);
    $phash->{pants} = undef;

    print exists $phash->{foo};    # true, 'foo' was set in the declaration
    print exists $phash->{bar};    # false, 'bar' has not been used.
    print exists $phash->{pants};  # true, your 'pants' have been touched

=begin original

The second is to use exists() on the hash reference sitting in the
first array element.  This checks to see if the given key is a valid
field in the pseudo-hash.

=end original

두번째는, 최초의 배열요소에 있는 해쉬리퍼런스에 exists() 를 사용하는 것입니다.
이것은, 키가 유사해쉬의 유효한 필드인 것을 체크합니다.

    print exists $phash->[0]{bar};	# true, 'bar' is a valid field
    print exists $phash->[0]{shoes};# false, 'shoes' can't be used

=begin original

delete() on a pseudo-hash element only deletes the value corresponding
to the key, not the key itself.  To delete the key, you'll have to
explicitly delete it from the first hash element.

=end original

유사해쉬의 요소에 대한 delete() 는 그 키가 아닌  키에 대응한 값만을 삭제합니다.
키를 삭제하려면, 최초의 해쉬요소부터 명시적으로 없앨 필요가 있습니다.

    print delete $phash->{foo};     # prints $phash->[1], "FOO"
    print exists $phash->{foo};     # false
    print exists $phash->[0]{foo};  # true, key still exists
    print delete $phash->[0]{foo};  # now key is gone
    print $phash->{foo};            # runtime exception

=head2 Function Templates
X<scope, lexical> X<closure> X<lexical> X<lexical scope>
X<subroutine, nested> X<sub, nested> X<subroutine, local> X<sub, local>

(함수 템플릿)

=begin original

As explained above, an anonymous function with access to the lexical
variables visible when that function was compiled, creates a closure.  It
retains access to those variables even though it doesn't get run until
later, such as in a signal handler or a Tk callback.

=end original

앞에서 설명한대로, 함수가 컴파일된 때에 가시적인 렉시컬변수에
접근하는 이름없는 함수는 클로져를 만듭니다.
그런 변수에 대한 접근은 신호핸들러이거나 Tk 의 콜백처럼,
나중에 실행될 때까지 보존된 값을 가져옵니다.

=begin original

Using a closure as a function template allows us to generate many functions
that act similarly.  Suppose you wanted functions named after the colors
that generated HTML font changes for the various colors:

=end original

함수 템플릿으로써 클로져를 사용하는 것에 의해, 같은 함수를
많이 만드는 것도 가능합니다.
여기에 여러 색을 위해 폰트를 변경하는 HTML을 생성하는 
색의 이름을 붙인 함수를 필요로 한다고 합시다:

    print "Be ", red("careful"), "with that ", green("light");

=begin original

The red() and green() functions would be similar.  To create these,
we'll assign a closure to a typeglob of the name of the function we're
trying to build.  

=end original

red() 와 green() 이라는 함수는 비슷한 것이 됩니다.
이런 것들을 만들어 내기위해 만들려고하는 함수의 이름의 형GLOB에
클로져를 대입합니다.

    @colors = qw(red blue green yellow orange purple violet);
    for my $name (@colors) {
        no strict 'refs';	# allow symbol table manipulation
        *$name = *{uc $name} = sub { "<FONT COLOR='$name'>@_</FONT>" };
    } 

=begin original

Now all those different functions appear to exist independently.  You can
call red(), RED(), blue(), BLUE(), green(), etc.  This technique saves on
both compile time and memory use, and is less error-prone as well, since
syntax checks happen at compile time.  It's critical that any variables in
the anonymous subroutine be lexicals in order to create a proper closure.
That's the reasons for the C<my> on the loop iteration variable.

=end original

이것으로, 각각의 함수는 별개로 만들어집니다.
red(), RED(), blue(), BLUE(), green() 처럼 호출할 수 있습니다.
이 테크닉은 컴파일 시간과 메모리 사용량을 줄이고,
에러를 적게 합니다.
왜냐면, 구문체크는 컴파일시에 이루어지기 때문입니다.
이름없는 함수에 있는 변수는 모두, 적절한 클로져를 만들기 위해 중요합니다.
이것은 루프 반복변수에 대한 C<my> 의 이유와 동일합니다.

=begin original

This is one of the only places where giving a prototype to a closure makes
much sense.  If you wanted to impose scalar context on the arguments of
these functions (probably not a wise idea for this particular example),
you could have written it this way instead:

=end original

이것은 클로져에 프로토타입을 주기위한 장소중 하나이기도 합니다.
생성하는 함수의 인수에 스칼라컨텍스트를 줄려고 하면
(아마도 이 예제에 관해서는 그닥 현명한 방법이 아닐겁니다)
아래처럼 쓸 수도 있습니다:

    *$name = sub ($) { "<FONT COLOR='$name'>$_[0]</FONT>" };

=begin original

However, since prototype checking happens at compile time, the assignment
above happens too late to be of much use.  You could address this by
putting the whole loop of assignments within a BEGIN block, forcing it
to occur during compilation.

=end original

그러나, 프로토타입의 검사는 컴파일시에 수행되기에,
이 대입문은 프로토타입을 사용하기에에는 너무 느립니다.
대입문의 루프전체를 BEGIN 블록에 놓고 모든 것을
컴파일시에 수행하려고하는 것으로 이것에 대해 대처할 수 있습니다.

=begin original

Access to lexicals that change over type--like those in the C<for> loop
above--only works with closures, not general subroutines.  In the general
case, then, named subroutines do not nest properly, although anonymous
ones do. Thus is because named subroutines are created (and capture any
outer lexicals) only once at compile time, whereas anonymous subroutines
get to capture each time you execute the 'sub' operator.  If you are
accustomed to using nested subroutines in other programming languages with
their own private variables, you'll have to work at it a bit in Perl.  The
intuitive coding of this type of thing incurs mysterious warnings about
"will not stay shared".  For example, this won't work:

=end original

형태를 변경하려는 렉시컬 변수에 대한 접근 -- 예를 들면 앞의 예의
C<for> 루프같은 것 -- 은 클로져에 둔것만 동작하고,
일반적인 서브루틴에서는 동작하지않습니다.
일반적인 케이스에서는 이름붙은 서브루틴은 적절히 중첩된 것은 없고,
(중첩된 것이)이름없는 함수인 것도 같습니다.
이것은 이름있는 서브루틴은 컴파일 시에 한번만 작성되는(
그리고 바깥쪽의 렉시컬에 포착된)것에 대해, 이름없는 서브루틴은
'sub' 연산자가 실행될 때에 포착되기 때문입니다.
다른 프로그래밍언어에 있을 듯한 고유의 프라이베이트변수를 가진
중첩된 서브루틴을 사용하고 싶다면, Perl 에서는 조금 손을 써야합니다.
직감적으로 이거라고 생각한 코딩은 불가사의한 경고 "will not stay shared"
가 됩니다.
예를 들자면, 아래의 예제는 제대로 동작하지 않습니다:

    sub outer {
        my $x = $_[0] + 35;
        sub inner { return $x * 19 }   # WRONG
        return $x + inner();
    }

=begin original

A work-around is the following:

=end original

아래처럼 하면 잘 움직입니다.

    sub outer {
        my $x = $_[0] + 35;
        local *inner = sub { return $x * 19 };
        return $x + inner();
    }

=begin original

Now inner() can only be called from within outer(), because of the
temporary assignments of the closure (anonymous subroutine).  But when
it does, it has normal access to the lexical variable $x from the scope
of outer().

=end original

이것으로, inner() 는 outer() 의 안에서만 호출할 수 있게 됩니다.
왜냐면, 클로져(무명함수)의 일시변수에 대한 대입이 있기 때문입니다.
그러나 이것을 수행할 때, outer()의 스코프에서 렉시컬변수 $x의
접근은 일반적인 경우대로입니다.

=begin original

This has the interesting effect of creating a function local to another
function, something not normally supported in Perl.

=end original

이것은 일반적인 Perl 에서는 지원하지 않는
어떤 함수에 로컬한 함수를 생성할때의 흥미있는 효과입니다.

=head1 WARNING
X<reference, string context> X<reference, use as hash key>

(경고)

=begin original

You may not (usefully) use a reference as the key to a hash.  It will be
converted into a string:

=end original

리퍼런스를 해쉬에 대한 키로 사용할 수는  없습니다.
그것은 문자열로 변환되기때문입니다.

    $x{ \$a } = $a;

=begin original

If you try to dereference the key, it won't do a hard dereference, and
you won't accomplish what you're attempting.  You might want to do something
more like

=end original

키를 디리퍼런스하려고 한다면, 그것은 하드리퍼런스에서는 작동하지 않습니다.
다음과 같은 코드를 쓰고싶다고 생각할지도 모르겠습니다만,

    $r = \@a;
    $x{ $r } = $r;

=begin original

And then at least you can use the values(), which will be
real refs, instead of the keys(), which won't.

=end original

동작하지 않는 keys() 대신에 적게나마 진짜 리퍼런스가 되는
values() 를 사용할 수 있습니다.

=begin original

The standard Tie::RefHash module provides a convenient workaround to this.

=end original

표준모듈 Tie::RefHash 는 이것을 다루기 쉽게 하기위한 수단을 제공하고 있습니다.

=head1 SEE ALSO

=begin original

Besides the obvious documents, source code can be instructive.
Some pathological examples of the use of references can be found
in the F<t/op/ref.t> regression test in the Perl source directory.

=end original

도큐멘트 외에, 소스코드도 도움이 됩니다.
몇개인가의 리퍼런스를 사용한 병리학적인 샘플은 Perl 의
소스디렉토리에 있는 F<t/op/ref.t> 라는 퇴행 테스트에 있습니다.

=begin original

See also L<perldsc> and L<perllol> for how to use references to create
complex data structures, and L<perltoot>, L<perlobj>, and L<perlbot>
for how to use them to create objects.

=end original

복잡한 데이터 구조를 생성하기위한 리퍼런스의 사용법은
L<perldsc> 와 L<perllol> 을 참조해주세요.
오브젝트를 생성하기위한 리퍼런스의 사용법은
L<perltoot>,L<perlobj>,L<perlbot> 를 참조해 주세요. 




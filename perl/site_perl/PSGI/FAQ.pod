=encoding utf8

=head1 NAME

PSGI::FAQ - Frequently Asked Questions and answers

	PSGI::FAQ - 자주 묻는 질문과 답변

=head1 QUESTIONS

=head2 General

=head3 How do you pronounce PSGI? - 어떻게 발음 하나여?

We read it simply P-S-G-I, but you may be able to pronounce it "sky" :)

	간단하게 피-에스-지-아이 라고 읽습니다, 근데 "야멯떼"라고 발음해도 됩니다 :)

=head3 So what is this? - 이게 먼가여?

PSGI is an interface between web servers and perl-based web
applications akin to what CGI does for web servers and CGI scripts.

	PSGI 는 웹서버와 펄로 작성된 웹애플리케이션 사이의 인터페이스 입니다.
	일종의 CGI가 웹서버와 CGI 스크립트 사이에서 하는 일과 비슷합니다.

=head3 Why do we need this? - 이게 왜 필요한가여?

Perl has L<CGI> as a core module that somewhat abstracts the
difference between CGI, mod_perl and FastCGI. However, most web
application framework developers (e.g. Catalyst and Jifty) usually
avoid using it to maximize the performance and to access low-level
APIs. So they end up writing adapters for all of those different
environments, some of which may be well tested while others are not.

	펄의 코어 모듈인 'CGI'는 CGI, mod_perl 그리고 FastCGI 사이에서 약간 
	추상적인 차이점을 가지고 있습니다. 하지만, 대부분의 웹애플리케이션
	프레임워크 개발자들 (예를들어 Catalyst 와 Jifty) 은 보통 최대한의 성능과 
	저수준의 API 접근 때문에 이것의 사용을 기피하고 있습니다.  그래서 그들은
	그것들의 다른 환경마다의 아답터를 만들고 있습니다.  어떤것들은 테스트가 잘
	되었을 수 있지만, 그렇지 않은 것도 있을 수 있습니다.

PSGI allows web application framework developers to only write an
adapter for PSGI.  End users can choose from among all the backends that
support the PSGI interface.

	PSGI는 웹애플리케이션 프레임워크 개발자가 PSGI용 아답터 한개만 작성해도 되게끔 해줍니다.
	엔드유저(End User)는 PSGI 인터페이스를 지원하는 프레임워크를 선택 할 수 있습니다.

=head3 You said PSGI is similar to CGI. How is the PSGI interaface different from CGI? - 당신은 PSGI가 CGI와 비슷하다고 했습니다. PSGI와 인터페이스와 CGI는 어떻게 다른가여?

The PSGI interface is intentionally designed to be very similar to CGI so
that supporting PSGI in addition to CGI would be extremely easy. Here's
a highlight of the key differences between CGI and PSGI:

	PSGI 인터페이스는 의도적으로 CGI와 매우 유사하게 디자인 되었습니다.
	그래서 PSGI에 CGI를 더해서 지원하는 것은 무지하게 쉬울 것입니다. 
	CGI와 PSGI의 차이점의 가장 중요한 열쇠가 여기에 있습니다.

=over 4

=item *

In CGI, servers are the actual web servers written in any languages
but mostly in C, and script is a script that can be written in any
language such as C, Perl, Shell scripts, Ruby or Python.

	CGI 에서는, 서버는 실제 웹서버이고 어떤 언어로든 작성될 수 있지만, 대부분 'C' 언어로 되어있습니다.
	그리고 스크립트는 'C', 'Perl', 'Shell', 'Ruby', 'Python'과 같은 어떤 언어로도 작성될 수 있습니다. 

In PSGI, servers are still web servers, but they're perl processes that
are usually embedded in the web server (like mod_perl) or a perl daemon
process called by a web server (like FastCGI), or an entirely perl based
web server.

	PSGI 에서는, 서버는 같은 웹서버이지만, 펄프로세스가 웹서버 안에 임베디드 되어 있거나(mod_perl 처럼)
	펄 데몬 프로세스가 웹서버에 의해 호출 되거나(FastCGI 처럼), 또는 웹서버가 완전히 펄 기반으로 이루어져 
	있습니다.

=item *

In CGI, we use STDIN, STDERR, and environment variables to read
parameters and the HTTP request body and to send errors from the
application.

	CGI 에서는, 애플리케이션으로부터 STDIN, STDERR, 환경변수를 파라미터를 읽고 HTTP 
	요청과 에러를 전송하는데 사용합니다.

In PSGI, we use the C<$env> hash references and the I<psgi.input> and
I<psgi.errors> streams to pass that data between servers and applications.

	PSGI 에서는, $env 해쉬 레퍼런스와 psgi.input, psgi.error 스트림을 서버와 애플리케이션
	사이의 데이터 전달에 사용합니다

=item *

In CGI, applications are supposed to print HTTP headers and body to
STDOUT to pass it back to the web server.

	CGI 에서는, 애플리케이션은 HTTP 헤더와 본문 출력을 STDOUT을 통해 웹서버로 돌려준다고 가정합니다

In PSGI, applications are supposed to return a HTTP status code,
headers, and body (as an array ref or a filehandle-like object) to the
application as an array reference.

	PSGI 에서는, 애플리케이션은 HTTP 상태 코드(status code), 헤더, 본문(어레이 레퍼런스 혹은 파일핸들같은 객체로)을
	애플리케이션(* Plack 과 같은 PSGI 구현물을 말하는 듯)에 어레이 레퍼런스로 돌려준다고 가정합니다.

=back

=head3 My framework already does CGI, FCGI and mod_perl. Why do I want to support PSGI? - 내 프레임워크는 이미 CGI, FCGI, mod_perl에서 동작하고 있습니다. 왜 PSGI를 지원해야 하나여?

If your web application framework already supports most server
environments, performance is good, and the backends are well tested,
there may not be a direct benefit for you to support PSGI immediately --
though you would be able to remove any code that overlaps with PSGI
backends. But if only CGI environment is currently supported, supporting
PSGI in addition should be extremely easy, and the benefit you and your
framework users will enjoy is huge.

	만든 웹애플리케이션 프레임워크가 이미 대부분의 서버환경을 지원하고, 뛰어난 성능에, 최종 테스트가 잘 되어있다면
	당장 PSGI를 지원한다고해서 직접적으로 얻을 수 있는 이익은 없을 수 있습니다. -- 그래도 중복되는 코드를 없앨 수 
	있습니다. 그러나 현재 CGI 환경만을 지원하고 있다면, PSGI도 지원하는 것이 훨씬 쉬울 것 입니다. 그로인해 당신과 당신의
	프레임워크를 사용하는 사용자들에게 여유가 생길 것 입니다.

=head3 I'm writing a web application. What's the benefit of PSGI for me? - 저는 웹애플리케이션을 만들고 있어요. PSGI로 부터 얻는 이익은 뭔가여?

If the framework you're using supports PSGI, that means your
application can run on any of existing and future PSGI
implementations. You can provide a C<.psgi> file that returns PSGI
application, the end users of your application should be able to
configure and run your application in a bunch of different ways.

	당신이 사용하고 있는 프레임워크가 PSGI를 지원하고 있다면, 당신의 애플리케이션은 만들어져 있거나 만들어질 PSGI구현물
	위에서 실행될 수 있습니다. 당신은 PSGI 를 return 하는 '.psgi' 파일을 제공할 수 있습니다. 당신의 애플리케이션 사용자는
	다양한 방법으로 당신의 애플리케이션을 구성(configure)할 수 있고, 실행할 수 있습니다.

=head3 But I'm writing a web application in CGI and it works well. Should I switch to PSGI? - 근데 내가 만들고 있는 웹애플리케이션은 CGI이고, 잘 동작합니다. 그래도 PSGI로 바꾸어야 할까요?

If you're writing a web application with a plain CGI.pm and without
using any web frameworks, you're limiting your application in the
plain CGI environments, along with mod_perl and FastCGI with some
tweaks. If you're the only one developer and user of your application
then that's probably fine.

	당신이 만들고 있는 웹애플리케이션이 다른 웹 프레임워크를 사용하지 않고 평범한 'CGI.pm'으로 작성되고 있다면
	당신은 애플리케이션을 mod_perl과 FastCGI를 조금 개조한 평범한 CGI 환경으로 제한하게 됩니다. 당신이 당신의 
	애플리케이션의 유일한 개발자이자 사용자라면 아마 괜찮을 겁니다.

One day you want to deploy your application in the shared hosting for
your clients, or run your server in the standalone mode, or distribute
your application as an open source software. Limiting your application
in the CGI environment by using CGI.pm will bite you then.

	어느날 당신의 클라이언트를 위해 공유호스팅에 애플리케이션을 배포하거나, 서버가 독립적으로 실행되기를 원한다거나, 
	오픈소스 소프트웨어로 배포하기를 원할 수 있습니다. CGI 환경에서 'CGI.pm'을 사용한 제한된 당신의 애플리케이션은 
	나쁜영향을 줄 수도 있습니다.

You can start using one of PSGI compatible frameworks (either
full-stack ones or micro ones), or use L<Plack::Request> if you are
anti frameworks, to make your application PSGI aware, to be more
future proof.

	당신은 PSGI 호환 가능한 프레임워크(아주작은거 또는 전체 둘중한개)중 하나를 사용해서 시작할 수 있습니다.
	당신이 안티프레임워크 라면 'Plack::Request' 를 사용할 수도 있습니다. 애플리케이션을 PSGI가 알아차리도록 하고, 
	미래를 대비하세요. * FIXME *

Even if you ignore PSGI today and write applications in palin CGI, you
can always later switch to PSGI with the L<CGI::PSGI> wrapper.

	설사 오늘 PSGI를 무시하고 애플리케이션을 평범한 CGI로 작성하더라도, 나중에 'CGI::PSGI'를 이용해서 PSGI로 갈아탈 수
	있습니다.

=head3 What should I do to support PSGI? - PSGI를 지원하기 위해서 뭘 해야 하나여?

If you're a web server developer, write a PSGI implementation that
calls a PSGI application. Or join the development on Plack, the
reference implementation of PSGI, to add backends for more web servers.

	웹서버 개발자라면, PSGI 애플리케이션을 호출하는 구현물을 작성합니다. 또는 Plack 개발에 참여하세요.
	PSGI 구현의 레퍼런스는 더많은 웹서버를 백엔드에 추가하는 것입니다. * FIXME *

If you're a web application framework developer, write an adapter for
PSGI. Now you're freed from supporting all different server
environments.

	웹애플리케이션 프레임워크 개발자라면, PSGI를 위한 아답터를 작성하세요.
	지금 당신은 모두 다른 서버환경을 지원하는 일로부터 해방되었습니다.

If you're a web application developer (or a web application framework
user), choose the framework that supports PSGI, or ask the author to
support it. :) If your application is a large scale installable
application that doesn't use any existing frameworks (e.g. WebGUI or
Movable Type) you're considered as a framework developer instead from
the PSGI point of view. So, writing an adapter for PSGI on your
application would make more sense.

	웹애플리케이션 개발자(또는 웹애플리케이션 프레임워크 사용자) 라면, PSGI를 지원하는 프레임워크를 고르거나, 
	해당 프레임워크 작성자한테 PSGI를 지원하는지 물어보세요. :) 
	만약 애플리케이션이 커다란 규모의 설치가능한 애플리케이션 이라면 어떠한 프레임워크도 사용하지 않습니다.
	(예를들어 WebGUI 나 Movable Type) 당신은 프레임워크 개발자가 PSGI를 보는 관점에서 고려해 볼 수 있습니다.
	그래서, 당신의 애플리케이션 위에서 동작하는 PSGI를 위한 아답터를 작성하고 더욱 감각적으로 만드세요.

=head3 Is PSGI faster than (my framework)? - PSGI가 내가 만든 프레임워크보다 빠른가여?

Again, PSGI is not an implementation, but there's a potential for a
very fast PSGI implementation that preloads everything and runs fully
optimized code as a preforked standalone with XS parsers and
sendfile(2) kernel call, an event-based tiny web server written in C
and embedded perl that supports PSGI, or a plain-old CGI.pm based
backend that doesn't load any modules at all and runs pretty quickly
without eating so much memory under the CGI environment.

	다시 말하지만, PSGI는 구현물이 아닙니다, 하지만 굉장히 빠른 PSGI 구현물이 가능합니다.
	모든 것을 미리 로드하고 충분히 최적화된 코드로 XS 파서와 sendfail(2) 커널 호출을 사용한 prefork 되고 독립적인, 
	이벤트 기반의 'C' 로 작성된 아주작은 웹서버가 펄에 임베디드 되어 있는 구현물이 PSGI를 지원할 수 있습니다. 
	또는 평범하고 나이많은 CGI.pm 기반의 백엔드가 CGI 환경에서 많은 메모리를 소비하지 않고 한번에 모듈을 로드하지않으며
	빠르게 실행 할 수도 있습니다. * FIXME *
	*** 닥치고 빠르니까 걱정하지 말란 뜻인 듯..

The reference implementation Plack already has very fast backends like
Standalone::Prefork and Coro.

	구현물 Plack 은 'Standalone::Prefork' 와 'Coro' 처럼 이미 매우 빠른 백엔드를 가지고 있다는걸 참고하세요. 

Users of your framework can choose which backend is the best for their
needs.  You, as a web application framework developer, don't need to
think about lots of different users with different needs.

	당신의 프레임워크 사용자들은 어떤 백엔드가 그들의 가장 필요한 것인지 고를 수 있습니다.
	당신이 웹애플리케이션 프레임워크 개발자라면, 수많은 사용자가 필요로하는 needs 를 생각할 필요가 없습니다.

=head2 Plack

=head3 What is Plack? What is the difference between PSGI and Plack? - Plack인 먼가여? PSGI와 Plack의 차이점은 먼가여?

PSGI is a specification, so there's no software or module called PSGI.
End users will need to choose one of PSGI server implementations to
run PSGI applications on. Plack is a reference PSGI implementation
that supports environments like prefork standalone server, CGI,
FastCGI, mod_perl, AnyEvent and Coro.

	PSGI는 명세서입니다. 그래서 PSGI라고 불리우는 소프트웨어나 모듈이 없습니다.
	엔드유저는 PSGI 애플리케이션 구동에 PSGI 서버 구현물중 한개를 선택할 필요가 있습니다.
	Plack은 PSGI 레퍼런스 구현물 입니다. 이것은 prefork 된 독립적인 서버, CGI, FastCGI, mod_perl, AnyEvent, 
	Coro와 같은 환경을 지원합니다. * FIXME * - PSGI 레퍼런스 구현물이 뭔말인가?

Plack also has useful APIs and helpers on top of PSGI, such as
L<Plack::Request> to provide a nice object-oriented API on request
objects, L<plackup> that allows you to run an PSGI application from
the command line and configure it using C<app.psgi> (a la Rack's
Rackup), and L<Plack::Test> that allows you to test your application
using standard L<HTTP::Request> and L<HTTP::Response> pair through
mocked HTTP or live HTTP servers. See L<Plack> for details.

	Plack은 또한 유용한 API와 헬퍼를 PSGI 최상위층 위에 가지고 있습니다.
	'Plack::Request' 와 같이 요청 개체들 위에 좋은 객체지향 API를 제공 합니다.
	'plackup' 은 당신의 PSGI 애플리케이션을 'app.psgi'를 사용해서 구성하고 
	커맨드 라인으로 수행 할 수 있도록 허용합니다.(a la Rack's Rackup) * FIXME * - 뭔말인감?
	그리고, 'Plack::Test'는 당신의 애플리케이션을 'HTTP::Request', 'HTTP::Response' 표준 모듈
	사용을 통해 HTTP 모형 또는 실시간 HTTP 서버로 테스트 하도록 허용합니다. 자세한 내용은 'Plack' 을 참고하세요

=head3 What kind of server backends would be available? - 백엔드로 사용가능한 서버의 종류는 먼가여?

In Plack, we already support most web servers like Apache2, and also the
ones that supports standard CGI or FastCGI, but also want to support
special web servers that can embed perl, like nginx. We think it would
be really nice if Apache module mod_perlite and Google AppEngine
supported PSGI too, so that you could run your PSGI/Plack based perl app
in the cloud.

	Plack 에서는, 이미 대부분의 웹서버(Apache2, 표준 CGI 또는 FastCGI를 지원하는)를 지원합니다.
	그러나 펄을 임베드 시킬 수 있는 특별한 웹서버 역시 지원하길 원합니다. nginx 처럼요.
	만약에 아파치 모듈 mod_perlite 와 구글 AppEngine 이 PSGI를 지원하게 된다면, 그래서 당신의 PSGI/Plack
	기반의 펄 애플리케이션을 클라우드에서 동작하게 된다면 정말 좋을 것이라고 생각합니다.

=head3 Ruby is Rack and JavaScript is Jack. Why is it not called Pack? - 루비에선 Rack, 자바스크립트에선 Jack입니다. 왜 Pack 이라고 안부르나여?

Well Pack indeed is a cute name, but Perl has a built-in function pack
so it's a little confusing, especially when speaking instead of writing.

	글쎄여 Pack 은 사실 귀여운 이름입니다. 그러나 펄은 내장된 함수 pack을 가지고 있습니다.
	그래서 조금 헛갈립니다. 특히 쓸때 보다 말할때 헷갈립니다. (pack : Pack)

=head3 What namespaces should I use to implement PSGI support? - PSGI를 구현하기 위해서 어떤 네임스페이스를 사용해야 하나여?

B<Do not use the PSGI:: namespace to implement PSGI backends
or adapters>.

	PSGI 백엔드 또는 아답터 구현에 있어서 PSGI 네임스페이스를 사용하지 마세요

The PSGI namespace is reserved for PSGI specifications and reference
unit tests that implementors have to pass. It should not be used by
particular implementations.

	PSGI 네임스페이스는 PSGI 명세서와 통과 되어야만 하는 레퍼런스 유닛 테스트 도구를 위해 예약되어 있습니다.
	부분적인 구현에 사용되어서는 안됩니다. * FIXME *

If you write a plugin or an extension to support PSGI for an
(imaginary) web application framework called C<Camper>, name the code
such as C<Camper::Engine::PSGI>.

	만약에 'Camper'(가상의 이름) 라고 불리우는 웹애플리케이션 프레임워크를 위해 PSGI 플러그인 또는 
	확장을 만들려고 한다면, 'Camper::Engine::PSGI' 처럼 적을 수 있습니다.

If you write a web server that supports PSGI interface, then name it
however you want. You can optionally support L<Plack::Server>'s
abstract interface, which is:

	PSGI 인터페이스를 지원하는 웹서버를 작성한다면, 당신이 원하는 이름을 지을 수 있다.
	당신은 선택적으로 'Plack::Server'의 추상적인 인터페이스를 지원할 수 있다, 어느 것이냐면:

  my $server = Plack::Server::FooBar->new(%opt);
  $server->run($app);

By supporting this C<new> and C<run> in your server, it becomes
plackup compatible, so users can run your app via C<plackup>. You're
recommended to, but not required to follow this API, in which case you
have to provide your own PSGI app launcher.

	이러한 'new' 와 'run' 을 서버안에 지원함으로써, plackup이 호환됩니다, 그래서 사용자들은
	당신의 애플리케이션을 'plackup'으로 실행 시킬 수 있습니다. 이렇게 하기를 추천하지만, 
	이 API를 따르는게 필수적인 것은 아닙니다, 당신이 만든 PSGI 실행기를 당신이 제공해야 하는 경우도
	있습니다.

=head3 I have a CGI or mod_perl application that I want to run on PSGI/Plack. What should I do? - 제가 가지고 있는 CGI 또는 mod_perl 애플리케이션을 PSGI/Plack 위에서 돌리고 싶어여. 어떻해야 하나여?

You have several choices:

	몇가지 방법이 있습니다:

=over 4

=item CGI::PSGI

If you have a web application (or framework) that uses CGI.pm to handle
query parameters, L<CGI::PSGI> can help you migrate to PSGI.  You'll
need to change how you create CGI objects and how to return the response
headers and body, but the rest of your code will work unchanged.

	CGI.pm 을 사용해서 쿼리 파라미터를 취급하는 웹애플리케이션(혹은 프레임워크)을 가지고 있다면, 
	'CGI::PSGI' 모듈이 PSGI로 이전하는데 도움을 줄 수 있습니다. 당신은 CGI 객체를 만드는 방법과,
	헤더와 본문을 리턴하는 방법을 바꿀 필요가 있습니다, 그러나 코드의 나머지 부분은 그대로 동작합니다.

=item CGI::Emulate::PSGI

If you have a dead old CGI script that you want to change as little as
possible (or even no change at all, by running it with C<do>), then
L<CGI::Emulate::PSGI> can wrap it up as a PSGI application.  Compared
to L<CGI::PSGI>, this is less efficient, but should work with any CGI
implementation, not just CGI.pm.

	늙어죽은 CGI 스크립트를 가지고 있고 가능한한 조금만 바꿔서 돌리길 원한다면(혹은 'do'를 사용해서 돌게
	함으로써, 전혀 안바꾸고), 'CGI::Emulate::PSGI' 가 그것을 PSGI 애플리케이션으로 포장할 수 있습니다.
	'CGI::PSGI' 와 비교했을때, 이건 덜 효율적이지만, 어떠한 CGI 구현물과도 함께 동작할 수 있을 겁니다.
	CGI.pm 만 빼고.

=item Plack::Request and Plack::Response

If you have an L<HTTP::Engine> based application (framework), or want to
write an app from scratch and need a better interface than L<CGI>, or
you're used to L<Apache::Request>, then L<Plack::Request> and
L<Plack::Response> might be what you want. It gives you a nice
Request/Response object API on top of the PSGI env hash and response
array.

	'HTTP::Engine' 기반의 애플리케이션(프레임워크)를 가지고 있거나, 'CGI' 보다 더 나은 인터페이스로
	스크래치로부터 애플리케이션을 작성하기를 원한다거나, 'Apache::Request' 를 사용하는데 익숙하다면, 
	'Plack::Request' 와 'Plack::Response' 가 당신이 원하는 것일 수 있습니다. 이것은 당신에게 PSGI
	env 해쉬와 응답 어레이의 최상단 위에 좋은 요청/응답 API 객체를 줍니다. * FIXME *

=back

NOTE: Don't forget that whenever you have a CGI script that runs once
and exits, and you turn it into a persistent process, it may have
cleanup that needs to happen after every request -- variables that need
to be reset, files that need to be closed or deleted, etc.  PSGI can do
nothing about that (you have to fix it) except give you this friendly
reminder.

	주의: 잊지마세요, 어디서든지 당신은 한번 실행되고(run) 나가는(exit) CGI 스크립트 가집니다, 
	그리고 당신이 그것을 영구적인 프로세스로 돌리게 되면, 그것에는 각 요청 후에 일어날 필요가 있는 대청소가
	있을지도 모릅니다. -- 변수는 리셋이 필요하고, 파일은 닫히거나, 지워져야 하고, 기타등등. PSGI는 그러한 
	것들에 대해 이러한 친절하게 알려주는 것 이외에는 아무것도 할 수 없습니다.(당신이 고쳐야 합니다) 

=head2 HTTP::Engine

=head3 Why PSGI/Plack instead of HTTP::Engine?

HTTP::Engine was a great experiment, but it mixed the application
interface (the C<request_handler> interface) with implementations, and
the monolithic class hierarchy and role based interfaces make it really
hard to write a new backend. We kept the existing HTTP::Engine and broke
it into three parts: The interface specification (PSGI), Reference
server implementations (Plack::Server) and Standard APIs and Tools
(Plack).

=head3 Will HTTP::Engine be dead?

It won't be dead. HTTP::Engine will stay as it is and still be useful
if you want to write a micro webserver application rather than a
framework.

=head3 Do I have to rewrite my HTTP::Engine application to follow PSGI interface?

No, you don't need to rewrite your existing HTTP::Engine application.
It can be easily turned into a PSGI application using
L<HTTP::Engine::Interface::PSGI>.

Alternatively, you can use L<Plack::Request> and L<Plack::Response>
which gives compatible APIs to L<HTTP::Engine::Request> and
L<HTTP::Engine::Response>:

  use Plack::Request;
  use Plack::Response;

  sub request_handler {
      my $req = Plack::Request->new(shift);
      my $res = Plack::Response->new;
      # ...
      return $res->finalize;
  }

And this C<request_handler> is a PSGI application now.

=head3 What's the benefit of converting my HTTP::Engine app to run on PSGI?

As of today most web server implementations and middlewares
implemented by Plack are mostly available on HTTP::Engine as well, so
there might not be direct immediate benefit of switching to PSGI. But
PSGI is more future proof, and there are high hope that in the near
future we'll have a pretty fast server environments (think of Passenger
for Ruby Rack) and/or plenty of useful middlewares that HTTP::Engine
doesn't have today.

See the question I<My framework already does CGI, FCGI and
mod_perl. Why do I want to support PSGI?> for more details.
  
=head2 API Design

Keep in mind that most design choices made in the PSGI spec are to
minimize the requirements on backends so they can optimize things.
Adding a fancy interface or allowing flexibility in the PSGI layers
might sound catchy to end users, but it would just add things that
backends have to support, which would end up getting in the way of
optimizations, or introducing more bugs. What makes a fancy API to
attract web application developers is your framework, not PSGI.

=head3 Why a big env hash instead of objects with APIs?

The simplicity of the interface is the key that made WSGI and Rack
successful. PSGI is a low-level interface between backends and web
application framework developers. If we define an API on what type of
objects should be passed and which method they need to implement,
there will be so much duplicated code in the backends, some of
which may be buggy.

For instance, PSGI defines C<< $env->{REMOTE_ADDR} >> as a
string. What if the PSGI spec required it to be an instance of Net::IP?
Backend code would have to depend on the Net::IP module, or have to
write a mock object that implements ALL of Net::IP's methods.
Backends depending on specific modules or having to reinvent lots
of stuff is considered harmful and that's why the interface is as minimal
as possible.

Making a nice API for the end users is a job that web application
frameworks (adapter developers) should do, not something PSGI needs to
define.

=head3 Why is the application a code ref rather than an object with a ->call method?

Requiring an object I<in addition to> a code ref would make EVERY
backend's code a few lines more tedious, while requiring an object
I<instead of> a code ref would make application developers write
another class and instanciate an object.

In other words, yes an object with a C<call> method could work, but
again PSGI was designed to be as simple as possible, and making a code
reference out of class/object is no brainer but the other way round
always requires a few lines of code and possibly a new file.

=head3 Why are the headers returned as an array ref and not a hash ref?

Short: In order to support multiple headers (e.g. C<Set-Cookie>).

Long: In Python WSGI, the response header is a list of (C<header_name>,
C<header_value>) I<tuples> i.e. C<type(response_headers) is ListType>
so there can be multiple entries for the same header key. In Rack and
JSGI, a header value is a String consisting of lines separated by
"C<\n>".

We liked Python's specification here, and since Perl hashes don't
allow multiple entries with the same key (unless it's C<tie>d), using
an array reference to store C<< [ key => value, key => value ] >> is
the simplest solution to keep both framework adapters and
backends simple. Other options, like allowing an array ref
in addition to a plain scalar, make either side of the code
unnecessarily tedious.

Note that I'm talking about multiple header lines with the same key,
and NOT about multiple header values (e.g. C<Accept: text/html,
text/plain, *>). Joining the header values with C<, > is obviously
the application's job. L<HTTP::Headers> does exactly that when it's
passed an array reference as a header value, for instance.

The other option is to always require the application to set a value as
an array ref, even if there is only one entry: this would make backend
code less tedious, but, for the exact reason of multiple header values
vs. multiple header lines with the same name mentioned in the paragraph
before, I think it's confusing.

=head3 No iterators support in $body?

We learned that WSGI and Rack really enjoy the benefit of Python and
Ruby's language beauty, which are iterable objects in Python or
iterators in Ruby.

Rack, for instance, expects the body as an object that responds to
the C<each> method and then yields the buffer, so

  body.each { |buf| request.write(buf) }

would just magically work whether body is an Array, FileIO object or an
object that implements iterators. Perl doesn't have such a beautiful
thing in the language unless L<autobox> is loaded.  PSGI should not make
autobox as a requirement, so we only support a simple array ref or file
handle.

Writing an IO::Handle-like object is pretty easy since it's only
C<getline> and C<close>. You can also use PerlIO to write an object that
behaves like a filehandle, though it might be considered a little
unstable.

See also L<IO::Handle::Util> to turn anything iterators-like into
IO::Handle-like.

=head3 How should server determine to switch to sendfile(2) based serving?

First of all, an application SHOULD always set a IO::Handle-like
object (or an array of chunks) that responds to C<getline> and
C<close> as a body. That is guaranteed to work with any servers.

Optionally, if the server is written in perl or can tell a file
descriptor number to the C-land to serve the file, then the server MAY
check if the body is a real filehandle (possibly using
L<Plack::Util>'s C<is_real_fh> function), then get a file descriptor
with C<fileno> and call sendfile(2) or equivalent zero-copy data
transfer using that.

Otherwise, if the server can't send a file using the file descriptor
but needs a local file path (like mod_perl or nginx), the application
can return an IO::Handle-like object that also responds to C<path>
method. This type of IO-like object can easily be created using
L<IO::File::WithPath>, L<IO::Handle::Util> or L<Plack::Util>'s
C<set_io_path> function.

Middlewares can also look to see if the body has C<path> method and
does something interesting with it, like setting C<X-Sendfile>
headers.

To summarize:

=over 4

=item *

When to serve static files, applications should always return a real
filehandle or IO::Handle object. That should work everywhere, and can
be optimized in some environments.

=item *

Applications can also set IO::Handle like object with an additional
C<path> method, then it should work everywhere again, and can be
optimized in even more environments.

=back

=head3 What if I want to stream content or do a long-poll Comet?

The most straightforward way to implement server push is for your
application to return a IO::Handle-like object as a content body that
implements C<getline> to return pushed content. This is guaranteed to
work everywhere, but it's more like I<pull> than I<push>, and it's
hard to do non-blocking I/O unless you use Coro.

If you want to do server push, where your application runs in an event
loop and push content body to the client as it's ready, you should
first check if the server supports the delayed response, by looking at
C<psgi.streaming> env hash, and then return a callback to delay the
response.

  # long-poll comet like a chat application
  my $app = sub {
      my $env = shift;
      unless ($env->{'psgi.streaming'}) {
          die "This application needs psgi.streaming support";
      }
      return sub {
          my $respond = shift;
          wait_for_new_message(sub {
              my $message = shift;
              my $body = [ $message->to_json ];
              $respond->([200, ['Content-Type', 'application/json'], $body]);
          });
      };
  };

C<wait_for_new_message> can be blocking or non-blocking: it's up to
you. Most of the case you want to run it non-blockingly and should use
event loops like L<AnyEvent>. You're suggested to check
C<psgi.nonblocking> value to see that it's possible.

Also, to stream the content body (like streaming messages over the
Flash socket or multipart XMLHTTPRequest):

  my $app = sub {
      my $env = shift;
      unless ($env->{'psgi.streaming'}) {
          die "This application needs psgi.streaming support";
      }
      return sub {
          my $respond = shift;
          my $writer = $respond->([200, ['Content-Type', 'text/plain']]);
          wait_for_new_message(sub {
              my $message = shift;
              if ($message) {
                  $writer->poll_cb(sub {
                      $_[0]->write($message->to_json);
                  });
              } else {
                  $writer->close;
              }
          });
      };
  };

C<poll_cb> pushes the callback to the buffer to write your content
whenever a client is ready to receive the content. You can just use
C<write> instead of C<poll_cb> but that might cause a problem if you
stream a massive streaming content against a slow HTTP client.

=head3 Which framework should I use to do streaming though?

We have servers that support non-blocking (where C<psgi.nonblocking>
is set to true), but the problem is that framework side doesn't
necessary support streaming. For instance Catalyst has C<write> method
on the response object:

  while ($cond) {
      $c->res->write($some_stuff);
  }

But it obviously blocks in the application unless you run your
application in multithread (or Coro) environments.
L<Catalyst::Engine::PSGI> also supports setting an IO::Handle-like
object that supports C<getline>, so using L<IO::Handle::Util>

  my $io = io_from_getline sub {
       return $data; # or undef when done()
  };
  $c->res->body($io);

And that works fine to do streaming, but it's blocking (I<pull>)
rather than server push, so you should be careful not to run this
application on non-blocking (and non-multiprocess) server
environments.

We expect that more web frameworks will appear that is focused on, or
existent frameworks will add support for, asynchronous and
non-blocking streaming interface.

=head3 Why CGI-style environment variables instead of HTTP headers as a hash?

Most existing web application frameworks already have code or a handler
to run under the CGI environment. Using CGI-style hash keys instead of
HTTP headers makes it trivial for the framework developers to implement
an adapter to support PSGI. For instance, L<Catalyst::Engine::PSGI> is
only a few dozens lines different from L<Catalyst::Engine::CGI> and was
written in less than an hour.

=head3 Why is PATH_INFO URI decoded?

To be compatible with CGI spec (RFC 3875) and most web servers'
implementations (like Apache and lighttpd).

I understand it could be inconvenient that you can't distinguish
C<foo%2fbar> from C<foo/bar> in the trailing path, but the CGI spec
clearly says C<PATH_INFO> should be decoded by servers, and that web
servers can deny such requests containing C<%2f> (since such requests
would lose information in PATH_INFO). Leaving those reserved characters
undecoded (partial decoding) would make things worse, since then you
can't tell C<foo%2fbar> from C<foo%252fbar> and could be a security hole
with double encoding or decoding.

For web application frameworks that need more control over the actual
raw URI (such as L<Catalyst>), we made the C<REQUEST_URI> environment
hash key REQUIRED. The servers should set the undecoded (unparsed)
original URI (containing the query string) to this key. Note that
C<REQUEST_URI> is completely raw even if the encoded entities are
URI-safe.

For comparison, WSGI (PEP-333) defines both C<SCRIPT_NAME> and
C<PATH_INFO> be decoded and Rack leaves it implementation dependent,
while I<fixing> most of PATH_INFO left encoded in Ruby web server
implementations.

L<http://www.python.org/dev/peps/pep-0333/#url-reconstruction>
L<http://groups.google.com/group/rack-devel/browse_thread/thread/ddf4622e69bea53f>

=head1 SEE ALSO

WSGI's FAQ clearly answers lots of questions about how some API design
decisions were made, some of which can directly apply to PSGI.

L<http://www.python.org/dev/peps/pep-0333/#questions-and-answers>

=head1 MORE QUESTIONS?

If you have a question that is not answered here, or things you totally
disagree with, come join the IRC channel #plack on irc.perl.org or
mailing list L<http://groups.google.com/group/psgi-plack>. Be sure you
clarify which hat you're wearing: application developers, server
implementors or middleware developers. And don't criticize the spec just
to criticize it: show your exact code that doesn't work or get too messy
because of spec restrictions etc. We'll ignore all nitpicks and bikeshed
discussion.

=head1 AUTHOR

Tatsuhiko Miyagawa E<lt>miyagawa@bulknews.netE<gt>

=head1 COPYRIGHT AND LICENSE

=cut

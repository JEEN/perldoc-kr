=head1 NAME

Catalyst::Manual::Internals - Catalyst Internals

=head1 DESCRIPTION

This document provides a brief overview of the internals of
Catalyst.  As Catalyst is still developing rapidly, details
may become out of date: please treat this as a guide, and
look at the source for the last word.

The coverage is split into initialization and request lifecycle.

=head2 Initialization

Catalyst initializes itself in two stages:

=over 4

=item 1

When the Catalyst module is imported in the main application
module, it stores any options.


=item 2

When C<< __PACKAGE__->setup >> is called, it evaluates any
options stored (C<-Debug>, C<-Engine=XXX>), and makes the application
inherit from L<Catalyst> (if that hasn't already been done with an
explicit C<< use base 'Catalyst'; >> or C<< extends 'Catalyst'; >>.
Any specified plugins are then loaded, the application module is made to
inherit from the plugin classes. It also sets up a default log
object and ensures that the application module inherits from
C<Catalyst> and from the selected specialized Engine module.

=item 3

Catalyst automatically loads all
components it finds in the C<$class::Controller>, C<$class::C>,
C<$class::Model>, C<$class::M>, C<$class::View> and C<$class::V>
namespaces (using C<Module::Pluggable>). As each is loaded, if it has a
L<Catalyst::Component/COMPONENT|COMPONENT> method then this method
will be called, and passed that component's configuration. It then returns
an instance of the component, which becomes the C<$self> when methods in
that component are called later.

=item 4

Each controller has it's C<register_actions> method called. At this point,
the subroutine attributes are retrieved from the
L<MooseX::MethodAttributes::Role::Meta::Map|metaclass>, parsed, and used to
build instances of L<Catalyst::Action>, which are then registered with
the dispatcher.

=back

=head2 Request Lifecycle

For each request Catalyst builds a I<context> object, which includes
information about the request, and then searches the action table for matching
actions.

The handling of a request can be divided into three stages: preparation of the
context, processing of the request, and finalization of the response.  These
are the steps of a Catalyst request in detail; every step can be overloaded to
extend Catalyst.

    handle_request
      prepare
        prepare_request
        prepare_connection
        prepare_query_parameters
        prepare_headers
        prepare_cookies
        prepare_path
        prepare_body (unless parse_on_demand)
          prepare_body_parameters
          prepare_parameters
          prepare_uploads
        prepare_action
      dispatch
      finalize
        finalize_uploads
        finalize_error (if one happened)
        finalize_headers
          finalize_cookies
        finalize_body

These steps are normally overloaded from engine classes, and may also be
extended by plugins. For more on extending Catalyst, see L<Catalyst::Manual::ExtendingCatalyst>.

The specialized engine classes populate the Catalyst request object with
information from the underlying layer (C<Apache::Request> or C<CGI::Simple>)
during the prepare phase, then push the generated response information down to
the underlying layer during the finalize phase.

=head1 AUTHORS

Catalyst Contributors, see Catalyst.pm

=head1 COPYRIGHT

This library is free software. You can redistribute it and/or modify it under
the same terms as Perl itself.

=cut


=encoding utf-8

=head1 NAME

=begin original

perllol - Manipulating Arrays of Arrays in Perl

=end original

perllol - Perl 로 배열의 배열을 조작하기 

=head1 DESCRIPTION

=head2 Declaration and Access of Arrays of Arrays

(배열의 배열의 정의와 접근)

구성하기가 가장 간단한 것은, 배열의 배열(정확하지 않게, 리스트의 리스트라고도
불리기도 합니다)입니다.
이것은 이해하기 쉽고, 그리고 보다 복잡한 데이터구조에 대해서도
적용할 수 있는 것입니다.


배열의 배열은, 당신이 원하면, 일반적인 낡은 배열 @AoA같은 겁니다.
이것은 C<$LoL[3][2]> 처럼, 두개의 첨자로 요소를 획득할 수 있습니다.
배열의 선언의 예를 들어 보겠습니다.

    # 배열의 배열로의 참조의 배열을 대입한다. 
    @AoA = (
	   [ "fred", "barney" ],
	   [ "george", "jane", "elroy" ],
	   [ "homer", "marge", "bart" ],
    );

    print $AoA[2][2];
  bart

이 때, 바깥쪽의 괄호가 둥근괄호였던 것에 주의해야합니다.
이것은 위의 예제에서는 @배열에 대입하기에, 둥근괄호를 사용할 필요가 있었기
때문입니다. 만약 @AoA가 아니라, 단순히 리퍼런스를 대입하고 싶었다고 한다면,
다음처럼 쓸 수도 있습니다.

    # 배열의 참조의 배열에 대한 참조를 대입 
    $ref_to_AoA = [
	[ "fred", "barney", "pebbles", "bambam", "dino", ],
	[ "homer", "bart", "marge", "maggie", ],
	[ "george", "jane", "elroy", "judy", ],
    ];

    print $ref_to_AoA->[2][2];

바깥쪽의 괄호가 변한 것과, 접근의 구문이 변한 것에 주목해 주세요.
이것은 C와는 달리, Perl에서는 배열과 참조를 자유롭게 교환할 수 없기 때문입니다.
$ref_to_AoA는 배열의 참조입니다.
그 배ㄹ은 @AoA로, 이것이 또 배열입니다.
이처럼, C<$AoA[2]>는 배열이 아닌 배열의 참조입니다.
그렇기에,

    $AoA[2][2]
    $ref_to_AoA->[2][2]

이것은, 아래처럼 써도 같은 것이 됩니다.

    $AoA[2]->[2]
    $ref_to_AoA->[2]->[2]

이 규칙은 이웃한 괄호(그것이 대괄호든 중괄호든)만의 것이기에,
참조를 나오면 화살표를 자유롭게 생략할 수 있습니다.
하지만, 제일 첫번째 있는 화살표만은, 그것이 리퍼런스를 가지고 있는
스칼라이기 때문에 생략할 수 는 없습니다.
이것은 $ref_to_AoA가 항상 필요한 것입니다.

=head2 Growing Your Own

(크게 하기)

고정적인 데이터 구조의 선언은 좋지만, 그 곳에서 새로운 요소를 
추가하고 싶을 때, 혹은 완전히 0 에서 시작하고 싶을 때는 어떻게 할까요?

우선 처음으로, 파일에서 읽어들이는 것을 보도록 하죠.
이것은 한번에 하나의 행을 추가해가는 것입니다.
우리는 여기에서, 읽어들이는 파일이, 한줄(line)이 한줄(row)에 대응해서,
각 단어가 요소에 대응하고 있는 파일이라고 가정합니다.
만약 배열 @AoA에 그 같은 것을 설정하려고 하면,
그것은 아래같은 방법이 됩니다.

    while (<>) {
	@tmp = split;
	push @AoA, [ @tmp ];
    }

함수를 사용해 읽어들이는 것도 가능합니다.

    for $i ( 1 .. 10 ) {
	$AoA[$i] = [ somefunc($i) ];
    }

혹은, 배열에 설정하기 위해 사용하는 임시변수를 사용할 수도 있습니다.

    for $i ( 1 .. 10 ) {
	@tmp = somefunc($i);
	$AoA[$i] = [ @tmp ];
    }

배열의 참조의 생성자인 C<[]> 를 사용하는 것은 꽤 중요합니다.
다음과 같이 쓰는 것은 매우 좋지 않은 방법입니다.

    $AoA[$i] = @tmp;

이처럼, 스칼라에 대한 이름붙은 배열의 대입에서는, @tmp에 있는 요소의 수를
세고, 그 수를 대입합니다. 그리고 이것은 아마도 생각하신 것은 아닐겁니다.

C<use strict>를 쓰고 실행한다면, 아래같은 선언을 추가하는 것도 좋습니다.

    use strict;
    my(@AoA, @tmp);
    while (<>) {
	@tmp = split;
	push @AoA, [ @tmp ];
    }

물론 일시적인 배열도 없으면 안될 것은 아닙니다.

    while (<>) {
	push @AoA, [ split ];
    }

또, push() 를 사용하지 않아도 됩니다.
어디에 담고싶은 가 하느 것을 알고 있다면, 직접대입하는 것도 가능합니다.

    my (@AoA, $i, $line);
    for $i ( 0 .. 10 ) {
	$line = <>;
	$AoA[$i] = [ split ' ', $line ];
    }

혹은 이처럼 쓸 수도 있습니다.

    my (@AoA, $i);
    for $i ( 0 .. 10 ) {
	$AoA[$i] = [ split ' ', <> ];
    }

진정 그렇게 하고 싶을 때를 빼고, 스칼라컨텍스트에서 리스트를 반환할 지도 모르는
함수를 사용해버릴 가능성에 주의해야합니다.
이것은 보통 읽는 사람에게는 명확할겁니다.

    my (@AoA, $i);
    for $i ( 0 .. 10 ) {
	$AoA[$i] = [ split ' ', scalar(<>) ];
    }

배열의 리퍼런스로 변수 $ref_to_AoA를 사용하고 싶다면,
아래처럼 할 필요가 있을 겁니다.

    while (<>) {
	push @$ref_to_AoA, [ split ];
    }

이것으로 새로운 줄을 추가할 수가 있습니다.
새로운 칼럼을 추가하는 것은?
당신이 행렬을 다루는 것이라면, 대개는 단순한 대입이 됩니다.

    for $x (1 .. 10) {
	for $y (1 .. 10) {
	    $AoA[$x][$y] = func($x, $y);
	}
    }

    for $x ( 3, 7, 9 ) {
	$AoA[$x][20] += func2($x);
    }

이것은 대상이 되는 요소가 이미 존재하고 있는가 어떤가에는 영향을 받지않습니다.
(없는 경우라도) 기뻐하며 당신을 위해 그 요소를 만들어내, 필요에 따라서
사에이 있는 요소에 C<undef>를 정의합니다.

당신은, 그냥 행에 추가하고 싶은 것일뿐일 경우에도,
조금 이상하게 보이는 것을 하지않으면 안될 것입니다.

    # 새로운 칼럼을 이미 있는 행에 추가한다. 
    push @{ $AoA[0] }, "wilma", "betty";

다음같이는 B<쓸 수 없는> 것에 주의해주세요.

    push $AoA[0], "wilma", "betty";  # 間違い!

사실, 이것은 컴파일도 되지 않습니다.
왜일까요?
그것은 push()의 인수는 참조가 아닌, 실제의 배열이 아니면 안되기 때문입니다.

=head2 Access and Printing

(접근과 표시)

이제는 이 데이터 구조를 출력할 차례입니다.
어떻게 하려고 생각하시나요?
그렇습니다. 간단하게 요소를 하나만 출력하고 싶다면 이렇게 됩니다.

    print $AoA[0][0];

배열의 배용전부를 출력하고 싶을 때, 다음처럼 쓸 수 없습니다.

    print @AoA;		# 안됩니다!

왜냐면, 이것에서는 단순히 리스트로의 리퍼런스가 얻어질 뿐이고,
perl은 그것을 자동적으로 참조를 벗겨내는 것은 하지 않기때문입니다.
이 때문에, 당신은 자기자신으로 루프하지 않으면 안됩니다.
이것은 바깥쪽의 첨자에 대한 루프로 셸스타일의 for()를 사용해서
구조전체를 출력합니다.

    for $aref ( @AoA ) {
	print "\t [ @$aref ],\n";
    }

첨자를 기록하고 싶다면, 이렇게 할 수 있습니다.

    for $i ( 0 .. $#AoA ) {
	print "\t elt $i is [ @{$AoA[$i]} ],\n";
    }

혹은 이런 방법도 있습니다. 안쪽의 루프에 주목해주세요.

    for $i ( 0 .. $#AoA ) {
	for $j ( 0 .. $#{$AoA[$i]} ) {
	    print "elt $i $j is $AoA[$i][$j]\n";
	}
    }

보면 알 수 있는 것처럼 이것은 조금 복잡하지만, 도중에 임시변수를 사용하면
간단합니다.

    for $i ( 0 .. $#AoA ) {
	$aref = $AoA[$i];
	for $j ( 0 .. $#{$aref} ) {
	    print "elt $i $j is $AoA[$i][$j]\n";
	}
    }

으음, 아직 좀 보기 어렵나요?
이것은 어떨까요:

    for $i ( 0 .. $#AoA ) {
	$aref = $AoA[$i];
	$n = @$aref - 1;
	for $j ( 0 .. $n ) {
	    print "elt $i $j is $AoA[$i][$j]\n";
	}
    }

=head2 Slices

(슬라이스)

다차원배열의 슬라이스(행부분)을 얻고싶다면, facny subscripting를 할 필요가
있을 겁니다. 이것은 참조를 벗기기위한 pointer arrow를 사용한 단일의 요소에 대한
것은 있지만, 그것에 대응하는 슬라이스용의 편리한 것은 아닙니다.
(물론, 슬라이스 조작을 하기 위해 루프를 쓰는 것은 항상 가능하다고 하는 것을
잊지 않도록 해주세요).

아래는, 루프를 사용한 하나의 조작을 어떻게 수행하는 가 하는 예제입니다.
변수 @AoA가 앞의 것과 같은 것이라고 가정하고 있습니다.

    @part = ();
    $x = 4;
    for ($y = 7; $y < 13; $y++) {
	push @part, $AoA[$x][$y];
    }

이 루프를 슬라이스 연산으로 바꿔넣을 수 있습니다.

    @part = @{ $AoA[4] } [ 7..12 ];

보고 느끼실지 모르겠지만, 이것은 읽는 사람에게는 불친절합니다.

뭐, 그래도 $x를 4..8, $y를 7에서 12라고 하는 것은 B<이차원 슬라이스>를
필요로할 때에는?
음, 단순한 방법은 이것일 겁니다.

    @newAoA = ();
    for ($startx = $x = 4; $x <= 8; $x++) {
	for ($starty = $y = 7; $y <= 12; $y++) {
	    $newAoA[$x - $startx][$y - $starty] = $AoA[$x][$y];
	}
    }

슬라이스를 사용해 루프를 간단하게 할 수 있습니다.

    for ($x = 4; $x <= 8; $x++) {
	push @newAoA, [ @{ $AoA[$x] } [ 7..12 ] ];
    }

당신이 슈왈츠변환에 흥미를 가지고 있다면,
map을 사용해 다음과 같은 방법을 선택할지도 모르겠습니다.

    @newAoA = map { [ @{ $AoA[$_] } [ 7..12 ] ] } 4 .. 8;

당신의 상사가 이해할 수 없는 코드에 의해 잡 시큐리티(혹은 rapid
insecurity)의 추구를 비난하고 있다고 해도, 설득하는 것은 어렵겠죠? :-)
만약 제가 당신의 입장이라면, 이런 조작은 함수에 넣겠습니다.

    @newAoA = splice_2D( \@AoA, 4 => 8, 7 => 12 );
    sub splice_2D {
	my $lrr = shift;  # 리퍼런스의 리스트의 리스트의 리퍼런스
	my ($x_lo, $x_hi,
	    $y_lo, $y_hi) = @_;

	return map {
	    [ @{ $lrr->[$_] } [ $y_lo .. $y_hi ] ]
	} $x_lo .. $x_hi;
    }

=head1 SEE ALSO

perldata(1), perlref(1), perldsc(1)

=head1 AUTHOR

Tom Christiansen <F<tchrist@perl.com>>

Last update: Thu Jun  4 16:16:23 MDT 1998

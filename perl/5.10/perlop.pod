
=encoding utf8

=head1 NAME
X<operator>

=begin original

perlop - Perl operators and precedence

=end original

perlop - Perl“ÀÇ “¿¬“»ê“ÀÚ“¿Í “¿ì“¼±“¼ø“À§

=head1 DESCRIPTION

=head2 Operator Precedence and Associativity
X<operator, precedence> X<precedence> X<associativity>

(“¿¬“»ê“ÀÚ“ÀÇ “¿ì“¼±“¼ø“À§“¿Í “°á“ÇÕ“¼º)

=begin original

Operator precedence and associativity work in Perl more or less like
they do in mathematics.

=end original

Perl “¿¡“¼­“ÀÇ “¿¬“»ê“ÀÚ“ÀÇ “¿ì“¼±“¼ø“À§“¿Í “°á“ÇÕ“¼º“Àº “Àû“ÀÝ“Àº “ºÎ“ºÐ“¿¡“¼­ “¼ö“ÇÐ“°ú “ºñ“½Á“ÇÕ“´Ï“´Ù.

=begin original

I<Operator precedence> means some operators are evaluated before
others.  For example, in C<2 + 4 * 5>, the multiplication has higher
precedence so C<4 * 5> is evaluated first yielding C<2 + 20 ==
22> and not C<6 * 5 == 30>.

=end original

I<“¿¬“»ê“ÀÚ“¿Í “¿ì“¼±“¼ø“À§> “¶ó“´Â “°Í“Àº “´Ù“¸¥ “¿¬“»ê“ÀÚ“º¸“´Ù 
“¸Õ“Àú “Æò“°¡“¹Þ“´Â “¿¬“»ê“ÀÚ“°¡ “ÀÖ“´Ù“´Â “°Í“ÀÔ“´Ï“´Ù.
“¿¹“¸¦“µé“¸é, C<2 + 4 * 5>“ÀÇ “°æ“¿ì “°ö“¼À“ÀÌ “³ô“Àº “¿ì“¼±“¼ø“À§“¸¦ “°¡“Áö“°í“ÀÖ“±â “¶§“¹®“¿¡
C<4 * 5>“ÀÌ “¸Õ“Àú “Æò“°¡“¹Þ“°í “°á“°ú“´Â C<6 * 5 == 30> “ÀÌ “¾Æ“´Ñ
C<2 + 20 == 22> “ÀÌ “µË“´Ï“´Ù.

=begin original

I<Operator associativity> defines what happens if a sequence of the
same operators is used one after another: whether the evaluator will
evaluate the left operations first or the right.  For example, in C<8
- 4 - 2>, subtraction is left associative so Perl evaluates the
expression left to right.  C<8 - 4> is evaluated first making the
expression C<4 - 2 == 2> and not C<8 - 2 == 6>.

=end original

I<“¿¬“»ê“ÀÚ“ÀÇ “°á“ÇÕ“¼º> “Àº “°°“Àº “¿¬“»ê“ÀÚ“°¡ “¿¬“¼Ó“ÇØ“¼­ “³ª“Å¸“³¯ “°æ“¿ì“¿¡ 
“¹«“¾ù“ÀÌ “ÀÏ“¾î“³¯“Áö“¸¦ “Á¤“ÀÇ“ÇÕ“´Ï“´Ù. 
: “¿¬“»ê“±â“°¡ “ÁÂ“Ãø“À» “¸Õ“Àú “Æò“°¡“ÇÒ “°Í“ÀÎ“°¡ “¿ì“Ãø“À» “¸Õ“Àú “Æò“°¡“ÇÒ “°Í“ÀÎ“°¡ “ÇÏ“´Â “°Í“ÀÔ“´Ï“´Ù.
“¿¹“¸¦“µé“¸é, C<8 - 4 - 2>“ÀÇ “°æ“¿ì “»©“±â“´Â “¿Þ“ÂÊ“°á“ÇÕ“ÀÌ“±â“¿¡ 
“ÆÞ“Àº “°è“»ê“½Ä“À» “¿Þ“ÂÊ“¿¡“¼­ “¿À“¸¥“ÂÊ“À¸“·Î “Æò“°¡“ÇÕ“´Ï“´Ù.
C<8 - 4>“ÀÌ “¸Õ“Àú “Æò“°¡“µÇ“±â“¶§“¹®“¿¡ C<8 - 2 = 6>“ÀÌ “¾Æ“´Ñ
C<4 - 2 == 2> “ÀÌ “µË“´Ï“´Ù.

=begin original

Perl operators have the following associativity and precedence,
listed from highest precedence to lowest.  Operators borrowed from
C keep the same precedence relationship with each other, even where
C's precedence is slightly screwy.  (This makes learning Perl easier
for C folks.)  With very few exceptions, these all operate on scalar
values only, not array values.

=end original

Perl “ÀÇ “¿¬“»ê“ÀÚ“¿¡“´Â “¾Æ“·¡“¿Í“°°“Àº “°á“ÇÕ“¼º“°ú “¿ì“¼±“¼ø“À§
(“³ô“Àº “¿ì“¼±“¼ø“À§“ºÎ“ÅÍ “³·“Àº “¿ì“¼±“¼ø“À§)“°¡ “ÀÖ“½À“´Ï“´Ù.
C “·Î“ºÎ“ÅÍ “°¡“Á®“¿Â “¿¬“»ê“ÀÚ“ÀÇ “¿ì“¼±“¼ø“À§“´Â C “¿¡“¼­“ÀÇ “¿ì“¼±“¼ø“À§“°¡ “´Ù“¼Ò “ÀÌ“»ó“ÇØ“µµ, 
“±×“´ë“·Î “Â÷“¿ë“ÇÏ“°í “ÀÖ“½À“´Ï“´Ù.
(“ÀÌ“°Í“Àº C “¸¦ “»ç“¿ë“ÇØ“º¸“½Å “ºÐ“ÀÌ Perl “¿¡ “Àû“ÀÀ“ÇÏ“±â “½±“°Ô “µÇ“¾î“ÀÖ“½À“´Ï“´Ù.)
“¸î “¾È“µÇ“´Â “°Í“À» “»©“¸é “¸ð“µç “¿¬“»ê“ÀÚ“´Â “½º“Ä®“¶ó“°ª“¸¸ “°¡“Áö“°í, “¹è“¿­“°ª“À» “°¡“Áö“Áö “¾Ê“½À“´Ï“´Ù.

=begin original

    left	terms and list operators (leftward)
    left	->
    nonassoc	++ --
    right	**
    right	! ~ \ and unary + and -
    left	=~ !~
    left	* / % x
    left	+ - .
    left	<< >>
    nonassoc	named unary operators
    nonassoc	< > <= >= lt gt le ge
    nonassoc	== != <=> eq ne cmp ~~
    left	&
    left	| ^
    left	&&
    left	|| //
    nonassoc	..  ...
    right	?:
    right	= += -= *= etc.
    left	, =>
    nonassoc	list operators (rightward)
    right	not
    left	and
    left	or xor

=end original

    “¿Þ“ÂÊ“°á“ÇÕ    “Ç×“¸ñ “¸®“½º“Æ®“¿¬“»ê“ÀÚ (“¿Þ“ÂÊ“¿¡ “´ë“ÇØ“¼­) 
    “¿Þ“ÂÊ“°á“ÇÕ    ->
    “°á“ÇÕ“¾È“ÇÔ“¡¡“¡¡++ --
    “¿À“¸¥“ÂÊ“°á“ÇÕ  **
    “¿À“¸¥“ÂÊ“°á“ÇÕ  ! ~ \ “´Ü“Ç×“ÀÇ+ “´Ü“Ç×“ÀÇ-
    “¿Þ“ÂÊ“°á“ÇÕ    =~ !~
    “¿Þ“ÂÊ“°á“ÇÕ    * / % x
    “¿Þ“ÂÊ“°á“ÇÕ    + - .
    “¿Þ“ÂÊ“°á“ÇÕ    << >>
    “°á“ÇÕ“¾È“ÇÔ    “ÀÌ“¸§“ºÙ“Àº“´Ü“Ç×“¿¬“»ê“ÀÚ
    “°á“ÇÕ“¾È“ÇÔ    < > <= >= lt gt le ge
    “°á“ÇÕ“¾È“ÇÔ    == != <=> eq ne cmp ~~
    “¿Þ“ÂÊ“°á“ÇÕ    &
    “¿Þ“ÂÊ“°á“ÇÕ    | ^
    “¿Þ“ÂÊ“°á“ÇÕ    &&
    “¿Þ“ÂÊ“°á“ÇÕ    || //
    “°á“ÇÕ“¾È“ÇÔ    .. ...
    “¿À“¸¥“ÂÊ“°á“ÇÕ  ?:
    “¿À“¸¥“ÂÊ“°á“ÇÕ  = += -= *= “µî“ÀÇ “´ë“ÀÔ“¿¬“»ê“ÀÚ
    “¿Þ“ÂÊ“°á“ÇÕ    , =>
    “°á“ÇÕ“¾È“ÇÔ    “¸®“½º“Æ® “¿¬“»ê“ÀÚ (“¿À“¸¥“ÂÊ“¿¡ “´ë“ÇØ“¼­)
    “¿À“¸¥“ÂÊ“°á“ÇÕ  not
    “¿Þ“ÂÊ“°á“ÇÕ    and
    “¿Þ“ÂÊ“°á“ÇÕ    or xor

=begin original

In the following sections, these operators are covered in precedence order.

=end original

=end original

=begin original

Many operators can be overloaded for objects.  See L<overload>.

=end original

“´ë“ºÎ“ºÐ“ÀÇ “¿¬“»ê“ÀÚ“´Â “¿À“ºê“Á§“Æ®“·Î “¿À“¹ö“·Î“µå“°¡ “°¡“´É“ÇÕ“´Ï“´Ù.
L<overload> “¸¦ “Âü“Á¶“ÇÏ“¼¼“¿ä“¡£

=head2 Terms and List Operators (Leftward)
X<list operator> X<operator, list> X<term>

(“Ç×“°ú “¸®“½º“Æ® “¿¬“»ê“ÀÚ (“¿Þ“ÂÊ “¹æ“Çâ))

=begin original

A TERM has the highest precedence in Perl.  They include variables,
quote and quote-like operators, any expression in parentheses,
and any function whose arguments are parenthesized.  Actually, there
aren't really functions in this sense, just list operators and unary
operators behaving as functions because you put parentheses around
the arguments.  These are all documented in L<perlfunc>.

=end original

“¡¸“Ç×“¡¹“Àº Perl “¿¡“¼­ “°¡“Àå “¿ì“¼±“¼ø“À§“°¡ “³ô“Àº “³à“¼®“ÀÔ“´Ï“´Ù.
“¿©“±â“¿¡“´Â “º¯“¼ö, “ÀÎ“¿ë“¿Í “ÀÎ“¿ë“°°“Àº “¿¬“»ê“ÀÚ, “°ý“È£“·Î “°¨“½Ñ “ÀÓ“ÀÇ“ÀÇ “½Ä 
“ÀÎ“¼ö“¸¦ “°ý“È£“·Î “°¨“½Ñ “ÀÓ“ÀÇ“ÀÇ “ÇÔ“¼ö“°¡ “Æ÷“ÇÔ“µË“´Ï“´Ù.
“½Ç“Á¦“·Î“´Â “ÀÌ “ÀÇ“¹Ì“·Î “Áø“Â¥ “ÇÔ“¼ö“°¡ “¾Æ“´Ñ “¸®“½º“Æ® “¿¬“»ê“ÀÚ“¿Í “ÇÔ“¼ö“°°“ÀÌ “¿ò“Á÷“ÀÌ“´Â
“´Ü“Ç×“¿¬“»ê“ÀÚ“°¡ “ÀÎ“¼ö“¸¦ “°ý“È£“·Î “°¨“½Î“±â“¶§“¹®“¿¡ “±×“·¸“°Ô “º¸“ÀÔ“´Ï“´Ù.
“ÀÌ“°Í“¿¡ “´ë“ÇØ“¼­“´Â L<perlfunc>“¿¡ “±â“¼ú“ÇÏ“°í “ÀÖ“½À“´Ï“´Ù.

=begin original

If any list operator (print(), etc.) or any unary operator (chdir(), etc.)
is followed by a left parenthesis as the next token, the operator and
arguments within parentheses are taken to be of highest precedence,
just like a normal function call.

=end original

“¸¸“¾à, “¸®“½º“Æ®“¿¬“»ê“ÀÚ(print() “µî“µî)“³ª “´Ü“Ç×“¿¬“»ê“ÀÚ (chdir() “µî“µî) “ÀÇ
“ÀÌ“¸§“ÀÇ “µÚ“¿¡ “¿­“¸°“°ý“È£('(')“°¡ “¿À“´Â “°æ“¿ì“¿¡“´Â “±× “¿¬“»ê“ÀÚ“¿Í “°ý“È£“¾È“ÀÇ “ÀÎ“¼ö“´Â
“º¸“Åë “ÇÔ“¼ö“È£“Ãâ“°°“ÀÌ “¹«“¾ù“º¸“´Ù “³ô“Àº “¿ì“¼±“¼ø“À§ “Ã³“¸®“µË“´Ï“´Ù.

=begin original

In the absence of parentheses, the precedence of list operators such as
C<print>, C<sort>, or C<chmod> is either very high or very low depending on
whether you are looking at the left side or the right side of the operator.
For example, in

=end original

“°ý“È£“°¡ “¾ø“´Â “°æ“¿ì“¿¡“´Â, C<print>, C<sort> C<chmod> “°°“Àº “¸®“½º“Æ® “¿¬“»ê“ÀÚ“ÀÇ
“¿ì“¼±“¼ø“À§“´Â, “¿¬“»ê“ÀÚ“ÀÇ “¿Þ“ÂÊ“¿¡“¼­ “ÇÏ“¸é “´ë“´Ü“È÷ “³ô“°í, 
“¿À“¸¥“ÂÊ“¿¡“¼­ “ÇÏ“¸é “´ë“´Ü“È÷ “³·“°Ô “º¸“ÀÔ“´Ï“´Ù.
“¿¹“¸¦ “µé“¸é

    @ary = (1, 3, sort 4, 2);
    print @ary;		# prints 1324

=begin original

the commas on the right of the sort are evaluated before the sort,
but the commas on the left are evaluated after.  In other words,
list operators tend to gobble up all arguments that follow, and
then act like a simple TERM with regard to the preceding expression.
Be careful with parentheses:

=end original

“À§“¿Í “°°“Àº “°æ“¿ì sort “ÀÇ “¿À“¸¥“ÂÊ “ÄÞ“¸¶“´Â sort“º¸“´Ù“µµ “¾Õ“¿¡“¼­ “Æò“°¡“µÇ“Áö“¸¸
(“¿À“¸¥“ÂÊ“¿¡“¼­ “º¸“¸é soft“ÀÇ “¿ì“¼±“¼ø“À§“±â “³·“À½), “¿Þ“ÂÊ“ÀÇ “ÄÞ“¸¶“´Â sort“ÀÇ “µÚ“¿¡
“Æò“°¡“µË“´Ï“´Ù(“¿Þ“ÂÊ“¿¡“¼­ “º¸“¸é sort “ÂÊ“ÀÌ “¿ì“¼±“¼ø“À§“°¡ “³ô“¾Æ“Áü).
“¹Ù“²ã “¸»“ÇÏ“¸é, “¸®“½º“Æ®“¿¬“»ê“ÀÚ“´Â “ÀÚ“½Å“ÀÇ “µÚ“¿¡ “¿À“´Â “ÀÎ“¼ö“¸¦ 
“¸ð“µÎ “»ç“¿ë“ÇØ “Ã³“¸®“¸¦ “ÇÏ“Áö“¾Ê“°í,
“±× “°á“°ú“¸¦ “ÀÚ“½Å“ÀÇ “¾Õ“ÀÇ “½Ä“¿¡ “´ë“ÇÑ "“Ç×"“ÀÎ“°Í “Ã³“·³ “º¸“ÀÌ“°Ô “ÇÏ“´Â “°Í“ÀÔ“´Ï“´Ù.
“¹°“·Ð, “°ý“È£“¿¡“´Â “ÁÖ“ÀÇ“ÇØ “ÁÖ“¼¼“¿ä.

=begin original

    # These evaluate exit before doing the print:
    print($foo, exit);	# Obviously not what you want.
    print $foo, exit;	# Nor is this.

=end original

    # “´Ù“À½“Àº print “¸¦ “½Ç“Çà“ÇÏ“±â “Àü“¿¡ exit “¸¦ “Æò“°¡“ÇÕ“´Ï“´Ù.
    print($foo, exit);  # “ÀÌ“·± “Áþ“Àº “ÇÏ“°í “½Í“Áö “¾Ê“°Ú“ÁÒ?
    print $foo, exit;   # “ÀÌ“°Í“µµ “¾Æ“´Ï“°Ú“°í

=begin original

    # These do the print before evaluating exit:
    (print $foo), exit;	# This is what you want.
    print($foo), exit;	# Or this.
    print ($foo), exit;	# Or even this.

=end original

    # “´Ù“À½“Àº exit “¸¦ “Æò“°¡“ÇÏ“±â “Àü“¿¡ print“¸¦ “½Ç“Çà“ÇÕ“´Ï“´Ù.
    (print $foo), exit; # “ÀÌ“·± “°Í“À» “ÇÏ“·Á“°í “ÇÏ“¼Ì“ÁÒ?
    print($foo), exit;  # “¾Æ“´Ô “ÀÌ“°Å?“¡£
    print ($foo), exit; # “ÀÌ“°Í“µµ OK“¡£

=begin original

Also note that

=end original

“¶Ç“ÇÑ,

    print ($foo & 255) + 1, "\n";

=begin original

probably doesn't do what you expect at first glance.  The parentheses
enclose the argument list for C<print> which is evaluated (printing
the result of C<$foo & 255>).  Then one is added to the return value
of C<print> (usually 1).  The result is something like this:

=end original

“ÀÇ “µ¿“ÀÛ“À» “ÇÑ “¹ø “º¸“´Â “°Í“¸¸“À¸“·Î “ÆÇ“´Ü“ÇÏ“´Â “°Í“Àº “¾î“·Æ“°Ú“ÁÒ?
“°ý“È£“´Â C<print> “¸¦ “À§“ÇØ “Æò“°¡“µÇ“´Â “ÀÎ“¼ö“¸®“½º“Æ®“¸¦ “°¨“½Î“°í “ÀÖ“½À“´Ï“´Ù.
(C<$foo & 255> “¶ó“´Â “°á“°ú“°¡ “Ç¥“½Ã“µË“´Ï“´Ù)“¡£
“±×“¸®“°í C<print> “ÀÇ “¸®“ÅÏ“°ª(“º¸“Åë“Àº 1)“¿¡ 1“ÀÌ “´õ“ÇØ“Áý“´Ï“´Ù. 
“°á“°ú“´Â “¾Æ“·¡“¿Í “°°“½À“´Ï“´Ù.

    1 + 1, "\n";    # Obviously not what you meant.

=begin original

To do what you meant properly, you must write:

=end original

“ÀÚ“½Å“ÀÇ “¿ø“Çß“´ø “°Í“À» “Àû“Àý“È÷ “½Ç“Çà“ÇÏ“±â “À§“ÇØ“¼­“´Â “¾Æ“·¡“¿Í “°°“ÀÌ“½á“¾ß“µË“´Ï“´Ù.

    print(($foo & 255) + 1, "\n");

=begin original

See L<Named Unary Operators> for more discussion of this.

=end original

“ÀÚ“¼¼“ÇÑ “³»“¿ë“Àº L<Named Unary Operators> “À» “Âü“Á¶“ÇØ“ÁÖ“¼¼“¿ä.

=begin original

Also parsed as terms are the C<do {}> and C<eval {}> constructs, as
well as subroutine and method calls, and the anonymous
constructors C<[]> and C<{}>.

=end original

“ÀÌ “¿Ü“¿¡“´Â "“Ç×"“À¸“·Î “ÇØ“¼®“µÇ“´Â “°Í“À¸“·Î“´Â C<do {}>“³ª C<eval {}>“ÀÇ “±¸“¼º
“¼­“ºê“·ç“Æ¾“ÀÌ“³ª “¸Þ“¼Ò“µå“ÀÇ “È£“Ãâ, “ÀÌ“¸§“¾ø“´Â “±¸“Á¶“ÀÎ C<[]>“¿Í C<{}>“°¡ “ÀÖ“½À“´Ï“´Ù.

=begin original

See also L<Quote and Quote-like Operators> toward the end of this section,
as well as L</"I/O Operators">.

=end original

“µÚ“ÀÇ L<Quote and Quote-like Operators>“¿Í L<"/I/O Operators">“µµ “Âü“Á¶“ÇÏ“¼¼“¿ä.

=head2 The Arrow Operator
X<arrow> X<dereference> X<< -> >>

(“È­“»ì“Ç¥ “¿¬“»ê“ÀÚ)

=begin original

"C<< -> >>" is an infix dereference operator, just as it is in C
and C++.  If the right side is either a C<[...]>, C<{...}>, or a
C<(...)> subscript, then the left side must be either a hard or
symbolic reference to an array, a hash, or a subroutine respectively.
(Or technically speaking, a location capable of holding a hard
reference, if it's an array or hash reference being used for
assignment.)  See L<perlreftut> and L<perlref>.

=end original

C “¿Í C++ “°ú “¸¶“Âù“°¡“Áö“·Î, "C<< -> >>"“´Â “°¡“¿î“µ¥“¿¡ “³õ“´Â “ÇÇ“Âü“Á¶ “¿¬“»ê“ÀÚ“ÀÔ“´Ï“´Ù.
“¿À“¸¥“ÂÊ“ÀÌ C<[...]>, C<{...}>, C<(...)> “Áß “¾î“¶² “Çü“ÅÂ“ÀÇ “Ã·“ÀÚ“ÀÌ“¸é “ÁÂ“Ãø“Àº “¹è“¿­,
“ÇØ“½¬, “¼­“ºê“·ç“Æ¾“À¸“·Î “ÇÏ“µå “·¹“ÆÛ“·±“½º “¾Æ“´Ï“¸é “½É“º¼“¸¯ “·¹“ÆÛ“·±“½º (“È¤“Àº “±â“¼ú“Àû“À¸“·Î“´Â 
“¹è“¿­ “È¤“Àº “ÇÏ“µå “·¹“ÆÛ“·±“½º“°¡ “´ë“ÀÔ“°¡“´É“ÇÏ“¸é “ÇÏ“µå “·¹“ÆÛ“·±“½º“¸¦ “°¡“Áö“´Â “Àå“¼Ò) “°¡ 
“¾Æ“´Ï“¸é “¾È“µË“´Ï“´Ù.
L<perlreftut> “¿Í L<perlref> “¸¦ “Âü“Á¶“ÇÏ“¼¼“¿ä.

=begin original

Otherwise, the right side is a method name or a simple scalar
variable containing either the method name or a subroutine reference,
and the left side must be either an object (a blessed reference)
or a class name (that is, a package name).  See L<perlobj>.

=end original

“±×“·¸“Áö “¾Ê“À¸“¸é, “¿À“¸¥“ÂÊ“Àº “¸Þ“¼Ò“µå“ÀÌ“¸§“°ú “¼­“ºê“·ç“Æ¾“ÀÇ “¸®“ÆÛ“·±“½º“¸¦ 
“°¡“Áø “´Ü“¼ø “½º“Ä®“¶ó“º¯“¼ö“·Î
“¿Þ“ÂÊ“Àº “¿À“ºê“Á§“Æ® (bless “µÈ “·¹“ÆÛ“·±“½º)  “È¤“Àº “Å¬“·¡“½º “ÀÌ“¸§“ÀÌ “¾Æ“´Ï“¸é “¾È“µË“´Ï“´Ù.
L<perlobj> “¸¦ “Âü“Á¶“ÇÏ“¼¼“¿ä.

=head2 Auto-increment and Auto-decrement
X<increment> X<auto-increment> X<++> X<decrement> X<auto-decrement> X<-->

(“Áõ“°¡“¿Í “°¨“¼Ò)

=begin original

"++" and "--" work as in C.  That is, if placed before a variable,
they increment or decrement the variable by one before returning the
value, and if placed after, increment or decrement after returning the
value.

=end original

"++" “°ú "--" “´Â C“ÀÇ “°æ“¿ì“¿Í “°°“Àº “¹æ“½Ä“À¸“·Î “µ¿“ÀÛ“ÇÕ“´Ï“´Ù.
“º¯“¼ö“ÀÇ “¾Õ“¿¡ “¿Ã“¶§“¿¡“´Â “°ª“À» “¸®“ÅÏ“ÇÏ“±â “Àü“¿¡ “º¯“¼ö“¸¦ 1 “Áõ“°¡ “È¤“Àº “°¨“¼Ò“ÇÏ“°í,
“µÚ“¿¡ “¿Ã“¶§“¿¡“´Â, “°ª“À» “¸®“ÅÏ“ÇÑ “µÚ“¿¡ “º¯“¼ö“¸¦ “Áõ“°¡ “È¤“Àº “°¨“¼Ò“ÇÕ“´Ï“´Ù.

    $i = 0;  $j = 0;
    print $i++;  # prints 0
    print ++$j;  # prints 1

=begin original

Note that just as in C, Perl doesn't define B<when> the variable is
incremented or decremented. You just know it will be done sometime
before or after the value is returned. This also means that modifying
a variable twice in the same statement will lead to undefined behaviour.
Avoid statements like:

=end original

C “¿Í “¸¶“Âù“°¡“Áö“·Î, Perl“Àº B<“¾ð“Á¦> “º¯“¼ö“°¡ “Áõ“°¡ “È¤“Àº “°¨“¼Ò“µÇ“´Â “°Í“¿¡ 
“´ë“ÇØ“¼­“´Â “Á¤“ÀÇ“ÇÒ “¼ö “¾ø“½À“´Ï“´Ù.
“°ª“ÀÌ “¸®“ÅÏ“µÇ“±â “Àü/“ÈÄ“¿¡ “½Ç“Çà“µÈ“´Ù“´Â “°Í “¸¸ “¾Ë “¼ö “ÀÖ“½À“´Ï“´Ù. 
“ÀÌ“°Í“Àº “°°“Àº “°°“Àº “±¸“¹®“ÀÎ “º¯“¼ö“¸¦ 2“¹ø “¼ö“Á¤“ÇÏ“¸é, 
“½Ç“Çà “È¤“Àº “¹Ì“Á¤“ÀÇ “»ó“ÅÂ“°¡ “µÇ“´Â “°Í“À» “ÀÇ“¹Ì“ÇÕ“´Ï“´Ù.
“¾Æ“·¡“¿Í “°°“Àº “°Í“Àº “»ï“°¡“ÇØ “ÁÖ“¼¼“¿ä:

    $i = $i ++;
    print ++ $i + $i ++;

=begin original

Perl will not guarantee what the result of the above statements is.

=end original

Perl “Àº “À§“¿Í “°°“Àº “±¸“¹®“ÀÇ “°á“°ú“¸¦ “º¸“Àå“ÇÏ“Áö “¾Ê“½À“´Ï“´Ù.

=begin original

The auto-increment operator has a little extra builtin magic to it.  If
you increment a variable that is numeric, or that has ever been used in
a numeric context, you get a normal increment.  If, however, the
variable has been used in only string contexts since it was set, and
has a value that is not the empty string and matches the pattern
C</^[a-zA-Z]*[0-9]*\z/>, the increment is done as a string, preserving each
character within its range, with carry:

=end original

“Áõ“°¡“¿¬“»ê“ÀÚ“¿¡“´Â “Á¶“±Ý “ºÐ“À§“±â“°¡ “´Ù“¸¥ “±â“´É“ÀÌ “Æ÷“ÇÔ“µÇ“¾î “ÀÖ“½À“´Ï“´Ù.
“¼ý“ÀÚ“°ª“ÀÌ “µé“¾î“°£ “º¯“¼ö“³ª “¼ý“ÀÚ“°ª“ÀÇ “¹®“¸Æ“À¸“·Î “»ç“¿ë“µÈ “º¯“¼ö“¸¦ “Áõ“°¡“½Ã“Å°“´Â “°æ“¿ì“¿¡“´Â
“º¸“Åë “Áõ“°¡ “¶ó“´Â “ÀÇ“¹Ì“·Î “µ¿“ÀÛ“ÇÏ“°Ô “µË“´Ï“´Ù. 
“±×“·¯“³ª, “±× “º¯“¼ö“°¡ “Á¤“ÀÇ“µÇ“°í “°è“¼Ó “¹®“ÀÚ“¿­“ÀÇ “¹®“¸Æ“À¸“·Î“¸¸ “»ç“¿ë“µÇ“Áö “¾Ê“°í
“°ø“¹é“µµ “¾Æ“´Ñ, C</^[a-zA-Z]*[0-9]*\z/> “¿¡ “¸Å“Ä¡“µÇ“´Â “°ª“À» “°¡“Áö“°í “ÀÖ“À» “¶§“´Â 
“°¢ “¹®“ÀÚ“ÀÇ “¹ü“À§“¸¦ “º¸“È£“ÇÏ“¸é“¼­ “±Û“ÀÚ“¼ö“¸¦ “´Ã“¸®“°í, “¹®“ÀÚ“¿­“·Î“½á“ÀÇ “Áõ“°¡“¸¦ “¼ö“Çà“ÇÕ“´Ï“´Ù.
(“¸Å“Áö“ÄÃ “Áõ“°¡“¶ó“°í “ºÒ“¸³“´Ï“´Ù.)

    print ++($foo = '99');	# prints '100'
    print ++($foo = 'a0');	# prints 'a1'
    print ++($foo = 'Az');	# prints 'Ba'
    print ++($foo = 'zz');	# prints 'aaa'

=begin original

C<undef> is always treated as numeric, and in particular is changed
to C<0> before incrementing (so that a post-increment of an undef value
will return C<0> rather than C<undef>).

=end original

C<undef> “´Â “Ç×“»ó “¼ý“ÀÚ“°ª“À¸“·Î “Ãë“±Þ“µÇ“°í, “Æ¯“È÷ “Áõ“°¡“µÇ“±â“Àü“¿¡“´Â C<0>“·Î “¹Ù“²ò“´Ï“´Ù.
(“µû“¶ó“¼­, undef“ÀÇ “ÈÄ“Áõ“°¡“°ª“Àº C<undef>“°¡ “¾Æ“´Ñ C<0>“°¡ “µË“´Ï“´Ù).

=begin original

The auto-decrement operator is not magical.

=end original

“°¨“¼Ò“¿¬“»ê“ÀÚ“¿¡“´Â “¸Å“Áö“ÄÃ“ÇÑ“°Í“Àº “¾ø“½À“´Ï“´Ù. 

=head2 Exponentiation
X<**> X<exponentiation> X<power>

(“Áö“¼ö “¿¬“»ê“ÀÚ)

=begin original

Binary "**" is the exponentiation operator.  It binds even more
tightly than unary minus, so -2**4 is -(2**4), not (-2)**4. (This is
implemented using C's pow(3) function, which actually works on doubles
internally.)

=end original

“ÀÌ“Ç×“¿¬“»ê“ÀÚ“ÀÇ "**"“´Â “Áö“¼ö“¿¬“»ê“ÀÚ“ÀÔ“´Ï“´Ù.
“ÀÌ “¿¬“»ê“ÀÚ“´Â “´Ü“Ç×“ÀÇ “»©“±â“¿¡“¼­ “°á“ÇÕ“ÀÌ “°­“ÇÑ “¿¬“»ê“ÀÚ“·Î
-2**4 “´Â (-2)**4 “ÀÌ “¾Æ“´Ï“¶ó -(2**4) “·Î “ÇØ“¼®“µË“´Ï“´Ù.
(“ÀÌ“°Í“Àº C “ÀÇ pow(3) “À» “»ç“¿ë“ÇØ “±¸“Ãà“µÇ“¾î “ÀÖ“¾î“¼­ “³»“ºÎ“Àû“À¸“·Î double “·Î “µ¿“ÀÛ“ÇÕ“´Ï“´Ù. 

=head2 Symbolic Unary Operators
X<unary operator> X<operator, unary>

(“´Ü“Ç×“¿¬“»ê“ÀÚ)

=begin original

Unary "!" performs logical negation, i.e., "not".  See also C<not> for a lower
precedence version of this.
X<!>

=end original

“´Ü“Ç×“¿¬“»ê“ÀÚ“ÀÇ "!"“´Â “³í“¸®“ºÎ“Á¤“À» “Ã³“¸®“ÇÕ“´Ï“´Ù. “Áï, "not"“ÀÔ“´Ï“´Ù.
“ÀÌ “¿¬“»ê“ÀÚ“ÀÇ “¿ì“¼±“¼ø“À§“¸¦ “ÀÛ“°Ô“ÇÏ“·Á“¸é C<not>“°¡ “»ç“¿ë“ÇÏ“¸é “µË“´Ï“´Ù.
X<!>

=begin original

Unary "-" performs arithmetic negation if the operand is numeric.  If
the operand is an identifier, a string consisting of a minus sign
concatenated with the identifier is returned.  Otherwise, if the string
starts with a plus or minus, a string starting with the opposite sign
is returned.  One effect of these rules is that -bareword is equivalent
to the string "-bareword".  If, however, the string begins with a
non-alphabetic character (excluding "+" or "-"), Perl will attempt to convert
the string to a numeric and the arithmetic negation is performed. If the
string cannot be cleanly converted to a numeric, Perl will give the warning
B<Argument "the string" isn't numeric in negation (-) at ...>.
X<-> X<negation, arithmetic>

=end original

“´Ü“Ç×“¿¬“»ê“ÀÚ“ÀÇ "-"“´Â “ÇÇ“¿¬“»ê“ÀÚ“°¡ “¼ý“ÀÚ“°ª“ÀÌ“¸é “»ê“¼ú“ºÎ“Á¤“ÇÕ“´Ï“´Ù..
“ÇÇ“¿¬“»ê“ÀÚ“°¡  “½Ä“º°“ÀÚ“¶ó“¸é, “»©“±â “±â“È£(-)“¿¡ “±× “½Ä“º°“ÀÚ“¸¦ “ÀÌ“¾î “¹®“ÀÚ“¿­“ÀÌ “¹Ý“È¯“µË“´Ï“´Ù.
“ÀÌ“¿Ü“¿¡ “ÇÇ“¿¬“»ê“ÀÚ“ÀÇ “ÃÖ“ÃÊ“ÀÇ “¹®“ÀÚ“°¡ “´õ“ÇÏ“±â “È¤“Àº “»©“±â “ÀÏ“¶§“¿¡“´Â
“±× “±â“È£“¸¦ “°Å“²Ù“·Î “¹Ù“²Û “¹®“ÀÚ“¿­“À» “¹Ý“È¯“ÇÕ“´Ï“´Ù.
“ÀÌ “±Ô“Ä¢“ÀÇ “°á“°ú -bareword “°¡ “¹®“ÀÚ“¿­ "-bareword"“¿Í “°°“Àº “°ª“ÀÌ “µË“´Ï“´Ù.
“ÇÏ“Áö“¸¸, “¹®“ÀÚ“¿­“ÀÌ “¿µ“¾î“ÀÌ“¿Ü("+"“¿Í "-"“¸¦ “Á¦“¿Ü“ÇÏ“°í)“ÀÇ “¹®“ÀÚ“·Î “½Ã“ÀÛ“µÇ“¸é
Perl “Àº “¹®“ÀÚ“¿­“À» “¼ö“Ä¡“·Î “º¯“È¯“ÇÏ“·Á“°í “ÇÏ“°í, “±×“·¡“¼­ “»ê“¼ú“ºÎ“Á¤“ÀÌ “»ø“Çà“µË“´Ï“´Ù.
“¸¸“¾à “¹®“ÀÚ“¿­“ÀÌ “¸í“È®“ÇÏ“°Ô “¼ý“ÀÚ“°ª“À¸“·Î “º¯“È¯“µÇ“Áö“¾Ê“À» “¶§“´Â, Perl“Àº
B<Argument "the string" isn't numeric in negation (-) at ...> “¶ó“´Â
“°æ“°í“¸¦ “³À“´Ï“´Ù.
X<-> X<negation, arithmetic>

=begin original

Unary "~" performs bitwise negation, i.e., 1's complement.  For
example, C<0666 & ~027> is 0640.  (See also L<Integer Arithmetic> and
L<Bitwise String Operators>.)  Note that the width of the result is
platform-dependent: ~0 is 32 bits wide on a 32-bit platform, but 64
bits wide on a 64-bit platform, so if you are expecting a certain bit
width, remember to use the & operator to mask off the excess bits.
X<~> X<negation, binary>

=end original

“´Ü“Ç×“¿¬“»ê“ÀÚ“ÀÇ "~"“´Â “ºñ“Æ®“´Ü“À§“ÀÇ “ºÎ“Á¤“À» “¼ö“Çà“ÇÕ“´Ï“´Ù. “Áï, 1“ÀÇ “º¸“¼ö“¸¦ “¹Ý“È¯“ÇÕ“´Ï“´Ù.
“¿¹“¸¦“µé“¸é, C<0666 & ~027> “´Â 0640 “ÀÔ“´Ï“´Ù.
(L<Integer Arithmetic> “°ú L<Bitwise String Operators> “¸¦ “Âü“Á¶“ÇØ“ÁÖ“¼¼“¿ä)
“°á“°ú“ÀÇ “³Ê“ºñ“Àº “ÇÃ“·§“Æû“¿¡ “ÀÇ“Á¸“ÇÏ“°í “ÀÖ“À¸“´Ï “ÁÖ“ÀÇ“ÇØ“ÁÖ“¼¼“¿ä.
~0 “´Â 32-bit “ÇÃ“·§“Æû“¿¡“¼­ 32“ºñ“Æ®“ÀÇ “³Ê“ºñ“ÀÌ“Áö“¸¸,
64-bit “ÇÃ“·§“Æû“¿¡“¼­“´Â 64“ºñ“Æ®“ÀÇ “³Ê“ºñ“ÀÌ“´Ï
“Æ¯“Á¤“ÀÇ “ºñ“Æ® “³Ê“ºñ“¸¦ “°¡“Á¤“ÇÏ“´Â “°æ“¿ì“´Â, “³²“Àº “ºñ“Æ®“¸¦ “¸¶“½º“Å©“ÇÏ“±â“À§“ÇØ & “¿¬“»ê“ÀÚ“¸¦
“»ç“¿ë“ÇÏ“´Â “°Í“À» “ÀØ“Áö “¾Ê“µµ“·Ï “ÁÖ“ÀÇ “ÇÏ“¼¼“¿ä.

X<~> X<negation, binary>

=begin original

Unary "+" has no effect whatsoever, even on strings.  It is useful
syntactically for separating a function name from a parenthesized expression
that would otherwise be interpreted as the complete list of function
arguments.  (See examples above under L<Terms and List Operators (Leftward)>.)
X<+>

=end original

“´Ü“Ç×“¿¬“»ê“ÀÚ“ÀÎ "+"“´Â “¿¹“¸¦ “µé“¾î “¹®“ÀÚ“¿­“¿¡ “´ë“ÇØ “»ç“¿ë“ÇÒ “°æ“¿ì“¿¡“´Â 
“¾Æ“¹«“°Í“µµ “ÇÏ“Áö “¾Ê“½À“´Ï“´Ù.
“ÇÔ“¼ö “ÀÌ“¸§“¿¡ “ÀÌ“¾î “°ý“È£“°¡ “ºÙ“Àº “½Ä“À» “¾²“´Â “°æ“¿ì“¿¡“´Â, “ÇÔ“¼ö“ÀÇ “ÀÎ“¼ö“¸®“½º“Æ®“·Î 
“ÇØ“¼®“µÇ“Áö “¾Ê“±â “À§“ÇØ“¼­ “»ç“¿ë“ÇÒ “¼ö “ÀÖ“½À“´Ï“´Ù.
(“¾Æ“·¡“¿¡ “¾´ L<Terms and List Operators (Leftward)> “ÀÇ “¿¹“¸¦ “Âü“Á¶“ÇØ“ÁÖ“¼¼“¿ä)
X<+>

=begin original

Unary "\" creates a reference to whatever follows it.  See L<perlreftut>
and L<perlref>.  Do not confuse this behavior with the behavior of
backslash within a string, although both forms do convey the notion
of protecting the next thing from interpolation.
X<\> X<reference> X<backslash>

=end original

“´Ü“Ç×“¿¬“»ê“ÀÚ“ÀÎ "\" “´Â “µÚ“¿¡ “ºÙ“Àº “°Í“¿¡ “´ë“ÇÑ “¸®“ÆÛ“·±“½º“¸¦ “»ý“¼º“ÇÕ“´Ï“´Ù.
L<perlreftut> “°ú L<perlref> “¸¦ “Âü“Á¶“ÇØ“ÁÖ“¼¼“¿ä.
“ÀÌ “»ç“¿ë“¹ý“µµ “¹®“ÀÚ“¿­ “¾È“¿¡ “¹é“½½“·¡“½¬“µµ “µÚ“¿¡ “¿À“´Â “°Í “Àü“°³“µÇ“´Â “°Í“À» 
“¸·“´Â “°Í“ÀÌ “°¡“´É“ÇÏ“Áö“¸¸ “µ¿“ÀÛ“À» “È¥“µ¿“ÇÏ“Áö “¸»“¾Æ“ÁÖ“¼¼“¿ä.
X<\> X<reference> X<backslash>

=head2 Binding Operators
X<binding> X<operator, binding> X<=~> X<!~>

(“Ï¬“áÖ“æÑ“ß©“í­)

=begin original

Binary "=~" binds a scalar expression to a pattern match.  Certain operations
search or modify the string $_ by default.  This operator makes that kind
of operation work on some other string.  The right argument is a search
pattern, substitution, or transliteration.  The left argument is what is
supposed to be searched, substituted, or transliterated instead of the default
$_.  When used in scalar context, the return value generally indicates the
success of the operation.  Behavior in list context depends on the particular
operator.  See L</"Regexp Quote-Like Operators"> for details and
L<perlretut> for examples using these operators.

=end original

“ÀÌ“Ç×“¿¬“»ê“ÀÚ“ÀÎ "=~" “´Â, “½º“Ä®“¶ó“½Ä“À» “ÆÐ“ÅÏ“¸Å“Ä¡“·Î “¹­“½À“´Ï“´Ù.
“±â“º»“Àû“À¸“·Î $_ “ÀÇ “¹®“ÀÚ“¿­“À» “°Ë“»ö“ÇÏ“°Å“³ª “º¯“°æ“ÇÏ“°Å“³ª “ÇÏ“´Â “¿¬“»ê“ÀÌ “ÀÖ“½À“´Ï“´Ù.
“ÀÌ “¿¬“»ê“ÀÚ“´Â “±×“°°“Àº “¿¬“»ê“À» “´Ù“¸¥ “¹®“ÀÚ“¿­“¿¡ “´ë“ÇØ “¼ö“Çà“½Ã“Å°“´Â “°Í“ÀÔ“´Ï“´Ù.
“¿À“¸¥“ÂÊ “ÀÎ“¼ö“´Â “°Ë“»ö “ÆÐ“ÅÏ, “Ä¡“È¯, “¹®“ÀÚ“º¯“È¯ “Áß “¾î“´À “°Í“ÀÔ“´Ï“´Ù.
“¿Þ“ÂÊ “ÀÎ“¼ö“´Â “±â“º»“Àû“ÀÎ $_ “´ë“½Å“¿¡ “°Ë“»ö, “Ä¡“È¯, “¹®“ÀÚ“º¯“È¯“ÀÇ “´ë“»ó“ÀÌ “µË“´Ï“´Ù.
“½º“Ä®“¶ó“ÄÜ“ÅØ“½º“Æ®“¿¡“¼­ “»ç“¿ë“ÇÏ“¸é “¹Ý“È¯“°ª“Àº 
“ÀÏ“¹Ý“Àû“À¸“·Î “¿¬“»ê“ÀÇ “°á“°ú“°¡ “¼º“°ø“Çß“´Â“°¡ “½Ç“ÆÐ“Çß“´Â “°¡ “ÀÔ“´Ï“´Ù.
“¸®“½º“Æ®“ÄÜ“ÅØ“½º“Æ®“¿¡“¼­“ÀÇ “Çà“µ¿“Àº “¿¬“»ê“ÀÚ“¿¡ “ÀÇ“Á¸“ÇÕ“´Ï“´Ù.
“ÀÚ“¼¼“ÇÑ “³»“¿ë“Àº L</"Regexp Quote-Like Operators"> “¸¦, 
“ÀÌ “¿¬“»ê“ÀÚ“µé“À» “»ç“¿ë“ÇÑ “¿¹“Á¦“¿¡ “´ë“ÇØ“¼­“´Â L<perlretut> “¸¦ “Âü“Á¶“ÇÏ“¼¼“¿ä“¡£

=begin original

If the right argument is an expression rather than a search pattern,
substitution, or transliteration, it is interpreted as a search pattern at run
time. Note that this means that its contents will be interpolated twice, so

=end original

“¿À“¸¥“ÂÊ“ÀÎ“¼ö“°¡ “°Ë“»ö “ÆÐ“ÅÏ, “Ä¡“È¯, “¹®“ÀÚ“º¯“È¯“ÀÌ “¾Æ“´Ñ “½Ä“ÀÌ“¶ó“¸é 
“±×“°Í“Àº “½Ç“Çà“ÇÒ “¶§“¿¡ “°á“Á¤“µÇ“´Â “°Ë“»ö“ÆÐ“ÅÏ“À¸“·Î “ÇØ“¼®“µË“´Ï“´Ù.
“ÀÌ“°Í“Àº “³»“¿ë“ÀÌ 2“¹ø “Àü“°³“µÇ“´Â “°Í“À» “ÀÇ“¹Ì“ÇÏ“´Â “°Í“ÀÓ“À¸“·Î “ÁÖ“ÀÇ“ÇØ“ÁÖ“¼¼
“Áï:

  '\\' =~ q'\\';

=begin original

is not ok, as the regex engine will end up trying to compile the
pattern C<\>, which it will consider a syntax error.

=end original

“Àº “¹Ù“¸£“Áö “¾Ê“½À“´Ï“´Ù. “Á¤“±Ô“Ç¥“Çö“¿£“Áø“Àº “ÃÖ“Á¾“Àû“À¸“·Î “ÆÐ“ÅÏ C<\>“¸¦
“ÄÄ“ÆÄ“ÀÏ“ÇÏ“·Á“°í“ÇØ“¼­, “ÀÌ“°Í“Àº “¹®“¹ý“¿¡“·¯“·Î “»ý“°¢“ÇÏ“±â “¶§“¹®“ÀÔ“´Ï“´Ù.

=begin original

Binary "!~" is just like "=~" except the return value is negated in
the logical sense.

=end original

“ÀÌ“Ç×“¿¬“»ê“ÀÚ“ÀÎ "!~"“´Â “¹Ý“È¯“°ª“ÀÌ “³í“¸®“ºÎ“Á¤“µÇ“´Â “°Í“À» “Á¦“¿Ü“ÇÏ“°í“´Â "=~"“¿Í “°°“½À“´Ï“´Ù.

=head2 Multiplicative Operators
X<operator, multiplicative>

(’¾è“Ûö“æÑ“ß©“í­)

=begin original

Binary "*" multiplies two numbers.
X<*>

=end original

“ÀÌ“Ç×“¿¬“»ê“ÀÚ“ÀÎ "*" “´Â 2“°³“ÀÇ “¼ý“ÀÚ“°ª“ÀÇ “°ö“À» “¹Ý“È¯“ÇÕ“´Ï“´Ù.
X<*>

=begin original

Binary "/" divides two numbers.
X</> X<slash>

=end original

“ÀÌ“Ç×“¿¬“»ê“ÀÚ“ÀÎ "/" “´Â 2“°³“ÀÇ “¼ý“ÀÚ“°ª“ÀÇ “³ª“´« “°ª“À» “¹Ý“È¯“ÇÕ“´Ï“´Ù.

X</> X<slash>

=begin original

Binary "%" computes the modulus of two numbers.  Given integer
operands C<$a> and C<$b>: If C<$b> is positive, then C<$a % $b> is
C<$a> minus the largest multiple of C<$b> that is not greater than
C<$a>.  If C<$b> is negative, then C<$a % $b> is C<$a> minus the
smallest multiple of C<$b> that is not less than C<$a> (i.e. the
result will be less than or equal to zero).  If the operands
C<$a> and C<$b> are floating point values and the absolute value of
C<$b> (that is C<abs($b)>) is less than C<(UV_MAX + 1)>, only
the integer portion of C<$a> and C<$b> will be used in the operation
(Note: here C<UV_MAX> means the maximum of the unsigned integer type).
If the absolute value of the right operand (C<abs($b)>) is greater than
or equal to C<(UV_MAX + 1)>, "%" computes the floating-point remainder
C<$r> in the equation C<($r = $a - $i*$b)> where C<$i> is a certain
integer that makes C<$r> should have the same sign as the right operand
C<$b> (B<not> as the left operand C<$a> like C function C<fmod()>)
and the absolute value less than that of C<$b>.
Note that when C<use integer> is in scope, "%" gives you direct access
to the modulus operator as implemented by your C compiler.  This
operator is not as well defined for negative operands, but it will
execute faster.
X<%> X<remainder> X<modulus> X<mod>

=end original

“ÀÌ“Ç×“¿¬“»ê“ÀÚ“ÀÎ "%" “´Â 2“°³“ÀÇ “¼ý“ÀÚ“°ª“ÀÇ “³ª“¸Ó“Áö“¸¦ “¹Ý“È¯“ÇÕ“´Ï“´Ù.
C<$a> “¿Í C<$b> “ÀÇ 2“°³“ÀÇ “Á¤“¼ö“ÀÇ “ÇÇ“¿¬“»ê“ÀÚ“¸¦ “Ãë“ÇÕ“´Ï“´Ù.
C<$b> “°¡ “³ô“Àº “°æ“¿ì C<$a % $b> “´Â C<$a> “¿¡“¼­ C<$a> “¸¦ “³Ñ“Áö“¾Ê“´Â
“ÃÖ“´ë“ÀÇ C<$b> “ÀÇ “¹è“¼ö“¸¦ “²ø“¾î“¿Â “°ª(?)“ÀÔ“´Ï“´Ù. 
C<$b> “°¡ “³·“Àº “°æ“¿ì C<$a % $b> “´Â C<$a> “¿¡“¼­ C<$a> “º¸“´Ù “³·“Áö “¾Ê“Àº 
“ÃÖ“¼Ò“ÀÇ C<$b> “¹è“¼ö“¸¦ “²ø“¾î“¿Â “°ª“ÀÔ“´Ï“´Ù.(“µû“¶ó“¼­ “°á“°ú“´Â 0 “ÀÌ“ÇÏ)
If the operands
C<$a> and C<$b> are floating point values and the absolute value of
C<$b> (that is C<abs($b)>) is less than C<(UV_MAX + 1)>, only
the integer portion of C<$a> and C<$b> will be used in the operation
(Note: here C<UV_MAX> means the maximum of the unsigned integer type).
If the absolute value of the right operand (C<abs($b)>) is greater than
or equal to C<(UV_MAX + 1)>, "%" computes the floating-point remainder
C<$r> in the equation C<($r = $a - $i*$b)> where C<$i> is a certain
integer that makes C<$r> should have the same sign as the right operand
C<$b> (B<not> as the left operand C<$a> like C function C<fmod()>)
and the absolute value less than that of C<$b>.

C<use integer> “°¡ “½º“ÄÚ“ÇÁ “¾È“¿¡ “ÀÖ“´Â “°æ“¿ì,
"%" “´Â C “ÄÄ“ÆÄ“ÀÏ“·¯“·Î “±¸“Ãà“µÈ “³ª“¸Ó“Áö“¿¬“»ê“ÀÚ“¸¦ “»ç“¿ë“ÇÕ“´Ï“´Ù. 
“ÀÌ“°Í“Àº “ÇÇ“¿¬“»ê“ÀÚ“°¡ “³·“Àº “°æ“¿ì“ÀÇ “¿ò“Á÷“ÀÓ“ÀÌ “ºÒ“È®“½Ç“ÇÏ“Áö“¸¸ “º¸“´Ù “ºü“¸£“°Ô “½Ç“Çà“µË“´Ï“´Ù.
X<%> X<remainder> X<modulus> X<mod>
(TBT)

=begin original

Binary "x" is the repetition operator.  In scalar context or if the left
operand is not enclosed in parentheses, it returns a string consisting
of the left operand repeated the number of times specified by the right
operand.  In list context, if the left operand is enclosed in
parentheses or is a list formed by C<qw/STRING/>, it repeats the list.
If the right operand is zero or negative, it returns an empty string
or an empty list, depending on the context.
X<x>

=end original

“ÀÌ“Ç×“¿¬“»ê“ÀÚ“ÀÎ "x" “´Â “¹Ý“º¹“¿¬“»ê“ÀÚ“ÀÔ“´Ï“´Ù.
“½º“Ä®“¶ó “ÄÁ“ÅØ“½º“Æ® “È¤“Àº “¿Þ“ÂÊ“ÀÇ “°ª“ÀÌ “°ý“È£“·Î “°¨“½Î“Áø “°æ“¿ì“¿¡“´Â
“¿Þ“ÂÊ “ÇÇ“¿¬“»ê“ÀÚ“¸¦ “¿À“¸¥“ÂÊ “ÇÇ“¿¬“»ê“ÀÚ“¿¡ “Ç¥“½Ã “È½“¼ö“¸¸ “¹Ý“º¹“ÇØ “¾ò“Àº “°ª“À¸“·Î “±¸“¼º“µÈ
“¹®“ÀÚ“¿­“À» “¸®“ÅÏ“ÇÕ“´Ï“´Ù.
“¸®“½º“Æ® “ÄÁ“ÅÙ“½º“Æ®“¿¡“¼­“´Â “¿Þ“ÂÊ “ÇÇ“¿¬“»ê“ÀÚ“°¡ “°ý“È£ “°¨“½Î“Áø “°æ“¿ì “È¤“Àº , “¡¡C<qw/STRING>“ÀÇ
“Çü“ÅÂ“ÀÇ “¸®“½º“Æ®“ÀÇ “°æ“¿ì “¸®“½º“Æ®“¸¦ “¹Ý“º¹“ÇÑ “°ª“ÀÌ “¹Ý“È¯“µË“´Ï“´Ù.
“¿À“¸¥“ÂÊ “ÇÇ“¿¬“»ê“ÀÚ“°¡ 0 “È¤“Àº “³·“Àº “°ª“ÀÏ “°æ“¿ì, “ÄÜ“ÅØ“½º“Æ®“¿¡ “ÀÇ“ÇØ “ºó “¹®“ÀÚ“¿­ “È¤“Àº 
“ºó “¸®“½º“Æ®“¸¦ “¹Ý“È¯“ÇÕ“´Ï“´Ù.

X<x>

    print '-' x 80;		# print row of dashes

    print "\t" x ($tab/8), ' ' x ($tab%8);	# tab over

    @ones = (1) x 80;		# a list of 80 1's
    @ones = (5) x @ones;	# set all elements to 5


=head2 Additive Operators
X<operator, additive>

(“µ¡“¼À“¿¬“»ê“ÀÚ)

=begin original

Binary "+" returns the sum of two numbers.
X<+>

=end original

“ÀÌ“Ç×“¿¬“»ê“ÀÚ“ÀÇ "+" “´Â “µÎ “¼ý“ÀÚ“°ª“ÀÇ “ÇÕ“À» “¹Ý“È¯“ÇÕ“´Ï“´Ù.
X<+>

=begin original

Binary "-" returns the difference of two numbers.
X<->

=end original

“ÀÌ“Ç×“¿¬“»ê“ÀÚ“ÀÇ "-"“´Â “µÎ “¼ý“ÀÚ“°ª“ÀÇ “»« “°ª“À» “¹Ý“È¯“ÇÕ“´Ï“´Ù.
X<->

=begin original

Binary "." concatenates two strings.
X<string, concatenation> X<concatenation>
X<cat> X<concat> X<concatenate> X<.>

=end original

“ÀÌ“Ç×“¿¬“»ê“ÀÚ“ÀÎ "." “´Â “µÎ “¹®“ÀÚ“¿­“À» “¿¬“°á“ÇÕ“´Ï“´Ù.
X<string, concatenation> X<concatenation>
X<cat> X<concat> X<concatenate> X<.>

=head2 Shift Operators
X<shift operator> X<operator, shift> X<<< << >>>
X<<< >> >>> X<right shift> X<left shift> X<bitwise shift>
X<shl> X<shr> X<shift, right> X<shift, left>

(“½Ã“ÇÁ“Æ® “¿¬“»ê“ÀÚ)

=begin original

Binary "<<" returns the value of its left argument shifted left by the
number of bits specified by the right argument.  Arguments should be
integers.  (See also L<Integer Arithmetic>.)

=end original

“ÀÌ“Ç×“¿¬“»ê“ÀÚ“ÀÎ "<<" “´Â “¿Þ“ÂÊ “ÀÎ“¼ö“ÀÇ “°ª“À» “¿À“¸¥“ÂÊ “ÀÎ“¼ö“°¡ “³ª“Å¸“³»“´Â “ºñ“Æ®“ÀÇ “¼ö“¸¸“Å­
“¿Þ“ÂÊ“À¸“·Î “½Ã“ÇÁ“Æ®“ÇÑ “°ª“À» “¹Ý“È¯“ÇÕ“´Ï“´Ù.
“ÀÎ“¼ö“´Â “Á¤“¼ö“°¡ “¾Æ“´Ï“¸é “¾È“µË“´Ï“´Ù.
(L<Integer Arithmetic> “ªâ‘²Î“ðÎ“ª·“ªÆ“ù»“ªµ“ª¤“¡£)

=begin original

Binary ">>" returns the value of its left argument shifted right by
the number of bits specified by the right argument.  Arguments should
be integers.  (See also L<Integer Arithmetic>.)

=end original

“ÀÌ“Ç×“¿¬“»ê“ÀÚ“ÀÎ ">>" “´Â “¿Þ“ÂÊ “ÀÎ“¼ö“ÀÇ “°ª“À» “¿À“¸¥“ÂÊ “ÀÎ“¼ö“°¡ “³ª“Å¸“³»“´Â “ºñ“Æ®“ÀÇ “¼ö“¸¸“Å­
“¿À“¸¥“ÂÊ“À¸“·Î “½Ã“ÇÁ“Æ®“ÇÑ “°ª“À» “¹Ý“È¯“ÇÕ“´Ï“´Ù.
“ÀÎ“¼ö“´Â “Á¤“¼ö“°¡ “¾Æ“´Ï“¸é “¾È“µË“´Ï“´Ù.
(L<Integer Arithmetic> “À» “Âü“Á¶“ÇØ“ÁÖ“¼¼“¿ä)

=begin original

Note that both "<<" and ">>" in Perl are implemented directly using
"<<" and ">>" in C.  If C<use integer> (see L<Integer Arithmetic>) is
in force then signed C integers are used, else unsigned C integers are
used.  Either way, the implementation isn't going to generate results
larger than the size of the integer type Perl was built with (32 bits
or 64 bits).

=end original

Perl “¿¡“¼­ "<<" “¿Í ">>" “´Â C “¿¡“¼­“ÀÇ "<<" “¿Í ">>" “¸¦ “Á÷“Á¢ “ÀÌ“¿ë“ÇØ“¼­
“±¸“Ãà“µÇ“¾î “ÀÖ“À½“¿¡ “ÁÖ“ÀÇ“ÇØ“ÁÖ“¼¼“¿ä
C<use integer> (L<Integer Arithmetic> “¸¦ “Âü“Á¶)“°¡ “À¯“È¿“ÀÎ“°æ“¿ì“¿¡“´Â 
C “ÀÇ “ºÎ“È£“°¡ “ºÙ“Àº “Á¤“¼ö“°¡ “»ç“¿ë“µÇ“°í, “±×“·¸“Áö “¾Ê“Àº “°æ“¿ì“¿¡“´Â C “ÀÇ “ºÎ“È£“¾ø“´Â “Á¤“¼ö“°¡
“»ç“¿ë“µË“´Ï“´Ù. (unsigned int)
“¾î“´À “°æ“¿ì“¿¡“µµ “ÀÌ “±¸“Á¶“´Â Perl “ÀÌ “ºô“µå“µÈ “Á¤“¼ö“Çü“ÀÇ “»ç“ÀÌ“Áî(32“ºñ“Æ® “È¤“Àº 64“ºñ“Æ®)
“º¸“´Ù “Å« “°á“°ú“¸¦ “¸¸“µé“¾î“³»“´Â “°æ“¿ì“´Â “¾ø“½À“´Ï“´Ù.

=begin original

The result of overflowing the range of the integers is undefined
because it is undefined also in C.  In other words, using 32-bit
integers, C<< 1 << 32 >> is undefined.  Shifting by a negative number
of bits is also undefined.

=end original

“Á¤“¼ö“ÀÇ “¹ü“À§“¸¦ “³Ñ“¾î“¼± “°æ“¿ì“ÀÇ “°á“°ú“´Â C“¿¡“¼­“µµ “¹Ì“Á¤“ÀÇ“µÇ“¾ú“±â“¿¡, Perl“µµ “¸¶“Âù“°¡“Áö“·Î
“¹Ì“Á¤“ÀÇ“µÇ“¾î “ÀÖ“½À“´Ï“´Ù. “¹Ù“²ã “¸»“ÇÏ“¸é 32“ºñ“Æ®“Á¤“¼ö“¸¦ “»ç“¿ë“ÇÒ “¶§, C<< 1 << 32>>“´Â
“¹Ì“Á¤“ÀÇ“ÀÔ“´Ï“´Ù. “½Ã“ÇÁ“Æ® “ÇÏ“´Â “ºñ“Æ®“¼ö“·Î “Àû“Àº “¼ö“¸¦ “Áö“Á¤“ÇÑ “°æ“¿ì“µµ “Á¤“ÀÇ“µÇ“Áö “¾Ê“½À“´Ï“´Ù.

=head2 Named Unary Operators
X<operator, named unary>

(“ÀÌ“¸§“ºÙ“Àº “´Ü“Ç×“¿¬“»ê“ÀÚ)

=begin original

The various named unary operators are treated as functions with one
argument, with optional parentheses.

=end original

“¿©“·¯“°¡“Áö “ÀÌ“¸§“ÀÌ “ºÙ“Àº “´Ü“Ç×“¿¬“»ê“ÀÚ“´Â “ÇÏ“³ª“ÀÇ “ÀÎ“¼ö“¸¦ “°¡“Áö“°í “°ý“È£“°¡ “»ý“·«“°¡“´É“ÇÑ
“ÇÔ“¼ö“·Î “Ãë“±Þ“µË“´Ï“´Ù.


=begin original

If any list operator (print(), etc.) or any unary operator (chdir(), etc.)
is followed by a left parenthesis as the next token, the operator and
arguments within parentheses are taken to be of highest precedence,
just like a normal function call.  For example,
because named unary operators are higher precedence than ||:

=end original

“¸®“½º“Æ®“¿¬“»ê“ÀÚ (print() “µî“µî) “³ª “´Ü“Ç×“¿¬“»ê“ÀÚ (chdir() “µî“µî) “Àº “¸ð“µÎ
“´Ù“À½ “Åä“Å«“À¸“·Î “¿­“¸°“°ý“È£“°¡ “¿À“¸é, “±× “¿¬“»ê“ÀÚ“¿Í “°ý“È£“¾È“ÀÇ “ÀÎ“¼ö“´Â
“º¸“Åë “ÇÔ“¼ö“È£“Ãâ“°ú “°°“Àº “ÃÖ“°í“ÀÇ “¿ì“¼±“¼ø“À§“·Î “Ãë“±Þ“µË“´Ï“´Ù.
“¿¹“¸¦ “µé“¾î “ÀÌ“¸§“ºÙ“Àº “´Ü“Ç×“¿¬“»ê“ÀÚ“´Â || “º¸“´Ù “¿ì“¼±“¼ø“À§“°¡ “³ô“¾Æ“¼­,
“¾Æ“·¡“¿Í “°°“ÀÌ “µË“´Ï“´Ù.

    chdir $foo    || die;	# (chdir $foo) || die
    chdir($foo)   || die;	# (chdir $foo) || die
    chdir ($foo)  || die;	# (chdir $foo) || die
    chdir +($foo) || die;	# (chdir $foo) || die

=begin original

but, because * is higher precedence than named operators:

=end original

“ÇÏ“Áö“¸¸ * “´Â “ÀÌ“¸§“ºÙ“Àº “¿¬“»ê“ÀÚ“º¸“´Ù “¿ì“¼±“¼ø“À§“°¡ “³ô“À¸“¹Ç“·Î “¾Æ“·¡“¿Í “°°“ÀÌ “µË“´Ï“´Ù.

    chdir $foo * 20;	# chdir ($foo * 20)
    chdir($foo) * 20;	# (chdir $foo) * 20
    chdir ($foo) * 20;	# (chdir $foo) * 20
    chdir +($foo) * 20;	# chdir ($foo * 20)

    rand 10 * 20;	# rand (10 * 20)
    rand(10) * 20;	# (rand 10) * 20
    rand (10) * 20;	# (rand 10) * 20
    rand +(10) * 20;	# rand (10 * 20)

=begin original

Regarding precedence, the filetest operators, like C<-f>, C<-M>, etc. are
treated like named unary operators, but they don't follow this functional
parenthesis rule.  That means, for example, that C<-f($file).".bak"> is
equivalent to C<-f "$file.bak">.
X<-X> X<filetest> X<operator, filetest>

=end original

“¿ì“¼±“¼ø“À§“¿¡ “°ü“ÇØ“¼­ C<-f> “³ª <C-M>“°°“Àº “ÆÄ“ÀÏ “Å×“½º“Æ®“¿¬“»ê“ÀÚ“´Â “ÀÌ“¸§“ºÙ“Àº “´Ü“Ç×“¿¬“»ê“ÀÚ“·Î
“Ãë“±Þ“µÇ“Áö“¸¸, “ÀÌ “ÇÔ“¼ö“ÀÇ “°ý“È£“·ê“Àº “Àû“¿ë“µÇ“Áö “¾Ê“½À“´Ï“´Ù. 
“¿¹“¸¦ “µé“ÀÚ“¸é C<-f($file).".bak"> “Àº C<-f "$file.bak"> “°°“Àº “°Í“À¸“·Î “Ãë“±Þ“ÇÕ“´Ï“´Ù.

X<-X> X<filetest> X<operator, filetest>

=begin original

See also L<"Terms and List Operators (Leftward)">.

=end original

L<"Terms and List Operators (Leftward)"> “¸¦ “Âü“Á¶“ÇÏ“¼¼“¿ä“¡£

=head2 Relational Operators
X<relational operator> X<operator, relational>

(“ºñ“±³“¿¬“»ê“ÀÚ)

=begin original

Binary "<" returns true if the left argument is numerically less than
the right argument.
X<< < >>

=end original

“ÀÌ“Ç×“¿¬“»ê“ÀÚ“ÀÎ "<" “Àº “¿Þ“ÂÊ “ÀÎ“¼ö“°¡ “¼ö“Ä¡“Àû“À¸“·Î “¿À“¸¥“ÂÊ “ÀÎ“¼ö“º¸“´Ù “ÀÛ“À¸“¸é
"“Âü" “À» “¹Ý“È¯“ÇÕ“´Ï“´Ù.

=begin original

Binary ">" returns true if the left argument is numerically greater
than the right argument.
X<< > >>

=end original

“ÀÌ“Ç×“¿¬“»ê“ÀÚ“ÀÎ "<" “´Â “¿Þ“ÂÊ “ÀÎ“¼ö“°¡ “¼ö“Ä¡“Àû“À¸“·Î “¿À“¸¥“ÂÊ “ÀÎ“¼ö“º¸“´Ù “Å©“¸é
"“Âü" “À» “¹Ý“È¯“ÇÕ“´Ï“´Ù.

=begin original

Binary "<=" returns true if the left argument is numerically less than
or equal to the right argument.
X<< <= >>

=end original

“ÀÌ“Ç×“¿¬“»ê“ÀÚ“ÀÎ "<=" “´Â “¿Þ“ÂÊ “ÀÎ“¼ö“°¡ “¼ö“Ä¡“Àû“À¸“·Î “¿À“¸¥“ÂÊ “ÀÎ“¼ö“º¸“´Ù “ÀÛ“°Å“³ª “°°“À¸“¸é
"“Âü" “À» “¹Ý“È¯“ÇÕ“´Ï“´Ù.

=begin original

Binary ">=" returns true if the left argument is numerically greater
than or equal to the right argument.
X<< >= >>

=end original

“ÀÌ“Ç×“¿¬“»ê“ÀÚ“ÀÎ ">=" “´Â “¿Þ“ÂÊ“ÀÎ“¼ö“°¡ “¼ö“Ä¡“Àû“À¸“·Î “¿À“¸¥“ÂÊ “ÀÎ“¼ö“º¸“´Ù “Å©“°Å“³ª “°°“À¸“¸é
"“Âü" “À» “¹Ý“È¯“ÇÕ“´Ï“´Ù.

=begin original

Binary "lt" returns true if the left argument is stringwise less than
the right argument.
X<< lt >>

=end original

“ÀÌ“Ç×“¿¬“»ê“ÀÚ“ÀÎ "lt" “´Â “¿Þ“ÂÊ “ÀÎ“¼ö“°¡ “¹®“ÀÚ“¿­“·Î“½á “¿À“¸¥“ÂÊ “ÀÎ“¼ö“º¸“´Ù “ÀÛ“À¸“¸é 
"“Âü"“À» “¹Ý“È¯“ÇÕ“´Ï“´Ù.

=begin original

Binary "gt" returns true if the left argument is stringwise greater
than the right argument.
X<< gt >>

=end original

“ÀÌ“Ç×“¿¬“»ê“ÀÚ“ÀÎ "gt" “´Â “¿Þ“ÂÊ “ÀÎ“¼ö“°¡ “¹®“ÀÚ“¿­“·Î“½á “¿À“¸¥“ÂÊ “ÀÎ“¼ö“º¸“´Ù “ÀÛ“À¸“¸é
"“Âü"“À» “¹Ý“È¯“ÇÕ“´Ï“´Ù.

=begin original

Binary "le" returns true if the left argument is stringwise less than
or equal to the right argument.
X<< le >>

=end original

“ÀÌ“Ç×“¿¬“»ê“ÀÚ“ÀÎ "le" “´Â “¿Þ“ÂÊ “ÀÎ“¼ö“°¡ “¹®“ÀÚ“¿­“·Î“½á “¿À“¸¥“ÂÊ “ÀÎ“¼ö“º¸“´Ù “ÀÛ“°Å“³ª “°°“À¸“¸é
"“Âü"“À» “¹Ý“È¯“ÇÕ“´Ï“´Ù.

=begin original

Binary "ge" returns true if the left argument is stringwise greater
than or equal to the right argument.
X<< ge >>

=end original

“ÀÌ“Ç×“¿¬“»ê“ÀÚ“ÀÎ "ge" “´Â “¿Þ“ÂÊ “ÀÎ“¼ö“°¡ “¹®“ÀÚ“¿­“·Î“½á “¿À“¸¥“ÂÊ “ÀÎ“¼ö“º¸“´Ù “Å©“°Å“³ª “°°“À¸“¸é
"“Âü"“À» “¹Ý“È¯“ÇÕ“´Ï“´Ù.

=head2 Equality Operators
X<equality> X<equal> X<equals> X<operator, equality>

(“µî“°¡“¿¬“»ê“ÀÚ)

=begin original

Binary "==" returns true if the left argument is numerically equal to
the right argument.
X<==>

=end original

“ÀÌ“Ç×“¿¬“»ê“ÀÚ“ÀÎ "==" “´Â “¿Þ“ÂÊ “ÀÎ“¼ö“°¡ “¼ö“Ä¡“·Î“½á “¿À“¸¥“ÂÊ “ÀÎ“¼ö“º¸“´Ù “°°“À¸“¸é
"“Âü"“À» “¹Ý“È¯“ÇÕ“´Ï“´Ù.

=begin original

Binary "!=" returns true if the left argument is numerically not equal
to the right argument.
X<!=>

=end original

“ÀÌ“Ç×“¿¬“»ê“ÀÚ“ÀÎ "!=" “´Â “¿Þ“ÂÊ “ÀÎ“¼ö“°¡ “¼ö“Ä¡“·Î“½á “¿À“¸¥“ÂÊ “ÀÎ“¼ö“¿Í “°°“Áö “¾Ê“À¸“¸é
"“Âü"“À» “¹Ý“È¯“ÇÕ“´Ï“´Ù.

=begin original

Binary "<=>" returns -1, 0, or 1 depending on whether the left
argument is numerically less than, equal to, or greater than the right
argument.  If your platform supports NaNs (not-a-numbers) as numeric
values, using them with "<=>" returns undef.  NaN is not "<", "==", ">",
"<=" or ">=" anything (even NaN), so those 5 return false. NaN != NaN
returns true, as does NaN != anything else. If your platform doesn't
support NaNs then NaN is just a string with numeric value 0.
X<< <=> >> X<spaceship>

=end original

“ÀÌ“Ç×“¿¬“»ê“ÀÚ“ÀÎ "<=>" “´Â “¿Þ“ÂÊ “ÀÎ“¼ö“°¡ “¼ö“Ä¡“·Î“½á “¿À“¸¥“ÂÊ “ÀÎ“¼ö“º¸“´Ù
“ÀÛ“Àº“°¡, “°°“Àº“°¡, “Å«“°¡“¿¡ “µû“¶ó -1, 0, 1 “À» “¹Ý“È¯“ÇÕ“´Ï“´Ù.
“¼ö“Ä¡“·Î“½á NaN(“¼ý“ÀÚ“°¡ “¾Æ“´Ñ) “¿¡ “´ë“ÀÀ“ÇÏ“°í “ÀÖ“´Â “ÇÃ“·§“Æû“¿¡“¼­“´Â
NaN “¿¡ “´ë“ÇØ "<=>"“¸¦ “»ç“¿ë“ÇÏ“¸é undef “¸¦ “¹Ý“È¯“ÇÕ“´Ï“´Ù.
NaN “Àº “¾î“´À “°ª“¿¡ “´ë“ÇØ“¼­“µµ (NaN“¿¡ “´ë“ÇØ“¼­“µµ) "<", "==", ">", "<=", ">="
“Áß “¾î“´À “ÇÏ“³ª“µµ “¼º“¸³“ÇÏ“Áö “¾Ê“±â“¶§“¹®“¿¡ “ÀÌ“°Í“Àº “¸ð“µÎ "“°Å“Áþ"“ÀÌ “µË“´Ï“´Ù.
NaN != NaN “Àº "“Âü"“À» “¹Ý“È¯“ÇÏ“Áö“¸¸, “±× “¿Ü“ÀÇ “¾î“´À “°ª“¿¡ “´ë“ÇØ“¼­“µµ != “´Â
"“°Å“Áþ"“À» “¹Ý“È¯“ÇÕ“´Ï“´Ù. 
NaN “¿¡ “´ë“ÀÀ“ÇÏ“Áö “¾Ê“´Â “ÇÃ“·§“Æû“¿¡“¼­“´Â NaN “Àº “´Ü“¼ø“È÷ “¼ý“ÀÚ“·Î“½á“ÀÇ “°ª 0“À» “°¡“Áø
“¹®“ÀÚ“¿­“ÀÔ“´Ï“´Ù.

    perl -le '$a = "NaN"; print "No NaN support here" if $a == $a'
    perl -le '$a = "NaN"; print "NaN support here" if $a != $a'

=begin original

Binary "eq" returns true if the left argument is stringwise equal to
the right argument.
X<eq>

=end original

“ÀÌ“Ç×“¿¬“»ê“ÀÚ“ÀÎ "eq" “´Â “¿Þ“ÂÊ “ÀÎ“¼ö“°¡ “¹®“ÀÚ“¿­“·Î“½á “¿À“¸¥“ÂÊ “ÀÎ“¼ö“¿Í “°°“´Ù“¸é
"“Âü" “À» “¹Ý“È¯“ÇÕ“´Ï“´Ù.

=begin original

Binary "ne" returns true if the left argument is stringwise not equal
to the right argument.
X<ne>

=end original

“ÀÌ“Ç×“¿¬“»ê“ÀÚ“ÀÎ "ne" “´Â “¿Þ“ÂÊ“ÀÎ“¼ö“°¡ “¹®“ÀÚ“¿­“·Î“½á “¿À“¸¥“ÂÊ “ÀÎ“¼ö“¿Í “°°“Áö “¾Ê“´Ù“¸é
"“Âü"“À» “¹Ý“È¯“ÇÕ“´Ï“´Ù.

=begin original

Binary "cmp" returns -1, 0, or 1 depending on whether the left
argument is stringwise less than, equal to, or greater than the right
argument.
X<cmp>

=end original

“ÀÌ“Ç×“¿¬“»ê“ÀÚ“ÀÎ "cmp"“´Â “¿Þ“ÂÊ“ÀÎ“¼ö“°¡ “¹®“ÀÚ“¿­“·Î“½á “¿À“¸¥“ÂÊ “ÀÎ“¼ö“º¸“´Ù,
“ÀÛ“°Å“³ª, “°°“°Å“³ª, “Å©“°Å“³ª “µû“¶ó“¼­ -1, -, 1 “À» “¹Ý“È¯“ÇÕ“´Ï“´Ù.

=begin original

Binary "~~" does a smart match between its arguments. Smart matching
is described in L<perlsyn/"Smart matching in detail">.
This operator is only available if you enable the "~~" feature:
see L<feature> for more information.
X<~~>

=end original

“ÀÌ“Ç×“¿¬“»ê“Áö“ÀÎ "~~"“´Â “½º“¸¶“Æ®“¸Å“Äª“À¸“·Î“½á “µ¿“ÀÛ“ÇÕ“´Ï“´Ù.
“½º“¸¶“Æ® “¸Å“Äª“¿¡ “´ë“ÇØ“¼­“´Â L<perlsyn/"Smart matching in detail"> “¿¡“¼­
“±â“¼ú“ÇÏ“°í “ÀÖ“½À“´Ï“´Ù.
“ÀÌ “¿¬“»ê“ÀÚ“´Â "~~" “±â“´É“ÀÌ “À¯“È¿“ÇÑ “°æ“¿ì“¸¸ “»ç“¿ë“°¡“´É“ÇÕ“´Ï“´Ù.
“ÀÌ“¿¡ “´ë“ÇÑ “Á¤“º¸“¿¡ “´ë“ÇØ“¼­“´Â L<feature> “¸¦ “Âü“Á¶“ÇØ“ÁÖ“¼¼“¿ä.

X<~~>

=begin original

"lt", "le", "ge", "gt" and "cmp" use the collation (sort) order specified
by the current locale if C<use locale> is in effect.  See L<perllocale>.

=end original

"lt", "le", "ge", "gt", "cmp" “´Â C<use locale> “°¡ “À¯“È¿“ÇÑ “°æ“¿ì“´Â
“Çö“Àç“ÀÇ “·Î“ÄÉ“ÀÏ“¿¡“¼­ “Áö“Á¤“µÈ “Æä“ÀÌ“Áö“¼ø“¼­“·Î “»ç“¿ë“µË“´Ï“´Ù.
L<perllocale> “À» “Âü“Á¶“ÇÏ“¼¼“¿ä.

=head2 Bitwise And
X<operator, bitwise, and> X<bitwise and> X<&>

(“ºñ“Æ®“´Ü“À§“ÀÇ AND)

=begin original

Binary "&" returns its operands ANDed together bit by bit.
(See also L<Integer Arithmetic> and L<Bitwise String Operators>.)

=end original

“ÀÌ“Ç×“¿¬“»ê“ÀÚ“ÀÎ "&" “´Â, “µÎ “ÇÇ“¿¬“»ê“ÀÚ“ÀÇ “ºñ“Æ®“¸¶“´Ù “³í“¸®“°ö“À» “Ãë“ÇØ,
“±× “°á“°ú“¸¦ “¹Ý“È¯“ÇÕ“´Ï“´Ù.
(L<Integer Arithmetic> “°ú L<Bitwise String Operators> “À» “Âü“Á¶“ÇØ“ÁÖ“¼¼“¿ä)

=begin original

Note that "&" has lower priority than relational operators, so for example
the brackets are essential in a test like

=end original

"&" “´Â “°ü“°è“¿¬“»ê“ÀÚ“º¸“´Ù “¿ì“¼±“¼ø“À§“°¡ “³·“±â“¶§“¹®“¿¡, “¾Æ“·¡“¿Í “°°“Àº “Å×“½º“Æ®“¿¡“¼­“´Â
“°ý“È£“°¡ “ÇÊ“¿ä“ÇÕ“´Ï“´Ù.

	print "Even\n" if ($x & 1) == 0;

=head2 Bitwise Or and Exclusive Or
X<operator, bitwise, or> X<bitwise or> X<|> X<operator, bitwise, xor>
X<bitwise xor> X<^>

(“ºñ“Æ®“´Ü“À§“ÀÇ OR “¿Í XOR)

=begin original

Binary "|" returns its operands ORed together bit by bit.
(See also L<Integer Arithmetic> and L<Bitwise String Operators>.)

=end original

“ÀÌ“Ç×“¿¬“»ê“ÀÚ“ÀÎ "|" “´Â “µÎ “ÇÇ“¿¬“»ê“ÀÚ“ÀÇ “ºñ“Æ®“¸¶“´Ù “³í“¸®“ÇÕ“À» “Ãë“ÇØ,
“±× “°á“°ú“¸¦ “¹Ý“È¯“ÇÕ“´Ï“´Ù.
(L<Integer Arithmetic> “°ú L<Bitwise String Operators> “¸¦ “Âü“Á¶“ÇØ“ÁÖ“¼¼“¿ä)

=begin original

Binary "^" returns its operands XORed together bit by bit.
(See also L<Integer Arithmetic> and L<Bitwise String Operators>.)

=end original

“ÀÌ“Ç×“¿¬“»ê“ÀÚ“ÀÎ "^" “´Â “µÎ “ÇÇ“¿¬“»ê“ÀÚ“ÀÇ “ºñ“Æ®“¸¶“´Ù “¹è“Å¸“³í“¸®“ÇÕ“À» “Ãë“ÇØ
“±× “°á“°ú“¸¦ “¹Ý“È¯“ÇÕ“´Ï“´Ù.
(L<Integer Arithmetic> “°ú L<Bitwise String Operators> “¸¦ “Âü“Á¶“ÇØ“ÁÖ“¼¼“¿ä)

=begin original

Note that "|" and "^" have lower priority than relational operators, so
for example the brackets are essential in a test like

=end original

"|" “¿Í "^" “Àº “°ü“°è“¿¬“»ê“ÀÚ“º¸“´Ù “¿ì“¼±“¼ø“À§“°¡ “³·“±â“¶§“¹®“¿¡, “¾Æ“·¡“¿Í “°°“Àº
“Å×“½º“Æ®“¿¡“¼­“´Â “°ý“È£“°¡ “ÇÊ“¿ä“ÇÕ“´Ï“´Ù.

	print "false\n" if (8 | 2) != 10;

=head2 C-style Logical And
X<&&> X<logical and> X<operator, logical, and>

(C “½º“Å¸“ÀÏ“ÀÇ “³í“¸®“°ö)

=begin original

Binary "&&" performs a short-circuit logical AND operation.  That is,
if the left operand is false, the right operand is not even evaluated.
Scalar or list context propagates down to the right operand if it
is evaluated.

=end original

“ÀÌ“Ç×“¿¬“»ê“ÀÚ“ÀÎ "&&"“´Â “´Ü“¶ô“ÀÇ “³í“¸®“°ö“¿¬“»ê“À» “¼ö“Çà“ÇÕ“´Ï“´Ù. 
“Áï, “¿Þ“ÂÊ “ÇÇ“¿¬“»ê“ÀÚ“°¡ "“°Å“Áþ"“À» “°æ“¿ì“¿¡“´Â “¿À“¸¥“ÂÊ “ÇÇ“¿¬“»ê“¸¦ “Æò“°¡“ÇØ“¼­
“½Ç“Çà“ÇÏ“Áö “¾Ê“µµ“·Ï “ÇÏ“´Â “°Í“ÀÔ“´Ï“´Ù.
“Æò“°¡“µÉ “°æ“¿¡“´Â, “½º“Ä®“¶ó “È¤“Àº “¸®“½º“Æ® “ÄÜ“ÅØ“½º“Æ®“´Â
“¿À“¸¥“ÂÊ “ÇÇ“¿¬“»ê“ÀÚ“¿¡“µµ “Àü“´Þ“ÇÕ“´Ï“´Ù.

=head2 C-style Logical Or
X<||> X<operator, logical, or>

(C “½º“Å¸“ÀÏ“ÀÇ “³í“¸®“ÇÕ)

=begin original

Binary "||" performs a short-circuit logical OR operation.  That is,
if the left operand is true, the right operand is not even evaluated.
Scalar or list context propagates down to the right operand if it
is evaluated.

=end original

“ÀÌ“Ç×“¿¬“»ê“ÀÚ“ÀÎ "||" “´Â, “´Ü“¶ô“ÀÇ “³í“¸®“ÇÕ“¿¬“»ê“À» “¼ö“Çà“ÇÕ“´Ï“´Ù.
“Áï, “¿Þ“ÂÊ “ÇÇ“¿¬“»ê“ÀÚ“°¡ "“Âü"“ÀÏ “°æ“¿ì,“¿À“¸¥“ÂÊ “¿¬“»ê“ÀÚ“´Â “Æò“°¡“µÇ“Áö
“¾Ê“°Ô “ÇÏ“´Â “°Í“ÀÔ“´Ï“´Ù.
“Æò“°¡“µÉ “°æ“¿ì“¿¡“´Â, “½º“Ä®“¶ó “È¤“Àº “¸®“½º“Æ® “ÄÜ“ÅØ“½º“Æ®“´Â
“¿À“¸¥“ÂÊ “ÇÇ“¿¬“»ê“ÀÚ“¿¡“µµ “Àü“´Þ“µË“´Ï“´Ù.

=head2 C-style Logical Defined-Or
X<//> X<operator, logical, defined-or>

(C “½º“Å¸“ÀÏ“ÀÇ “³í“¸®“Á¤“ÀÇ“ÇÕ)

=begin original

Although it has no direct equivalent in C, Perl's C<//> operator is related
to its C-style or.  In fact, it's exactly the same as C<||>, except that it
tests the left hand side's definedness instead of its truth.  Thus, C<$a // $b>
is similar to C<defined($a) || $b> (except that it returns the value of C<$a>
rather than the value of C<defined($a)>) and is exactly equivalent to
C<defined($a) ? $a : $b>.  This is very useful for providing default values
for variables.  If you actually want to test if at least one of C<$a> and
C<$b> is defined, use C<defined($a // $b)>.

=end original

Although it has no direct equivalent in C, Perl's C<//> operator is related
to its C-style or.  In fact, it's exactly the same as C<||>, except that it
tests the left hand side's definedness instead of its truth.  Thus, C<$a // $b>
is similar to C<defined($a) || $b> (except that it returns the value of C<$a>
rather than the value of C<defined($a)>) and is exactly equivalent to
C<defined($a) ? $a : $b>.  This is very useful for providing default values
for variables.  If you actually want to test if at least one of C<$a> and
C<$b> is defined, use C<defined($a // $b)>.
(TBT)

=begin original

The C<||>, C<//> and C<&&> operators return the last value evaluated
(unlike C's C<||> and C<&&>, which return 0 or 1). Thus, a reasonably
portable way to find out the home directory might be:

=end original

C<||>, C<//>,  C<&&> “¿¬“»ê“ÀÚ“´Â, (C “Ã³“·³ “´Ü“¼ø“È÷ 0 “ÀÌ“³ª 1“À» “¹Ý“È¯“ÇÏ“´Â “°Í“ÀÌ “¾Æ“´Ñ) 
“¸¶“Áö“¸·“¿¡ “Æò“°¡“µÇ“´Â “°ª“À» “¹Ý“È¯“ÇÕ“´Ï“´Ù.
“ÀÌ“¿¡ “ÀÇ“ÇØ“¼­ “ÀÏ“¹Ý“Àû“À¸“·Î “»ç“¿ë“ÇÒ “¼ö “ÀÖ“´Â “È¨ “µð“·º“Åä“¸®“¸¦ “Ã£“´Â “¹æ“¹ý“Àº : 

    $home = $ENV{'HOME'} // $ENV{'LOGDIR'} //
	(getpwuid($<))[7] // die "You're homeless!\n";

=begin original

In particular, this means that you shouldn't use this
for selecting between two aggregates for assignment:

=end original

“Æ¯“º°“È÷ “ÀÌ“°Í“ÀÎ “´ë“ÀÔ“À» “À§“ÇØ “µÎ“°³“ÀÇ “Áý“ÇÕ“À» “¼±“ÅÃ“ÇÏ“±â “À§“ÇØ 
“»ç“¿ë“ÇÏ“´Â “°Í“ÀÌ “¾Æ“´Ô“À» “ÀÇ“¹Ì“ÇÕ“´Ï“´Ù.

    @a = @b || @c;		# this is wrong
    @a = scalar(@b) || @c;	# really meant this
    @a = @b ? @b : @c;		# this works fine, though

=begin original

As more readable alternatives to C<&&> and C<||> when used for
control flow, Perl provides the C<and> and C<or> operators (see below).
The short-circuit behavior is identical.  The precedence of "and"
and "or" is much lower, however, so that you can safely use them after a
list operator without the need for parentheses:

=end original

Perl “¿¡“¼­“´Â “Èå“¸§“Á¦“¾î“¿¡ “»ç“¿ë“ÇÏ“´Â “°æ“¿ì“ÀÇ “´Ù“¼Ò “ÀÐ“±â “½¬“¿î C<&&> “¿Í C<||> “ÀÇ 
“µ¿“ÀÇ“¾î“·Î C<and> “¿¬“»ê“ÀÚ“¿Í C<or> “¿¬“»ê“ÀÚ“°¡ “ÀÖ“½À“´Ï“´Ù.(“¾Æ“·¡ “Âü“Á¶) 
“´Ü“¶ô“ÀÇ “µ¿“ÀÛ“Àº “¸ð“µÎ “°°“½À“´Ï“¸¸, "and"“¿Í "or"“ÀÇ “¿ì“¼±“¼ø“À§“´Â “²Ï “³·“À¸“¹Ç“·Î,
“ÀÎ“¼ö“¿¡ “°ý“È£“¸¦ “»ç“¿ë“ÇÏ“Áö “¾Ê“´Â “¸®“½º“Æ®“¿¬“»ê“ÀÚ“ÀÇ “µÚ“¿¡ “ºÙ“¿©“¼­ “¾µ “°æ“¿ì“¿¡“µµ
“¾È“½É“ÇØ“¼­ “»ç“¿ë“ÇÒ “¼ö “ÀÖ“½À“´Ï“´Ù.

    unlink "alpha", "beta", "gamma"
	    or gripe(), next LINE;

=begin original

With the C-style operators that would have been written like this:

=end original

C “½º“Å¸“ÀÏ“ÀÇ “¿¬“»ê“ÀÚ“¿¡“¼­“´Â “¾Æ“·¡“¿Í “°°“ÀÌ “¾µ “ÇÊ“¿ä“°¡ “ÀÖ“½À“´Ï“´Ù.

    unlink("alpha", "beta", "gamma")
	    || (gripe(), next LINE);

=begin original

Using "or" for assignment is unlikely to do what you want; see below.

=end original

“´ë“ÀÔ“¿¡“¼­ "or" “¸¦ “»ç“¿ë“ÇÏ“¸é, “ÇÏ“·Á“´ø “°Í“°ú “´Ù“¸¥ “°Í“ÀÌ “µË“´Ï“´Ù.
“¾Æ“·¡“¸¦ “Âü“Á¶“ÇÏ“¼¼“¿ä.

=head2 Range Operators
X<operator, range> X<range> X<..> X<...>

(“¹ü“À§ “¿¬“»ê“ÀÚ)

=begin original

Binary ".." is the range operator, which is really two different
operators depending on the context.  In list context, it returns a
list of values counting (up by ones) from the left value to the right
value.  If the left value is greater than the right value then it
returns the empty list.  The range operator is useful for writing
C<foreach (1..10)> loops and for doing slice operations on arrays. In
the current implementation, no temporary array is created when the
range operator is used as the expression in C<foreach> loops, but older
versions of Perl might burn a lot of memory when you write something
like this:

=end original

“ÀÌ“Ç×“¿¬“»ê“ÀÚ ".." “´Â “¹ü“À§“¿¬“»ê“ÀÚ“·Î “»ç“¿ë“µÇ“´Â “ÄÁ“ÅØ“½º“Æ®“¿¡ “ÀÇ“ÇØ
“´Ù“¸¥ “µ¿“ÀÛ“À» “ÇÏ“´Â 2“°³“ÀÇ “¿¬“»ê“ÀÚ“¸¦ “ÇÕ“Ä£ “°Í“ÀÔ“´Ï“´Ù.
“¸®“½º“Æ® “ÄÁ“ÅØ“½º“Æ®“¿¡“¼­“´Â, “¿Þ“ÂÊ“ÀÇ “°ª“¿¡“¼­ “¿À“¸¥“ÂÊ“ÀÇ “°ª“±î“Áö (1“¾¿ “³ô“Àº “¼ø“À¸“·Î)
“¼ö“¸¦ “Çì“¾Æ“¸° “°ª“À» “°¡“Áø “¸®“½º“Æ®“¸¦ “¹Ý“È¯“ÇÕ“´Ï“´Ù.
“¿Þ“ÂÊ“ÀÇ “°ª“ÀÌ “¿À“¸¥“ÂÊ“ÀÇ “°ª“º¸“´Ù “Å¬ “°æ“¿ì“´Â “ºó “¸®“½º“Æ®“¸¦ “¹Ý“È¯“ÇÕ“´Ï“´Ù.
“¹ü“À§ “¿¬“»ê“ÀÚ“´Â C<foreach (1..10)> “Ã³“·³ “·ç“ÇÁ“¸¦ “»ç“¿ë“ÇÒ “°æ“¿ì“³ª,
“¹è“¿­“ÀÇ “½½“¶ó“ÀÌ“½º“¿¬“»ê“À» “¼ö“Çà“ÇÒ “¶§ “Æí“¸®“ÇÕ“´Ï“´Ù.
“Çö“»ó“ÅÂ“¿¡“¼­“´Â C<foreach> “·ç“ÇÁ“ÀÇ “½Ä “¾È“¿¡ “¹ü“À§ “¿¬“»ê“ÀÚ“¸¦ “»ç“¿ë“ÇØ“µµ
“ÀÏ“½Ã“¹è“¿­“Àº “¸¸“µé“¼ö“¾ø“½À“´Ï“´Ù. “¿¹“Àü“ÀÇ Perl “Àº “¾Æ“·¡“Ã³“·³ “¾²“¸é
“´ë“·®“ÀÇ “¸Þ“¸ð“¸®“¸¦ “¾²“°Ô“µË“´Ï“´Ù.

    for (1 .. 1_000_000) {
	# code
    }

=begin original

The range operator also works on strings, using the magical auto-increment,
see below.

=end original

“¹ü“À§“¿¬“»ê“ÀÚ“´Â “¸Å“Áö“ÄÃ“ÀÚ“µ¿“Áõ“°¡“¸¦ “»ç“¿ë“ÇÏ“´Â “°Í“À¸“·Î “¹®“ÀÚ“¿­“¿¡“¼­“µµ “µ¿“ÀÛ“ÇÕ“´Ï“´Ù.
“´Ù“À½“À» “Âü“Á¶“ÇØ“ÁÖ“¼¼“¿ä.

=begin original

In scalar context, ".." returns a boolean value.  The operator is
bistable, like a flip-flop, and emulates the line-range (comma) operator
of B<sed>, B<awk>, and various editors.  Each ".." operator maintains its
own boolean state.  It is false as long as its left operand is false.
Once the left operand is true, the range operator stays true until the
right operand is true, I<AFTER> which the range operator becomes false
again.  It doesn't become false till the next time the range operator is
evaluated.  It can test the right operand and become false on the same
evaluation it became true (as in B<awk>), but it still returns true once.
If you don't want it to test the right operand till the next
evaluation, as in B<sed>, just use three dots ("...") instead of
two.  In all other regards, "..." behaves just like ".." does.

=end original

“½º“Ä®“¶ó“ÄÁ“ÅØ“½º“Æ®“¿¡“¼­ “»ç“¿ë“µÉ “¶§“ÀÇ ".." “´Â "“Âü/“°Å“Áþ" “°ª“À» “¹Ý“È¯“ÇÕ“´Ï“´Ù.
“ÀÌ “¿¬“»ê“ÀÚ“´Â “ÇÃ“¸³“ÇÃ“·Ó“°°“ÀÌ 2“°ª“ÀÇ “¾È“Á¤“À¸“·Î 
B<sed> “³ª B<awk> “³ª “¸¹“Àº “¿¡“µð“ÅÍ“°°“ÀÌ 
“Çà“¹ü“À§(“ÄÞ“¸¶) “¿¬“»ê“ÀÚ“¸¦ “¿¡“¹Ä“·¹“ÀÌ“Æ® “ÇÏ“´Â “°Í“ÀÔ“´Ï“´Ù.
“°¢“°¢“ÀÇ ".." “¿¬“»ê“ÀÚ“°¡ “µ¶“¸³“ÇØ“¼­ “ÀÚ“½Å“ÀÇ "“Âü/“°Å“Áþ" “»ó“ÅÂ“¸¦ “°ü“¸®“ÇÕ“´Ï“´Ù.
“Ã³“À½“Àº “¿Þ“ÂÊ “¿¬“»ê“ÀÚ“°¡ "“°Å“Áþ"“ÀÏ “°æ“¿ì, “¿¬“»ê“ÀÚ“Ã¼“µµ "“°Å“Áþ"“ÀÌ “µË“´Ï“´Ù.
“¹ü“À§“¿¬“»ê“ÀÚ“´Â “ÀÏ“´Ü “¿Þ“ÂÊ “¿¬“»ê“ÀÚ“°¡ "“Âü"“ÀÌ “µÇ“¸é, “¿À“¸¥“ÂÊ “¿¬“»ê“ÀÚ“°¡ "“Âü"“ÀÏ “°æ“¿ì
"“Âü"“À» “¹Ý“È¯“ÇÏ“°Ô “µË“´Ï“´Ù.
“¿À“¸¥“ÂÊ “¿¬“»ê“ÀÚ“°¡ "“°Å“Áþ"“ÀÌ “µÇ“¸é, “¿¬“»ê“ÀÚ“µµ "“°Å“Áþ"“À» “¹Ý“È¯“ÇÏ“°Ô “µË“´Ï“´Ù.
(“´Ù“À½“ÀÇ “¹ü“À§“¿¬“»ê“ÀÚ“°¡ “Æò“°¡“µÇ“±â“±î“Áö“´Â "“°Å“Áþ"“ÀÌ “µÇ“Áö “¾Ê“½À“´Ï“´Ù)
(B<awk> “¿¡“¼­ “Ã³“·³) "“Âü"“ÀÌ “µÈ, “±× “Æò“°¡ “¾È“¿¡ “¿À“¸¥“ÂÊ “¿¬“»ê“ÀÚ“¸¦ “Å×“½º“Æ®“ÇÏ“°í,
"“°Å“Áþ"“ÀÌ“¶ó“°í “µÇ“Áö“¸¸, “ÇÑ “¹ø“Àº "“Âü"“À» “¹Ý“È¯“ÇÏ “µË“´Ï“´Ù.
B<sed> “¿¡“¼­ “Ã³“·³, “´Ù“À½“¿¡ “Æò“°¡“µÇ“±â“±î“Áö “¿À“¸¥“ÂÊ “¿¬“»ê“ÀÚ“¸¦ “Å×“½º“Æ®“ÇÏ“°í “½Í“´Ù“¸é,
“µÎ “°³“ÀÇ “Á¡ “´ë“½Å“¿¡ 3“°³“ÀÇ “Á¡("...")“À» “»ç“¿ë“ÇØ “ÁÖ“¼¼“¿ä.
“±× “¿Ü“ÀÇ “Á¡“¿¡“¼­“´Â "..."“´Â ".."“¿Í “°°“Àº “¼ö“Çà“À» “ÇÕ“´Ï“´Ù.

=begin original

The right operand is not evaluated while the operator is in the
"false" state, and the left operand is not evaluated while the
operator is in the "true" state.  The precedence is a little lower
than || and &&.  The value returned is either the empty string for
false, or a sequence number (beginning with 1) for true.  The
sequence number is reset for each range encountered.  The final
sequence number in a range has the string "E0" appended to it, which
doesn't affect its numeric value, but gives you something to search
for if you want to exclude the endpoint.  You can exclude the
beginning point by waiting for the sequence number to be greater
than 1.

=end original

“¿À“¸¥“ÂÊ “¿¬“»ê“ÀÚ“´Â “¿¬“»ê“ÀÚ“ÀÇ “»ó“ÅÂ“°¡ "“°Å“Áþ"“ÀÏ “¶§“´Â “Æò“°¡“µÇ“Áö “¾Ê“°í,
“¿Þ“ÂÊ “¿¬“»ê“ÀÚ“´Â “¿¬“»ê“ÀÚ“ÀÇ “»ó“ÅÂ“°¡ "“Âü"“ÀÏ “¶§“´Â “Æò“°¡“µÇ“Áö “¾Ê“½À“´Ï“´Ù.
“¿ì“¼±“¼ø“À§“´Â, ||“´Â && “ÀÇ “¾à“°£ “¹Ø“ÀÔ“´Ï“´Ù.
"“°Å“Áþ"“¿¡“¼­“´Â “ºó “¹®“ÀÚ“¿­“ÀÌ “¹Ý“È¯“µÇ“°í,
"“Âü"“¿¡“¼­“´Â (1 “¿¡“¼­ “½Ã“ÀÛ“ÇÔ) “¼ø“¼­“¿¡ “µû“¶ó “³ª“¿­“µÈ “¼ý“ÀÚ“°ª“ÀÌ “¹Ý“È¯“µË“´Ï“´Ù. 
“ÀÌ “½Ã“Äö“½º “³Ñ“¹ö“´Â, “»õ“·Î“¿î “¹ü“À§“°¡ “½Ã“ÀÛ“µÇ“´Â “°Í“¿¡ “¸®“¼Â“µË“´Ï“´Ù.
“¹ü“À§“ÀÇ “¸¶“Áö“¸· “¼ý“ÀÚ“¿¡“´Â, “¹®“ÀÚ“¿­ "E0" “°¡ “¸¶“Áö“¸·“¿¡ “ºÙ“°Ô“µË“´Ï“´Ù.
“ÀÌ“°Í“Àº “¼ý“ÀÚ“°ª“À¸“·Î“½á“´Â “¾î“¶² “¿µ“Çâ“µµ “¾ø“Áö“¸¸, “¹ü“À§“ÀÇ “³¡“¿¡“¼­ “¹º“°¡ “Æ¯“º°“ÇÑ “°Í“À»
“ÇÏ“°í “½Í“Àº “°æ“¿ì“¿¡“´Â “Ç¥“Áö“·Î“½á “»ç“¿ë“ÇÒ “¼ö “ÀÖ“½À“´Ï“´Ù.
“¹ü“À§“ÀÇ “½Ã“ÀÛ“¿¡“¼­ “¹º“°¡ “ÇÏ“°í “½Í“À» “°æ“¿ì“´Â “½Ã“Äö“½º “³Ñ“¹ö“°¡ 1“º¸“´Ù“µµ “Å©“°Ô “µÈ “¼ý“ÀÚ“¸¦
“°¡“Áö“°í “ÀÖ“À¸“¸é “µË“´Ï“´Ù.

=begin original

If either operand of scalar ".." is a constant expression,
that operand is considered true if it is equal (C<==>) to the current
input line number (the C<$.> variable).

=end original

“½º“Ä®“¶ó“ÀÇ ".." “ÀÇ “ÇÇ“¿¬“»ê“ÀÚ“°¡ “Æ¯“Á¤“Ç¥“Çö“ÀÏ “°æ“¿ì“´Â, “±× “ÇÇ“¿¬“»ê“ÀÚ“´Â “¾Ï“¹¬“Àû“À¸“·Î
“Çö“Àç“ÀÇ “ÀÔ“·Â“Çà“¹ø“È£(“º¯“¼ö C<$.> “¿Í “°°“Àº (C<==>) “°æ“¿ì“¿¡“´Â "“Âü"“ÀÌ “µË“´Ï“´Ù.

=begin original

To be pedantic, the comparison is actually C<int(EXPR) == int(EXPR)>,
but that is only an issue if you use a floating point expression; when
implicitly using C<$.> as described in the previous paragraph, the
comparison is C<int(EXPR) == int($.)> which is only an issue when C<$.>
is set to a floating point value and you are not reading from a file.
Furthermore, C<"span" .. "spat"> or C<2.18 .. 3.14> will not do what
you want in scalar context because each of the operands are evaluated
using their integer representation.

=end original

“Á» “´õ “ÀÚ“¼¼“ÇÏ“°Ô “¾ê“±â“ÇÏ“¸é, “ºñ“±³“´Â “½Ç“Á¦“·Î C<int(EXPR) == int(EXPR)> “ÀÌ“Áö“¸¸,
“ÀÌ“°Í“Àº “ºÎ“µ¿“¼Ò“¼ö“Á¡“À» “»ç“¿ë“ÇÒ “¶§“¿¡“¸¸ “¹®“Á¦“°¡ “µË“´Ï“´Ù. “¾Õ“ÀÇ “´Ü“¶ô“¿¡“¼­ “±â“¼ú“ÇÑ “°Í“Ã³“·³
“¸í“½Ã“Àû“À¸“·Î C<$.>“À» “»ç“¿ë“ÇÑ “°æ“¿ì, “ºñ“±³“´Â C<int(EXPR) == int($.)> “°¡ “µÇ“°í,
C<$.> “¿¡ “ºÎ“µ¿“¼Ò“¼ö“Á¡“ÀÌ “µé“¾î“°¡“¸é, “ÆÄ“ÀÏ“¿¡“¼­ “ÀÐ“¾î“µé“ÀÌ“Áö “¾Ê“À» “°æ“¿ì“¸¸ “¹®“Á¦“°¡ “µË“´Ï“´Ù.
“°Å“±â“¿¡, C<"span" .. "spat"> “ÀÌ“³ª C<2.18 .. 3.14> “´Â 
“°¢“°¢“ÀÇ “ÇÇ“¿¬“»ê“ÀÚ“°¡ “Á¤“¼ö“Ç¥“Çö“À» “»ç“¿ë“ÇØ “Æò“°¡“µÇ“±â“¿¡, “½º“Ä®“¶ó “ÄÁ“ÅØ“½º“Æ®“¿¡“¼­“´Â
“¹Ù“¶ó“´ø “´ë“·Î“ÀÇ “°á“°ú“°¡ “³ª“¿À“Áö “¾Ê“½À“´Ï“´Ù.

=begin original

Examples:

=end original

“ÖÇ:

=begin original

As a scalar operator:

=end original

“½º“Ä®“¶ó“¿¬“»ê“ÀÚ“·Î“½á:

    if (101 .. 200) { print; } # print 2nd hundred lines, short for
                               #   if ($. == 101 .. $. == 200) ...

    next LINE if (1 .. /^$/);  # skip header lines, short for
                               #   ... if ($. == 1 .. /^$/);
                               # (typically in a loop labeled LINE)

    s/^/> / if (/^$/ .. eof());  # quote body

    # parse mail messages
    while (<>) {
        $in_header =   1  .. /^$/;
        $in_body   = /^$/ .. eof;
        if ($in_header) {
            # ...
        } else { # in body
            # ...
        }
    } continue {
        close ARGV if eof;             # reset $. each file
    }

=begin original

Here's a simple example to illustrate the difference between
the two range operators:

=end original

“¾Æ“·¡“´Â “µÎ“°³“ÀÇ “¹ü“À§“¿¬“»ê“ÀÚ“ÀÇ “´Ù“¸§“Á¡“À» “³ª“Å¸“³»“´Â “´Ü“¼ø“ÇÑ “¿¹“ÀÔ“´Ï“´Ù:

    @lines = ("   - Foo",
              "01 - Bar",
              "1  - Baz",
              "   - Quux");

    foreach (@lines) {
        if (/0/ .. /1/) {
            print "$_\n";
        }
    }

=begin original

This program will print only the line containing "Bar". If
the range operator is changed to C<...>, it will also print the
"Baz" line.

=end original

“ÀÌ “ÇÁ“·Î“±×“·¥“Àº "Bar" “¸¦ “Æ÷“ÇÔ“ÇÑ “ÁÙ“¸¸ “Ç¥“½Ã“ÇÕ“´Ï“´Ù.
“¹ü“À§“¿¬“»ê“ÀÚ“´Â C<...> “·Î “¹Ù“²Ù“¸é, "Baz"“ÀÇ “ÁÙ“¸¸ “Ç¥“½Ã“ÇÕ“´Ï“´Ù.

=begin original

And now some examples as a list operator:

=end original

“ÀÌ“°Í“Àº “¸®“½º“Æ®“¿¬“»ê“ÀÚ“ÀÇ “¿¹“Á¦“ÀÔ“´Ï“´Ù.

    for (101 .. 200) { print; }	# print $_ 100 times
    @foo = @foo[0 .. $#foo];	# an expensive no-op
    @foo = @foo[$#foo-4 .. $#foo];	# slice last 5 items

=begin original

The range operator (in list context) makes use of the magical
auto-increment algorithm if the operands are strings.  You
can say

=end original

(“¸®“½º“Æ® “ÄÁ“ÅØ“½º“Æ®“¿¡“¼­“ÀÇ) “¹ü“À§“¿¬“»ê“ÀÚ“´Â “ÇÇ“¿¬“»ê“ÀÚ“°¡ “¹®“ÀÚ“¿­“ÀÏ “¶§“¿¡“´Â
“¸Å“Áö“ÄÃ “Áõ“°¡“ÀÇ “±â“´É“À» “»ç“¿ë“ÇÕ“´Ï“´Ù.
“¾Æ“·¡“¿Í “°°“ÀÌ “¾²“¸é :

    @alphabet = ('A' .. 'Z');

=begin original

to get all normal letters of the English alphabet, or

=end original

“¿µ“¾î“ÀÇ “´ë“¹®“ÀÚ “Àü“ºÎ“¸¦ “¾ò“À» “¼ö “ÀÖ“°í:

    $hexdigit = (0 .. 9, 'a' .. 'f')[$num & 15];

=begin original

to get a hexadecimal digit, or

=end original

“¶ó“°í “¾²“¸é, 16“Áø“¼ö“¸¦ “¾ò“À» “¼ö “ÀÖ“°í,

    @z2 = ('01' .. '31');  print $z2[$mday];

=begin original

to get dates with leading zeros.

=end original

“·Î “ÇÏ“¸é, 0“ÀÌ “ºÙ“Àº “³¯“Â¥“¸¦ “¾ò“À» “¼ö “ÀÖ“½À“´Ï“´Ù.

=begin original

If the final value specified is not in the sequence that the magical
increment would produce, the sequence goes until the next value would
be longer than the final value specified.

=end original

“¸Å“Áö“ÄÃ“Áõ“°¡“¿¡ “ÀÇ“ÇØ “¾ò“À» “¼ö “ÀÖ“´Â “°ª “Áß“¿¡ “Áö“Á¤“ÇÑ “ÃÖ“Á¾“°ª“¿¡ “Á¤“È®“È÷
“ÀÏ“Ä¡“ÇÏ“´Â “°Í“ÀÌ “º¸“ÀÌ“Áö“¾Ê“µµ“·Ï “ÇÒ “°æ“¿ì“¿¡“´Â,
“¸Å“Áö“ÄÃ “Áõ“°¡“¿¡“ÀÇ“ÇØ “¾ò“À» “¼ö “ÀÖ“´Â “´Ù“À½“ÀÇ “°ª“ÀÇ “¹®“ÀÚ“¿­“±æ“ÀÌ“°¡
“ÃÖ“Á¾“°ª“À¸“·Î“½á “Áö“Á¤“µÈ “°ª“º¸“´Ù “±æ “¶§ “Áõ“°¡“°¡ “°è“¼Ó“µË“´Ï“´Ù.

=begin original

If the initial value specified isn't part of a magical increment
sequence (that is, a non-empty string matching "/^[a-zA-Z]*[0-9]*\z/"),
only the initial value will be returned.  So the following will only
return an alpha:

=end original

If the initial value specified isn't part of a magical increment
sequence (that is, a non-empty string matching "/^[a-zA-Z]*[0-9]*\z/"),
only the initial value will be returned.  So the following will only
return an alpha:
(TBT)

    use charnames 'greek';
    my @greek_small =  ("\N{alpha}" .. "\N{omega}");

=begin original

To get lower-case greek letters, use this instead:

=end original

“¼Ò“¹®“ÀÚ“ÀÇ “±×“¸®“½º“¹®“ÀÚ“¸¦ “¾ò“±â “À§“ÇØ“¼­“´Â, “¾Æ“·¡“¿Í “°°“ÀÌ “ÇØ“ÁÖ“¼¼“¿ä.

    my @greek_small =  map { chr } ( ord("\N{alpha}") .. ord("\N{omega}") );

=begin original

Because each operand is evaluated in integer form, C<2.18 .. 3.14> will
return two elements in list context.

=end original

“°¢“°¢“ÀÇ “ÇÇ“¿¬“»ê“ÀÚ“´Â “Á¤“¼ö“ÀÇ “Çü“ÅÂ“¿¡“¼­ “Æò“°¡“µÇ“±â“¶§“¹®“¿¡ C<2.18 .. 3.14> “´Â
“¸®“½º“Æ® “ÄÁ“ÅØ“½º“Æ®“¿¡“¼­“´Â “µÎ“°³“ÀÇ “¿ä“¼Ò“°¡ “¹Ý“È¯“ÇÕ“´Ï“´Ù.

    @list = (2.18 .. 3.14); # same as @list = (2 .. 3);

=head2 Conditional Operator
X<operator, conditional> X<operator, ternary> X<ternary> X<?:>

(“Á¶“°Ç “¿¬“»ê“ÀÚ)

=begin original

Ternary "?:" is the conditional operator, just as in C.  It works much
like an if-then-else.  If the argument before the ? is true, the
argument before the : is returned, otherwise the argument after the :
is returned.  For example:

=end original

“»ï“Ç×“¿¬“»ê“ÀÚ“ÀÇ "?:"“´Â, C “ÀÇ “°æ“¿ì“¿Í “°°“ÀÌ “Á¶“°Ç“¿¬“»ê“ÀÚ“ÀÔ“´Ï“´Ù.
“ÀÌ“°Í“Àº if-then-ele “¿Í “°°“ÀÌ “¿ò“Á÷“ÀÔ“´Ï“´Ù.
"?" “ÀÇ “¾Õ“ÀÇ “ÀÎ“¼ö“°¡ "“Âü"“ÀÏ “°æ“¿ì ":" “ÀÇ “¾Õ“ÀÇ “ÀÎ“¼ö“°¡ “¹Ý“È¯“µÇ“Áö“¸¸,
"“Âü"“ÀÌ “µÇ“¸é, ":"“ÀÇ “µÚ“ÀÇ “ÀÎ“¼ö“°¡ “¹Ý“È¯“µË“´Ï“´Ù.

    printf "I have %d dog%s.\n", $n,
	    ($n == 1) ? '' : "s";

=begin original

Scalar or list context propagates downward into the 2nd
or 3rd argument, whichever is selected.

=end original

“½º“Ä®“¶ó “È¤“Àº “¸®“½º“Æ® “ÄÁ“ÅØ“½º“Æ®“ÀÎ“°¡ “ÇÏ“´Â “»ó“È²“Àº
“¼±“ÅÃ“µÈ 2“¹ø“Â° “È¤“Àº 3“¹ø“Â°“ÀÇ “ÀÎ“¼ö“±î“Áö “Àü“´Þ“µË“´Ï“´Ù.

    $a = $ok ? $b : $c;  # get a scalar
    @a = $ok ? @b : @c;  # get an array
    $a = $ok ? @b : @c;  # oops, that's just a count!

=begin original

The operator may be assigned to if both the 2nd and 3rd arguments are
legal lvalues (meaning that you can assign to them):

=end original

2“¹ø“Â° “¿Í 3“¹ø“Â°“ÀÇ “ÀÎ“¼ö “¾ç“ÂÊ“ÀÌ “¿Þ“ÂÊ “°ª(“´ë“ÀÔ“°¡“´É“ÇÑ “°Í)“ÀÏ “°æ“¿ì,
“ÀÌ “¿¬“»ê“ÀÚ“¿¡ “´ë“ÀÔ“À» “ÇÒ “¼ö “ÀÖ“½À“´Ï“´Ù.

    ($a_or_b ? $a : $b) = $c;

=begin original

Because this operator produces an assignable result, using assignments
without parentheses will get you in trouble.  For example, this:

=end original

“ÀÌ “¿¬“»ê“ÀÚ“´Â “´ë“ÀÔ“°¡“´É“ÇÑ “°á“°ú“¸¦ “Ãâ“·Â“ÇÏ“±â“¶§“¹®“¿¡,
“°ý“È£“°¡“¾ø“ÀÌ“µµ “´ë“ÀÔ“À» “¼ö“Çà“ÇÏ“¸é “ÀÌ“»ó“ÇÏ“°Ô “µÉ“Áö“µµ “¸ð“¸¨“´Ï“´Ù. “¿¹“¸¦ “µé“¾î:

    $a % 2 ? $a += 10 : $a += 2

=begin original

Really means this:

=end original

“´Â “¾Æ“·¡“¿Í “°°“Àº “ÀÇ“¹Ì“ÀÌ“°í,

    (($a % 2) ? ($a += 10) : $a) += 2

=begin original

Rather than this:

=end original

“¾Æ“·¡“¿Í “°°“ÀÌ“´Â “¾È“µË“´Ï“´Ù.

    ($a % 2) ? ($a += 10) : ($a += 2)

=begin original

That should probably be written more simply as:

=end original

“°£“´Ü“È÷ “¾Æ“·¡“¿Í “°°“ÀÌ “¾µ “¼ö “ÀÖ“½À“´Ï“´Ù.

    $a += ($a % 2) ? 10 : 2;

=head2 Assignment Operators
X<assignment> X<operator, assignment> X<=> X<**=> X<+=> X<*=> X<&=>
X<<< <<= >>> X<&&=> X<-=> X</=> X<|=> X<<< >>= >>> X<||=> X<//=> X<.=>
X<%=> X<^=> X<x=>

(“´ë“ÀÔ “¿¬“»ê“ÀÚ)

=begin original

"=" is the ordinary assignment operator.

=end original

"=" “´Â “º¸“Åë“ÀÇ “´ë“ÀÔ“¿¬“»ê“ÀÚ“ÀÔ“´Ï“´Ù. 

=begin original

Assignment operators work as in C.  That is,

=end original

“´ë“ÀÔ“¿¬“»ê“ÀÚ“´Â C “ÀÇ“°æ“¿ì“¿Í “°°“Àº “¼ö“Çà“À» “ÇÕ“´Ï“´Ù. “Áï,

    $a += 2;

=begin original

is equivalent to

=end original

“´Â “¾Æ“·¡“¿Í “°°“½À“´Ï“´Ù.

    $a = $a + 2;

=begin original

although without duplicating any side effects that dereferencing the lvalue
might trigger, such as from tie().  Other assignment operators work similarly.
The following are recognized:

=end original

“±×“·¯“³ª tie() “°°“Àº “°Í“¿¡“¼­ “¹ß“»ý“ÇÏ“´Â “¿Þ“ÂÊ “°ª“ÀÇ “ÇÇ“Âü“Á¶“¿¡ “ÀÇ“ÇÑ
“ºÎ“ÀÛ“¿ë“ÀÌ “µÎ “¹ø “¹ß“»ý“ÇÏ“´Â “°æ“¿ì“´Â “¾ø“½À“´Ï“´Ù.
“´Ù“¸¥ “´ë“ÀÔ“¿¬“»ê“µµ “°°“½À“´Ï“´Ù. 

    **=    +=    *=    &=    <<=    &&=
           -=    /=    |=    >>=    ||=
           .=    %=    ^=           //=
                 x=

=begin original

Although these are grouped by family, they all have the precedence
of assignment.

=end original

“±×“·ì“À» “³ª“´³“Áö“¸¸, “ÀÌ“°Í“µé“Àº “´ë“ÀÔ“¿¬“»ê“ÀÚ“¿Í “°°“Àº “¿ì“¼±“¼ø“À§“ÀÔ“´Ï“´Ù.

=begin original

Unlike in C, the scalar assignment operator produces a valid lvalue.
Modifying an assignment is equivalent to doing the assignment and
then modifying the variable that was assigned to.  This is useful
for modifying a copy of something, like this:

=end original

C “¿Í“´Þ“¸® “½º“Ä®“¶ó“´ë“ÀÔ“¿¬“»ê“ÀÚ“´Â “À¯“È¿“ÇÑ “ÁÌ“ÂÊ “°ª“À» “¸¸“µé“¾î“³À“´Ï“´Ù.
“´ë“ÀÔ“À» “¼ö“Á¤“ÇÏ“´Â “°Í“Àº “´ë“ÀÔ“À» “ÇÏ“°í“³­ “µÚ, “±× “´ë“ÀÔ“µÈ “º¯“¼ö“¸¦ “¼ö“Á¤“ÇÏ“´Â “°Í“°ú
“°°“½À“´Ï“´Ù.
“ÀÌ“°Í“Àº “¾Æ“·¡“Ã³“·³ “¹º“°¡“ÀÇ “º¹“»ç“Ã¼“¸¦ “º¯“°æ“ÇÏ“°í “½Í“À» “¶§ “Æí“¸®“ÇÕ“´Ï“´Ù.

    ($tmp = $global) =~ tr [A-Z] [a-z];

=begin original

Likewise,

=end original

“ÀÌ“Ã³“·³,

    ($a += 2) *= 3;

=begin original

is equivalent to

=end original

“´Â “¾Æ“·¡“¿Í “°°“½À“´Ï“´Ù.

    $a += 2;
    $a *= 3;

=begin original

Similarly, a list assignment in list context produces the list of
lvalues assigned to, and a list assignment in scalar context returns
the number of elements produced by the expression on the right hand
side of the assignment.

=end original

“ÀÌ“¿Í “°°“ÀÌ “¸®“½º“Æ®“ÄÁ“ÅØ“½º“Æ®“¿¡“¼­“ÀÇ “¸®“½º“Æ®“¿¡“ÀÇ “´ë“ÀÔ“Àº “´ë“ÀÔ“°¡“´É“ÇÑ “¿Þ“ÂÊ “°ª“ÀÇ
“¸®“½º“Æ®“¿Í “°°“°Ô “½º“Ä®“¶ó“ÄÁ“ÅØ“½º“Æ®“¿¡“¼­“ÀÇ “¸®“½º“Æ®“¿¡“ÀÇ “´ë“ÀÔ“Àº “´ë“ÀÔ“ÀÇ “¿À“¸¥“ÂÊ“ÀÇ “½Ä“À¸“·Î
“ÀÛ“¼º“µÈ “¿ä“¼Ò“ÀÇ “°ª“À» “¹Ý“È¯“ÇÕ“´Ï“´Ù.

=head2 Comma Operator
X<comma> X<operator, comma> X<,>

(“ÄÞ“¸¶ “¿¬“»ê“ÀÚ)

=begin original

Binary "," is the comma operator.  In scalar context it evaluates
its left argument, throws that value away, then evaluates its right
argument and returns that value.  This is just like C's comma operator.

=end original

“ÀÌ“Ç×“¿¬“»ê“ÀÚ“ÀÎ "," “´Â “ÄÞ“¸¶“¿¬“»ê“ÀÚ“ÀÔ“´Ï“´Ù.
“½º“Ä®“¶ó “ÄÁ“ÅØ“½º“Æ®“¿¡“¼­“´Â “±× “¿Þ“ÂÊ“ÀÎ“¼ö“¸¦ “Æò“°¡“ÇØ “±× “°ª“À» “¹ö“¸®“°í,
“¿À“¸¥“ÂÊ “ÀÎ“¼ö“¸¦ “Æò“°¡“ÇØ, “±× “°ª“À» “¹Ý“È¯“ÇÕ“´Ï“´Ù.
C“ÀÇ “ÄÞ“¸¶ “¿¬“»ê“ÀÚ“¿Í “°°“½À“´Ï“´Ù.

=begin original

In list context, it's just the list argument separator, and inserts
both its arguments into the list.  These arguments are also evaluated
from left to right.

=end original

“¸®“½º“Æ®“ÄÁ“ÅØ“½º“Æ®“¿¡“¼­“´Â “´Ü“¼ø“ÇÑ “¸®“½º“Æ® “ÀÎ“¼ö“ÀÇ “¿µ“¿ª“³ª“´®“¹®“ÀÚ“·Î
“¾ç“ÂÊ“ÀÇ “ÀÎ“¼ö“À» “±× “¸®“½º“Æ®“¿¡ “»ð“ÀÔ“ÇÕ“´Ï“´Ù.
“ÀÌ“·± “ÀÎ“¼ö“µµ “¿À“¸¥“ÂÊ“¿¡“¼­ “¿Þ“ÂÊ“À¸“·Î “Æò“°¡“µË“´Ï“´Ù.

=begin original

The C<< => >> operator is a synonym for the comma, but forces any word
(consisting entirely of word characters) to its left to be interpreted
as a string (as of 5.001).  This includes words that might otherwise be
considered a constant or function call.

=end original

C<< => >> “¿¬“»ê“ÀÚ“´Â “ÄÞ“¸¶ “¿¬“»ê“ÀÚ“ÀÇ “µ¿“ÀÇ“¾î“ÀÌ“Áö“¸¸, (5.001 “ÀÌ“ÈÄ) “ÁÂ“º¯“Ä¡“ÀÇ “´Ü“¾î
(“´Ü“¾î“¹®“ÀÚ“·Î “±¸“¼º“µÈ “Àü“Ã¼) “¸¦ “¸¸“µå“½Ã “¹®“ÀÚ“¿­“·Î“½á “Ãë“±Þ“ÇÏ“´Â “È¿“°ú“°¡ “ÀÖ“½À“´Ï“´Ù.
“ÀÌ“°Í“¿¡“´Â “´Ù“¸¥ “°÷“¿¡“¼­“´Â “Á¤“ÇØ“Áø “°ª“ÀÌ“³ª “ÇÔ“¼ö“È£“Ãâ“·Î“½á “Ãë“±Þ“µÇ“´Â “´Ü“¾î“µµ “Æ÷“ÇÔ“µË“´Ï“´Ù.

    use constant FOO => "something";

    my %h = ( FOO => 23 );

=begin original

is equivalent to:

=end original

“´Â “¾Æ“·¡“¿Í “°°“½À“´Ï“´Ù.

    my %h = ("FOO", 23);

=begin original

It is I<NOT>:

=end original

“ÀÌ“°Í“Àº I<“´Ù“¸¨“´Ï“´Ù>:

    my %h = ("something", 23);

=begin original

If the argument on the left is not a word, it is first interpreted as
an expression, and then the string value of that is used.

=end original

“¿Þ“ÂÊ“ÀÇ “ÀÎ“¼ö“°¡ “´Ü“¾î“°¡ “¾Æ“´Ñ “°æ“¿ì, “¿ì“¼±“Àº “½Ä“À¸“·Î“½á “ÇØ“¼®“µÇ“°í,
“ÇØ“¼®“µÈ “°ª“À» “»ç“¿ë“ÇÑ “¹®“ÀÚ“¿­“°ª“À¸“·Î“½á “ÇØ“¼®“µË“´Ï“´Ù.

=begin original

The C<< => >> operator is helpful in documenting the correspondence
between keys and values in hashes, and other paired elements in lists.

=end original

C<< => >> “¿¬“»ê“ÀÚ“´Â, “ÇØ“½¬“ÀÇ “Å°“¿Í “°ª“ÀÌ“³ª “±× “¿Ü“ÀÇ “¸®“½º“Æ® “¾È“ÀÇ “¿ä“¼Ò“ÀÇ “°ü“°è“°¡
“Ç¥“Çö“ÇÏ“´Â “µ¥ “Æí“¸®“ÇÕ“´Ï“´Ù.

        %hash = ( $key => $value );
        login( $username => $password );

=head2 List Operators (Rightward)
X<operator, list, rightward> X<list operator>

(“¸®“½º“Æ® “¿¬“»ê“ÀÚ(“¿À“¸¥“ÂÊ“¹æ“Çâ)) 

=begin original

On the right side of a list operator, it has very low precedence,
such that it controls all comma-separated expressions found there.
The only operators with lower precedence are the logical operators
"and", "or", and "not", which may be used to evaluate calls to list
operators without the need for extra parentheses:

=end original

“¸®“½º“Æ®“¿¬“»ê“ÀÚ“ÀÇ “¿À“¸¥“ÂÊ“ÀÇ “°æ“¿ì, “¸®“½º“Æ® “¿¬“»ê“ÀÚ“´Â “¾Æ“ÁÖ “³·“Àº “¿ì“¼±“¼ø“À§“°¡ “µË“´Ï“´Ù.
“ÀÌ“¿¡ “ÀÇ“ÇØ “ÄÞ“¸¶“·Î “³ª“´¶ “½Ä“À» “¸®“½º“Æ®“¿¬“»ê“ÀÚ“ÀÇ “ÀÎ“¼ö“·Î“½á “µÎ“´Â “°Í“ÀÌ “°¡“´É“ÇÕ“´Ï“´Ù.
“ÀÌ“º¸“´Ù“µµ “¿ì“¼±“¼ø“À§“°¡ “´Ê“Àº “°Í“Àº “³í“¸® “¿¬“»ê“ÀÚ“ÀÇ "and", "or", "not"“À¸“·Î,
“³²“Àº “°ý“È£“¸¦ “ºÙ“ÀÌ“Áö “¾Ê“Àº “¸®“½º“Æ®“¿¬“»ê“ÀÚ“ÀÇ “È£“Ãâ“À» “Æò“°¡“ÇÏ“±â“À§“ÇØ “»ç“¿ë“ÇÒ “¼ö “ÀÖ“½À“´Ï“´Ù:

    open HANDLE, "filename"
	or die "Can't open: $!\n";

=begin original

See also discussion of list operators in L<Terms and List Operators (Leftward)>.

=end original

L<Terms and List Operators (Leftward)> “ÀÇ “¸®“½º“Æ®“¿¬“»ê“ÀÚ“ÀÇ “ÀÇ“·Ð“µµ “Âü“Á¶“ÇØ“ÁÖ“¼¼“¿ä. 

=head2 Logical Not
X<operator, logical, not> X<not>

(“³í“¸® “ºÎ“Á¤)
=begin original

Unary "not" returns the logical negation of the expression to its right.
It's the equivalent of "!" except for the very low precedence.

=end original

“´Ü“Ç×“¿¬“»ê“ÀÚ“ÀÇ "not" “Àº “¿À“¸¥“ÂÊ“¿¡ “¿À“´Â “½Ä“ÀÇ “ºÎ“Á¤“À» “¹Ý“È¯“ÇÕ“´Ï“´Ù.
“ÀÌ“°Í“Àº “¿ì“¼±“¼ø“À§“°¡ “°è“¼Ó “³·“Àº “°Í“À» “»©“°í“´Â "!"“¿Í “°°“½À“´Ï“´Ù.

=head2 Logical And
X<operator, logical, and> X<and>

(“Öå“×â“îÝ)

=begin original

Binary "and" returns the logical conjunction of the two surrounding
expressions.  It's equivalent to && except for the very low
precedence.  This means that it short-circuits: i.e., the right
expression is evaluated only if the left expression is true.

=end original

“ÀÌ“Ç×“¿¬“»ê“ÀÚ“ÀÇ "and" “´Â “¾ç“ÂÊ“ÀÇ “½Ä“ÀÇ “³í“¸®“°ö“À» “¹Ý“È¯“ÇÕ“´Ï“´Ù.
“ÀÌ“°Í“Àº “¿ì“¼±“¼ø“À§“°¡ “°è“¼Ó “³·“Àº “°Í“À» “»©“¸é "&&"“¿Í “°°“½À“´Ï“´Ù.
“Áï, “ÀÌ“°Í“µµ “´Ü“¶ô“¿¬“»ê“À» “¼ö“Çà“ÇÏ“°í, “¿À“¸¥“ÂÊ “½Ä“Àº “¿Þ“ÂÊ“ÀÇ “½Ä“ÀÌ
"“Âü"“ÀÎ “°æ“¿ì“¿¡“¸¸ “Æò“°¡“µË“´Ï“´Ù.

=head2 Logical or, Defined or, and Exclusive Or
X<operator, logical, or> X<operator, logical, xor>
X<operator, logical, defined or> X<operator, logical, exclusive or>
X<or> X<xor>

(“³í“¸®“ÇÕ“°ú “Á¤“ÀÇ“¼º“ÇÕ“°ú “¹è“Å¸“³í“¸®“ÇÕ)

=begin original

Binary "or" returns the logical disjunction of the two surrounding
expressions.  It's equivalent to || except for the very low precedence.
This makes it useful for control flow

=end original

“ÀÌ“Ç×“¿¬“»ê“ÀÚ“ÀÇ "or" “´Â “¾ç“ÂÊ“ÀÇ “½Ä“ÀÇ “³í“¸®“ÇÕ“À» “¹Ý“È¯“ÇÕ“´Ï.
“ÀÌ“°Í“Àº “¿ì“¼±“¼ø“À§“°¡ “°è“¼Ó “³·“Àº “°Í“À» “»©“°í“´Â "||"“°ú “°°“½À“´Ï“´Ù.
“ÀÌ“°Í“Àº “Èå“¸§“À» “Á¦“¾î“ÇÏ“±â“¿¡ “ÁÁ“½À“´Ï“´Ù.

    print FH $data		or die "Can't write to FH: $!";

=begin original

This means that it short-circuits: i.e., the right expression is evaluated
only if the left expression is false.  Due to its precedence, you should
probably avoid using this for assignment, only for control flow.

=end original

“Áï, “ÀÌ“°Í“µµ “´Ü“¶ô“¿¬“»ê“À» “¼ö“Çà“ÇÏ“°í, “¿À“¸¥“ÂÊ“ÀÇ “½Ä“°ú “¿Þ“ÂÊ“ÀÇ “½Ä“ÀÌ
"“°Å“Áþ"“ÀÏ “°æ“¿ì“¿¡“¿¡“¸¸ “Æò“°¡“µË“´Ï“´Ù.
“¿ì“¼±“µµ “°ü“°è“¿¡“¼­ “ÀÌ“°Í“Àº “´ë“ÀÔ“¿¡“´Â “»ç“¿ë“ÇÏ“Áö “¾Ê“°í
“Èå“¸§“Á¦“¾î“¿¡“¼­“¸¸ “»ç“¿ë“ÇØ“¾ß “ÇÕ“´Ï“´Ù.

    $a = $b or $c;		# bug: this is wrong
    ($a = $b) or $c;		# really means this
    $a = $b || $c;		# better written this way

=begin original

However, when it's a list-context assignment and you're trying to use
"||" for control flow, you probably need "or" so that the assignment
takes higher precedence.

=end original

“ÇÏ“Áö“¸¸, “´ë“ÀÔ“ÀÌ “¸®“¤µ“Æ®“ÄÁ“ÅØ“½º“Æ®“ÀÏ “¶§“´Â "||" “¸¦ “Èå“¸§“Á¦“¾î“¿¡ “»ç“¿ë“ÇÒ “°æ“¿ì,
“´ë“ÀÔ“¿¡ “ÀÇ“ÇÑ “Å« “¿ì“¼±“¼ø“À§“¸¦ “°¡“Áö“°Ô“ÇÏ“±â “À§“ÇØ "or" “°¡ “ÇÊ“¿ä“ÇÒ“Áö“µµ “¸ð“¸¨“´Ï“´Ù.

    @info = stat($file) || die;     # oops, scalar sense of stat!
    @info = stat($file) or die;     # better, now @info gets its due

=begin original

Then again, you could always use parentheses.

=end original

“¹°“·Ð, “±×“³É “°ý“È£“¸¦ “ºÙ“¿©“µµ “µË“´Ï“´Ù.

=begin original

Binary "xor" returns the exclusive-OR of the two surrounding expressions.
It cannot short circuit, of course.

=end original

“ÀÌ“Ç×“¿¬“»ê“ÀÚ“ÀÎ "xor" “Àº “¾ç“ÂÊ“ÀÇ “½Ä“ÀÇ “¹è“Å¸“³í“¸®“ÇÕ“À» “¹Ý“È¯“ÇÕ“´Ï“´Ù.
“ÀÌ“°Í“Àº “¹°“·Ð, “´Ü“¶ô“µµ “¾Æ“´Õ“´Ï“´Ù.

=head2 C Operators Missing From Perl
X<operator, missing from perl> X<&> X<*>
X<typecasting> X<(TYPE)>

(Perl “¿¡ “¾ø“´Â C “ÀÇ “¿¬“»ê“ÀÚ)

=begin original

Here is what C has that Perl doesn't:

=end original

C “¿¡ “ÀÖ“°í Perl “¿¡ “¾ø“´Â “°Í“Àº “¾Æ“·¡“¿Í “°°“½À“´Ï“´Ù.

=over 8

=item unary &

=begin original

Address-of operator.  (But see the "\" operator for taking a reference.)

=end original

“ÁÖ“¼Ò“¿¬“»ê“ÀÚ ("\" “¿¬“»ê“ÀÚ“°¡ “¸®“ÆÛ“·±“½º“ÇÒ“¶§ “»ç“¿ë“ÇÒ “¼ö “ÀÖ“½À“´Ï“´Ù)

=item unary *

=begin original

Dereference-address operator. (Perl's prefix dereferencing
operators are typed: $, @, %, and &.)

=end original

“ÇÇ“ÁÖ“¼Ò“Âü“Á¶“¿¬“»ê“ÀÚ ( Perl “ÀÇ “ÇÇ“Âü“Á¶“¼­“µÎ“¿¬“»ê“ÀÚ“°¡ “Çü“ÅÂ“¸¦ “Áþ“½À“´Ï“´Ù : $, @, %, &)

=item (TYPE)

=begin original

Type-casting operator.

=end original

“Çü“ÅÂ“ÀÇ “Ä³“½º“Æ® “¿¬“»ê“ÀÚ

=back

=head2 Quote and Quote-like Operators
X<operator, quote> X<operator, quote-like> X<q> X<qq> X<qx> X<qw> X<m>
X<qr> X<s> X<tr> X<'> X<''> X<"> X<""> X<//> X<`> X<``> X<<< << >>>
X<escape sequence> X<escape>

(“ÀÎ“¿ë“°ú “ÀÎ“¿ë“°°“Àº “¿¬“»ê“ÀÚ)

=begin original

While we usually think of quotes as literal values, in Perl they
function as operators, providing various kinds of interpolating and
pattern matching capabilities.  Perl provides customary quote characters
for these behaviors, but also provides a way for you to choose your
quote character for any of them.  In the following table, a C<{}> represents
any pair of delimiters you choose.

=end original

“ÀÎ“¿ë“Àº “¸®“ÅÍ“·² “°ª“ÀÌ“¸é “»ý“°¢“ÇÏ“´Â“°Ô “Æò“¹ü“ÇÏ“Áö“¸¸, Perl “¿¡“¼­“´Â
“ÀÎ“¿ë“Àº “¿¬“»ê“ÀÚ“·Î “¿ò“Á÷“ÀÌ“°í, “¿©“·¯“°¡“Áö “Àü“°³“³ª “ÆÐ“ÅÏ“¸Å“Ä¡“ÀÇ “±â“´É“À» “°¡“Áö“°í “ÀÖ“½À“´Ï“´Ù.
“±×“¿Í “°°“Àº “µ¿“ÀÛ“À» “ÇÏ“±â“¿¡“´Â, Perl “Àº “½À“°ü“Àû“À¸“·Î “ÀÎ“¿ë“¹®“ÀÚ“¸¦ “»ç“¿ë“ÇÏ“Áö“¸¸
“¾î“¶² “Á¾“·ù“ÀÇ “ÀÎ“¿ë“µµ “ÀÚ“½Å“ÀÇ “ÀÎ“¿ë“¹®“ÀÚ“¸¦ “¼±“ÅÃ“ÇÒ “¼ö “ÀÖ“°Ô “µË“´Ï“´Ù.
“¾Æ“·¡“ÀÇ “Ç¥“¿¡“¼­“´Â {}“°¡ “¼±“ÅÃ“ÇÑ “±¸“ºÐ“ÀÚ“ÀÇ “½Ö“À» “Ç¥“½Ã“ÇÕ“´Ï“´Ù.

=begin original

    Customary  Generic        Meaning	     Interpolates
	''	 q{}	      Literal		  no
	""	qq{}	      Literal		  yes
	``	qx{}	      Command		  yes*
		qw{}	     Word list		  no
	//	 m{}	   Pattern match	  yes*
		qr{}	      Pattern		  yes*
		 s{}{}	    Substitution	  yes*
		tr{}{}	  Transliteration	  no (but see below)
        <<EOF                 here-doc            yes*

	* unless the delimiter is ''.

=end original

     “º¸“Åë“Ç¥“±â  “¹ü“¿ë“Ç¥“±â        “ÀÇ“¹Ì             “Àü“°³
    =================================================
	''	 q{}	     “¸®“ÅÍ“·²		“ºÒ“°¡
        ""	qq{}	     “¸®“ÅÍ“·²		“°¡“´É
	``	qx{}	     “Ä¿“¸Ç“µå		“°¡“´É *
		qw{}	     “´Ü“¾î“¸®“½º“Æ®		“ºÒ“°¡
        //	 m{}	     “ÆÐ“ÅÏ“¸Å“Ä¡	        “°¡“´É *
		qr{}	     “ÆÐ“ÅÏ		“°¡“´É *
		 s{}{}	     “Ä¡“È¯		“°¡“´É *
		tr{}{}	     “º¯“È¯		“ºÒ“°¡ (“´Ü, “¾Æ“·¡“Âü“Á¶)
       <<EOF                  Here-doc          “°¡“´É *

	* ''“°¡ “±¸“ºÐ“ÀÚ“°¡ “¾Æ“´Ñ “°æ“¿ì 

=begin original

Non-bracketing delimiters use the same character fore and aft, but the four
sorts of brackets (round, angle, square, curly) will all nest, which means
that

=end original

“¼±“ÅÃ“µÈ “¿µ“¿ª“³ª“´®“¹®“ÀÚ“°¡ “°ý“È£“ÀÇ “Á¾“·ù“°¡ “¾Æ“´Ñ“°æ“¿ì“¿¡“´Â “Àü“ÈÄ“ÀÇ “¹®“ÀÚ“·Î“½á “µ¿“ÀÏ“ÇÑ “°Í“À»
“»ç“¿ë“ÇÏ“Áö“¸¸, 4“°³“ÀÇ “°ý“È£ ((), <>, [], {})“ÀÇ “°æ“¿ì“¿¡“´Â “µ¿“ÀÏ“ÇÏ“°Ô “»ç“¿ë“ÇÒ “¼ö “ÀÖ“½À“´Ï“´Ù.
“Áï, “¾Æ“·¡“¿Í “°°“Àº “°Í“Àº 

	q{foo{bar}baz}

=begin original

is the same as

=end original

“ÀÌ“°Í“°ú “°°“½À“´Ï“´Ù.

	'foo{bar}baz'

=begin original

Note, however, that this does not always work for quoting Perl code:

=end original

“±×“·¯“¤¿, “¾Æ“·¡“ÀÇ “ÄÚ“µå“´Â “ÀÎ“¿ë“µÈ Perl “ÄÚ“µå “¿¡“¼­“´Â “Ç×“»ó “¹Ù“¸£“°Ô “¿ò“Á÷“ÀÌ“Áö
“¾Ê“´Â “°Í“¿¡ “´ë“ÇØ “ÁÖ“ÀÇ“ÇØ “ÁÖ“¼¼“¿ä

	$s = q{ if($a eq "}") ... }; # WRONG

=begin original

is a syntax error. The C<Text::Balanced> module (from CPAN, and
starting from Perl 5.8 part of the standard distribution) is able
to do this properly.

=end original

“ÀÌ“°Í“Àº “¹®“¹ý“¿¡“·¯“°¡ “µË“´Ï“´Ù.
C<Text::Balanced> “¸ð“µâ (CPAN “¿¡“¼­ “È¤“Àº Perl 5.8“¿¡“¼­“´Â “Ç¥“ÁØ“¹è“Ä¡“¸ð“µâ)“Àº
“ÀÌ“°Í“À» “Àû“Àý“ÇÏ“°Ô “¼ö“Çà“ÇÕ“´Ï“´Ù.

=begin original

There can be whitespace between the operator and the quoting
characters, except when C<#> is being used as the quoting character.
C<q#foo#> is parsed as the string C<foo>, while C<q #foo#> is the
operator C<q> followed by a comment.  Its argument will be taken
from the next line.  This allows you to write:

=end original

“¿¬“»ê“ÀÚ“´Â “ÀÎ“¿ë“¹®“ÀÚ“ÀÇ “»ç“ÀÌ“¿¡ “°ø“¹é“À» “³Ö“À» “¼ö “ÀÖ“½À“´Ï“´Ù.
“´Ü“Áö C<#>“À» “ÀÎ“¿ë“¹®“ÀÚ“·Î “»ç“¿ë“ÇÒ “°æ“¿ì“´Â “¿¹“¿Ü“ÀÔ“´Ï“´Ù.
C<q#foo#> “´Â “¹®“ÀÚ“¿­ C<foo> “·Î “ÇØ“¼®“µÇ“Áö“¸¸, 
C<q #foo#> “´Â C<q> “¿¬“»ê“ÀÚ“ÀÇ “µÚ“ÀÇ “ÄÚ“¸à“Æ®“°¡ “ÀÖ“À¸“¸é “¹«“½Ã“ÇÕ“´Ï“´Ù.
“ÀÌ “ÀÎ“¼ö“´Â “´Ù“À½ “ÁÙ“¿¡“¼­ “¾ò“À» “¼ö “ÀÖ“½À“´Ï“´Ù. “Áï, “¾Æ“·¡“¿Í “°°“ÀÌ “¾¹“´Ï“´Ù:

    s {foo}  # Replace foo
      {bar}  # with bar.

=begin original

The following escape sequences are available in constructs that interpolate
and in transliterations.
X<\t> X<\n> X<\r> X<\f> X<\b> X<\a> X<\e> X<\x> X<\0> X<\c> X<\N>

=end original

“¾Æ“·¡“ÀÇ Escape Sequence“°¡ “Àü“°³“¿Í “¹®“ÀÚ“º¯“È¯“ÀÇ “±¸“¹®“¿¡“¼­ “ÀÌ“¿ë“°¡“´É“ÇÕ“´Ï“´Ù.
X<\t> X<\n> X<\r> X<\f> X<\b> X<\a> X<\e> X<\x> X<\0> X<\c> X<\N>

=begin original

    \t		tab             (HT, TAB)
    \n		newline         (NL)
    \r		return          (CR)
    \f		form feed       (FF)
    \b		backspace       (BS)
    \a		alarm (bell)    (BEL)
    \e		escape          (ESC)
    \033	octal char	(example: ESC)
    \x1b	hex char	(example: ESC)
    \x{263a}	wide hex char	(example: SMILEY)
    \c[		control char    (example: ESC)
    \N{name}	named Unicode character

=end original

    \t          “ÅÇ                      (HT, TAB)
    \n          “ÁÙ“¹Ù“²Þ                  (NL)
    \r          “º¹“±Í                    (CR)
    \f          “Æä“ÀÌ“Áö“¹Ù“²Þ              (FF)
    \b          “¹é“½º“Æä“ÀÌ“½º              (BS)
    \a          “¾Ë“¶÷                    (BEL)
    \e          Escape                  (ESC)
    \033        8 “Áø“¼ö“·Î “Ç¥“Çö“µÈ “¹®“ÀÚ    (“¿¹: ESC)
    \x1b        16 “Áø“¼ö“·Î “Ç¥“Çö“µÈ “¹®“ÀÚ   (“¿¹: ESC)
    \x{263a}	16 “Áø“¼ö“·Î “Ç¥“Çö“µÈ “¿Í“ÀÌ“µå“¹®“ÀÚ (“¿¹: SMILEY)
    \c[         “ÄÁ“Æ®“·Ñ “¹®“ÀÚ             (“¿¹: ESC)
    \N{name}	“ÀÌ“¸§“ºÙ“Àº “À¯“´Ï“ÄÚ“µå “¹®“ÀÚ 

=begin original

The character following C<\c> is mapped to some other character by
converting letters to upper case and then (on ASCII systems) by inverting
the 7th bit (0x40). The most interesting range is from '@' to '_'
(0x40 through 0x5F), resulting in a control character from 0x00
through 0x1F. A '?' maps to the DEL character. On EBCDIC systems only
'@', the letters, '[', '\', ']', '^', '_' and '?' will work, resulting
in 0x00 through 0x1F and 0x7F.

=end original

The character following C<\c> is mapped to some other character by
converting letters to upper case and then (on ASCII systems) by inverting
the 7th bit (0x40). The most interesting range is from '@' to '_'
(0x40 through 0x5F), resulting in a control character from 0x00
through 0x1F. A '?' maps to the DEL character. On EBCDIC systems only
'@', the letters, '[', '\', ']', '^', '_' and '?' will work, resulting
in 0x00 through 0x1F and 0x7F.
(TBT)

=begin original

B<NOTE>: Unlike C and other languages, Perl has no \v escape sequence for
the vertical tab (VT - ASCII 11), but you may use C<\ck> or C<\x0b>.

=end original

B<“ÁÖ“ÀÇ>: C “³ª “±× “¿Ü“ÀÇ “¾ð“¾î“¿Í “´Þ“¸® Perl “Àº Vertical Tab (VT - ASCII 11)“À» “À§“ÇØ
\v Escape Sequence“´Â “¾ø“Áö“¸¸ , C<\ck> “È¤“Àº C<\x0b>“¸¦ “¾µ “¼ö “ÀÖ“½À“´Ï“´Ù.

=begin original

The following escape sequences are available in constructs that interpolate
but not in transliterations.
X<\l> X<\u> X<\L> X<\U> X<\E> X<\Q>

=end original

“¾Æ“·¡“ÀÇ Escape Sequence “´Â “Àü“°³“¿Í “¹®“ÀÚ“º¯“È¯“ÀÇ “±¸“¹®“¿¡“¼­ “ÀÌ“¿ë“°¡“´É“ÇÕ“´Ï“´Ù.
X<\l> X<\u> X<\L> X<\U> X<\E> X<\Q>

=begin original

    \l		lowercase next char
    \u		uppercase next char
    \L		lowercase till \E
    \U		uppercase till \E
    \E		end case modification
    \Q		quote non-word characters till \E

=end original

    \l          “´Ù“À½ “¹®“ÀÚ“¸¦ “¼Ò“¹®“ÀÚ“·Î “ÇÑ“´Ù 
    \u          “´Ù“À½ “¹®“ÀÚ“¸¦ “´ë“¹®“ÀÚ“·Î “ÇÑ“´Ù 
    \L          \E “±î“Áö “¼Ò“¹®“ÀÚ“·Î “ÇÑ“´Ù 
    \U          \E “±î“Áö “´ë“¹®“ÀÚ“·Î “ÇÑ“´Ù 
    \E          “º¯“°æ“ÀÇ “³¡ 
    \Q          \E “±î“Áö “ºñ“´Ü“¾î“¹®“ÀÚ“¸¦ “ÀÎ“¿ë“ÇÑ“´Ù 

=begin original

If C<use locale> is in effect, the case map used by C<\l>, C<\L>,
C<\u> and C<\U> is taken from the current locale.  See L<perllocale>.
If Unicode (for example, C<\N{}> or wide hex characters of 0x100 or
beyond) is being used, the case map used by C<\l>, C<\L>, C<\u> and
C<\U> is as defined by Unicode.  For documentation of C<\N{name}>,
see L<charnames>.

=end original

C<use locale> “°¡ “À¯“È¿“ÇÑ “°æ“¿ì, 
C<\l>, C<\L>, C<\u>, C<\U> “¿¡“¼­ “»ç“¿ë“µÈ “´ë“¹®“ÀÚ/“¼Ò“¹®“ÀÚ “Å×“ÀÌ“ºí“Àº 
“Çö“Àç“ÀÇ “·Î“ÄÉ“ÀÏ“ÀÌ “»ç“¿ë“µË“´Ï“´Ù.
L<perllocale> “À» “Âü“Á¶“ÇØ“ÁÖ“¼¼“¿ä.
(“¿¹“¸¦ “µé“¾î, C<\N{}> “³ª 0x100 “ÀÌ“»ó“ÀÇ “¿Í“ÀÌ“µå 16“Áø“¼ö“¹®“ÀÚ“¸¦ “»ç“¿ë“ÇÑ) 
“À¯“´Ï“ÄÚ“µå“°¡ “»ç“¿ë“µÈ “°æ“¿ì, C<\l>, C<\L>, C<\u>, C<\U> “¿¡“¼­ “»ç“¿ë“ÇÑ
“´ë“¹®“ÀÚ/“¼Ò“¹®“ÀÚ “Å×“ÀÌ“ºí“Àº “À¯“´Ï“ÄÚ“µå“¿¡ “Á¤“ÀÇ“µÈ “°Í“ÀÌ “µË“´Ï“´Ù.
C<\N{name}> “ÀÇ “¹®“¼­“¿¡ “´ë“ÇØ“¼­“´Â L<charnames> “¸¦ “Âü“Á¶“ÇØ“ÁÖ“¼¼“¿ä.

=begin original

All systems use the virtual C<"\n"> to represent a line terminator,
called a "newline".  There is no such thing as an unvarying, physical
newline character.  It is only an illusion that the operating system,
device drivers, C libraries, and Perl all conspire to preserve.  Not all
systems read C<"\r"> as ASCII CR and C<"\n"> as ASCII LF.  For example,
on a Mac, these are reversed, and on systems without line terminator,
printing C<"\n"> may emit no actual data.  In general, use C<"\n"> when
you mean a "newline" for your system, but use the literal ASCII when you
need an exact character.  For example, most networking protocols expect
and prefer a CR+LF (C<"\015\012"> or C<"\cM\cJ">) for line terminators,
and although they often accept just C<"\012">, they seldom tolerate just
C<"\015">.  If you get in the habit of using C<"\n"> for networking,
you may be burned some day.
X<newline> X<line terminator> X<eol> X<end of line>
X<\n> X<\r> X<\r\n>

=end original

“¸ð“µç “½Ã“½º“ÅÛ“¿¡“¼­“´Â "newline" “ÀÌ“¶ó“°í “ºÒ“¸®“´Â “ÁÙ“´Ü“À§“ÀÇ “¸¶“Áö“¸·“±Û“ÀÚ“¸¦ “Ç¥“Çö“ÇÏ“±â“À§“ÇØ
“°¡“»ó“Àû“À¸“·Î C<"\n"> “°¡ “»ç“¿ë“µË“´Ï“´Ù.
“º¸“Æí“Àû“ÀÌ“°í “¹°“¸®“Àû“ÀÎ "newline" “¹®“ÀÚ“¶ó“°í “¸»“ÇÏ“´Â “°Í“Àº “¾ø“½À“´Ï“´Ù.
OS, “Àå“Ä¡“µå“¶ó“ÀÌ“¹ö, C “¶ó“ÀÌ“ºê“·¯“¸®, Perl “ÀÌ “¸ð“µÎ “Çù“·Â“ÇØ “º¸“Á¸“ÇÏ“°í“ÀÚ“ÇÏ“¸é “´Ü“¼ø“ÇÑ
“È¯“»ó“ÀÔ“´Ï“´Ù. “¸ð“µç “½Ã“½º“ÅÛ“¿¡“¼­ C<"\r"> “¸¦ ASCII CR“·Î“½á, “¶Ç C<"\n">“¸¦
ASCII LF “·Î “ÀÐ“¾î“µé“ÀÌ“Áö“´Â “¾Ê“½À“´Ï“´Ù.
“¿¹“¸¦ “µé“¸é, Mac “¿¡“¼­“´Â “ÀÌ“°Í“µé“Àº “º¸“Á¸“µÇ“°í, “ÁÙ“´Ü“À§“ÀÇ “¸¶“Áö“¸·“±Û“ÀÚ“°¡ “¾ø“´Â “½Ã“½º“ÅÛ“¿¡“¼­
C<"\n"> “´Â print “ÇØ“µµ “½Ç“Á¦ “µ¥“ÀÌ“ÅÍ“´Â “¾Æ“¹«“°Í“µµ “Ãâ“·Â“ÇÏ“Áö “¾Ê“½À“´Ï“´Ù.
“ÀÏ“¹Ý“Àû“À¸“·Î “½Ã“½º“ÅÛ“¿¡“¼­“ÀÇ "newline"“À» “ÀÇ“¹Ì“ÇÏ“°í“ÀÚ “ÇÒ“¶§“¿¡“´Â C<"\n">“À» “»ç“¿ë“ÇÏ“Áö“¸¸,
“Á¤“È®“ÇÑ “¹®“ÀÚ“°¡ “ÇÊ“¿ä“ÇÑ “°æ“¿ì“´Â “¸®“ÅÍ“·²“ÇÑ ASCII “¸¦ “»ç“¿ë“ÇÕ“´Ï“´Ù.
“¿¹“¸¦ “µé“¾î, “´ë“ºÎ“ºÐ“ÀÇ “³×“Æ®“¿ö“Å© “ÇÁ“·Î“Åä“ÄÝ“¿¡“¼­“´Â “ÁÙ“´Ü“À§ “¸¶“Áö“¸·“±Û“ÀÚ“·Î“½á
CR+LF (C<"\015\012"> “È¤“Àº C<"\cM\cJ">) “¸¦ “¿¹“»ó“ÇÏ“°Å“³ª “¼±“È£“ÇÏ“Áö“¸¸,
“±ô“ºü“°¡“ÇÏ“°í C<"\012"> “¸¸“ÀÌ“¶ó“µµ “Çã“¿ë“ÇØ“¼­ “°Å“±â“¿¡ “¶§“¶§“·Î C<"\015">“¸¸“ÀÌ“¶ó“µµ
“ÀÎ“½Ä“ÇÕ“´Ï“´Ù. “¸¸“¾à “³×“Æ®“¿ö“Å© “°ü“·Ã“¿¡“¼­ C<"\n">“¸¦ “»ç“¿ë“ÇÏ“´Â “½À“°ü“ÀÌ “µé“¾î“ÀÖ“´Ù“¸é,
“¾ð“Á¨“°¡ “Å«“ÀÏ“³¯“Áö“µµ “¸ð“¸¨“´Ï“´Ù.

=begin original

For constructs that do interpolate, variables beginning with "C<$>"
or "C<@>" are interpolated.  Subscripted variables such as C<$a[3]> or
C<< $href->{key}[0] >> are also interpolated, as are array and hash slices.
But method calls such as C<< $obj->meth >> are not.

=end original

“Àü“°³“°¡ “¼ö“Çà“µÇ“¾î“Áö“´Â “±¸“¹®“¿¡“¼­“´Â "C<$>"“³ª "<C<@>"“·Î “½Ã“ÀÛ“µÇ“´Â “º¯“¼ö“°¡ “Àü“°³“µË“´Ï“´Ù.
C<$a[3]>“ÀÌ“³ª C<< $href->{key}[0] >> “µµ “¶Ç“´Â “¹è“¿­“ÀÌ“³ª “ÇØ“½¬“ÀÇ “½½“¶ó“ÀÌ“½º“Ã³“·³
“Àü“°³“µË“´Ï“´Ù. 
“ÇÏ“Áö“¸¸, C<< $obj->meth >> “°°“Àº “¸Þ“¼Ò“µå “È£“Ãâ“Àº “Àü“°³“µÇ“Áö “¾Ê“½À“´Ï“´Ù. 

=begin original

Interpolating an array or slice interpolates the elements in order,
separated by the value of C<$">, so is equivalent to interpolating
C<join $", @array>.    "Punctuation" arrays such as C<@*> are only
interpolated if the name is enclosed in braces C<@{*}>, but special
arrays C<@_>, C<@+>, and C<@-> are interpolated, even without braces.

=end original

“¹è“¿­“ÀÌ“³ª “½½“¶ó“ÀÌ“½º“ÀÇ “Àü“°³“´Â “¿ä“¼Ò“¸¦ “¼ø“¼­“´ë“·Î C<$">“ÀÇ “°ª“À¸“·Î “ºÐ“ÇÒ“ÇØ “Àü“°³“µÇ“±â“¿¡
C<join $", @array> “ÀÇ “Àü“°³“¿Í “°°“½À“´Ï“´Ù. 
C<@*> “°°“Àº "“±¸“µ¶“Á¡"“¹è“¿­“Àº “ÀÌ“¸§“ÀÌ C<@{*}>“°°“ÀÌ “Áß“°ý“È£“·Î “°¨“½Î“Á®“ÀÖ“´Â “°æ“¿ì“¿¡“¸¸
“Àü“°³“µÇ“Áö“¸¸, “Æ¯“¼ö“¹è“¿­ C<@_>, C<@+>, C<@-> “Àº “Áß“°ý“È£ “¾ø“ÀÌ“µµ “Àü“°³“µË“´Ï“´Ù.

=begin original

You cannot include a literal C<$> or C<@> within a C<\Q> sequence.
An unescaped C<$> or C<@> interpolates the corresponding variable,
while escaping will cause the literal string C<\$> to be inserted.
You'll need to write something like C<m/\Quser\E\@\Qhost/>.

=end original

C<\Q> “½Ã“Äö“½º “¾È“¿¡ “¸®“ÅÍ“·²“ÇÑ C<$> “³ª C<@> “À» “³Ö“À» “¼ö “¾ø“½À“´Ï“´Ù.
“ÀÌ“½º“ÄÉ“ÀÌ“ÇÁ“µÇ“Áö“¾Ê“´Â C<$> “³ª C<@> “´Â “´ë“ÀÀ“ÇÏ“´Â “º¯“¼ö“¿¡ “º¯“È¯“µË“´Ï“´Ù.
“ÇÑ“Æí, “ÀÌ“½º“ÄÉ“ÀÌ“ÇÁ“ÇÏ“¸é “¸®“ÅÍ“·²“ÇÑ “¹®“ÀÚ“¿­ C<\$> “°¡ “»ð“ÀÔ“µË“´Ï“´Ù.
C<m/\Quser\E\@\Qhost/> “°°“ÀÌ “¾µ “ÇÊ“¿ä“°¡ “ÀÖ“½À“´Ï“´Ù. 

=begin original

Patterns are subject to an additional level of interpretation as a
regular expression.  This is done as a second pass, after variables are
interpolated, so that regular expressions may be incorporated into the
pattern from the variables.  If this is not what you want, use C<\Q> to
interpolate a variable literally.

=end original

“ÆÐ“ÅÏ“Àº, “Á¤“±Ô“Ç¥“Çö“À¸“·Î“½á “Àü“°³“µÇ“¾î“Áý“´Ï“´Ù.
“ÀÌ“°Í“Àº “º¯“¼ö“°¡ “Àü“°³“µÈ “µÚ“ÀÇ 2“È¸“Â°“ÀÇ “ÆÐ“½º“°¡ “¼ö“Çà“µÇ“±â“¶§“¹®“¿¡
“º¯“¼ö“¿¡ “Á¤“±Ô“Ç¥“Çö“À» “Æ÷“ÇÔ“ÇÏ“°í, “ÆÐ“ÅÏ “¾È“¿¡ “Àü“°³“ÇÒ “¼ö “ÀÖ“½À“´Ï“´Ù.
“¸¸“¾à, “±×“·¸“°Ô “ÇÏ“°í “½Í“Áö “¾Ê“À» “¶§“¿¡“´Â, C<\Q> “¸¦ “»ç“¿ë“ÇÏ“¸é “º¯“¼ö“ÀÇ “³»“¿ë“À»
“¹®“ÀÚ“´ë“·Î“Àü“°³“ÇÒ “¼ö “ÀÖ“½À“´Ï“´Ù.

=begin original

Apart from the behavior described above, Perl does not expand
multiple levels of interpolation.  In particular, contrary to the
expectations of shell programmers, back-quotes do I<NOT> interpolate
within double quotes, nor do single quotes impede evaluation of
variables when used within double quotes.

=end original

“À§“¿¡ “¾²“ÀÎ “Çà“µ¿“À» “»©“¸é Perl “Àº “¿©“·¯“´Ü“°è“¸¦ “¹â“°í “Àü“°³“¸¦ “¼ö“Çà“ÇÏ“Áö “¾Ê“½À“´Ï“´Ù.
“Æ¯“È÷ “¼Ð “ÇÁ“·Î“±×“·¡“¸Ó“ÀÇ “±â“´ë“¿Í“´Â “´Þ“¸® “ÈÄ“ÀÎ“¿ë“Àº “½Ö“µû“¿È“Ç¥ “¾È“¿¡“¼­“´Â “Àü“°³“µÇ“Áö“¾Ê“Áö“¸¸,
“µû“¿È“Ç¥“°¡ “½Ö“µû“¿È“Ç¥ “¾È“¿¡ “»ç“¿ë“ÇØ“µµ “º¯“¼ö“ÀÇ “Àü“°³“¸¦ “¸·“´Â “°æ“¿ì“´Â I<“¾ø“½À“´Ï“´Ù>

=head2 Regexp Quote-Like Operators
X<operator, regexp>

(“Á¤“±Ô“Ç¥“Çö“ÀÇ “ÀÎ“¿ë“°°“Àº “¿¬“»ê“ÀÚ)

=begin original

Here are the quote-like operators that apply to pattern
matching and related activities.

=end original

“¾Æ“·¡“´Â “ÆÐ“ÅÏ“¸Å“Äª“°ú “°ü“·Ã“ÇÑ “Çà“µ¿“¿¡ “°ü“ÇÑ “ÀÎ“¿ë“°°“Àº “¿¬“»ê“ÀÚ“ÀÔ“´Ï“´Ù.

=over 8

=item qr/STRING/msixpo
X<qr> X</i> X</m> X</o> X</s> X</x> X</p>

=begin original

This operator quotes (and possibly compiles) its I<STRING> as a regular
expression.  I<STRING> is interpolated the same way as I<PATTERN>
in C<m/PATTERN/>.  If "'" is used as the delimiter, no interpolation
is done.  Returns a Perl value which may be used instead of the
corresponding C</STRING/msixpo> expression. The returned value is a
normalized version of the original pattern. It magically differs from
a string containing the same characters: C<ref(qr/x/)> returns "Regexp",
even though dereferencing the result returns undef.

=end original

“ÀÌ “¿¬“»ê“ÀÚ“´Â I<STRING> “À» “Á¤“±Ô“Ç¥“Çö“À¸“·Î“½á “ÀÎ“¿ë“ÇÕ“´Ï“´Ù.
(“±×“¸®“°í “°¡“´É“ÇÏ“´Ù“¸é “ÄÄ“ÆÄ“ÀÏ“ÇÕ“´Ï“´Ù)
I<STRING> “Àº C<m/PATTERN/> “¾È“ÀÇ I<PATTERN> “°ú “°°“ÀÌ “¹®“ÀÚ“º¯“È¯“µË“´Ï“´Ù.
"'" “ÀÌ “±¸“ºÐ“ÀÚ“·Î“½á “»ç“¿ë“µÉ “°æ“¿ì“´Â “¹®“ÀÚ“º¯“È¯“Àº “¼ö“Çà“ÇÏ“Áö “¾Ê“½À“´Ï“´Ù.
“´ë“ÀÀ“ÇÏ“´Â <C/STRING/msixpo> “Ç¥“Çö “´ë“½Å“¿¡ “»ç“¿ë“µÈ Perl “ÀÇ “°ª“À» “¹Ý“È¯“ÇÕ“´Ï“´Ù.
“¹Ý“È¯“µÈ “°ª“Àº “º»“·¡“ÀÇ “ÆÐ“ÅÏ“À» “Á¤“±Ô“È­“ÇÑ “°Í“ÀÔ“´Ï“´Ù.
“ÀÌ“°Í“Àº “ÀÌ“»ó“ÇÏ“°Ô“µµ, “°°“Àº “¹®“ÀÚ“¸¦ “Æ÷“ÇÔ“ÇÑ “¹®“ÀÚ“¿­“°ú“´Â “´Ù“¸¨“´Ï“´Ù.
C<ref(qr/x/)> “´Â “°á“°ú“¸¦ Dereference“ÇÏ“¸é “¹Ì“Á¤“ÀÇ“°ª“À» “¹Ý“È¯“ÇÏ“´Â “°Í“¿¡ “»ó“°ü“¾ø“ÀÌ
"Regexp" “¸¦ “¹Ý“È¯“ÇÕ“´Ï“´Ù.

=begin original

For example,

=end original

“¿¹“¸¦ “µé“¸é:

    $rex = qr/my.STRING/is;
    print $rex;                 # prints (?si-xm:my.STRING)
    s/$rex/foo/;

=begin original

is equivalent to

=end original

“´Â “¾Æ“·¡“¿Í “°°“½À“´Ï“´Ù.

    s/my.STRING/foo/is;

=begin original

The result may be used as a subpattern in a match:

=end original

“°á“°ú“´Â “¸Å“Ä¡“ÀÇ “¼­“ºê“ÆÐ“ÅÏ“¿À“·Î “»ç“¿ë“µË“´Ï“´Ù.

    $re = qr/$pattern/;
    $string =~ /foo${re}bar/;	# can be interpolated in other patterns
    $string =~ $re;		# or used standalone
    $string =~ /$re/;		# or this way

=begin original

Since Perl may compile the pattern at the moment of execution of qr()
operator, using qr() may have speed advantages in some situations,
notably if the result of qr() is used standalone:

=end original

Perl “Àº qr() “¿¬“»ê“ÀÚ“¸¦ “½Ç“Çà“ÇÏ“´Â “¼ø“°£“¿¡ “ÆÐ“ÅÏ“À» “ÄÄ“ÆÄ“ÀÏ“ÇÏ“±â“¶§“¹®“¿¡
qr() “À» “»ç“¿ë“ÇÑ “°É“·Î “¸î“¸î“ÀÇ “°æ“¿ì“¿¡“¼­ “¼Ó“µµ“¸é“¿¡“¼­ “À¯“¸®“ÇÕ“´Ï“´Ù.
“Æ¯“È÷ qr()“ÀÇ “°á“°ú“°¡ “µ¶“¸³“ÇØ“¼­ “»ç“¿ë“µÉ “°æ“¿ì“¿¡ “À¯“¸®“ÇÕ“´Ï“´Ù.

    sub match {
	my $patterns = shift;
	my @compiled = map qr/$_/i, @$patterns;
	grep {
	    my $success = 0;
	    foreach my $pat (@compiled) {
		$success = 1, last if /$pat/;
	    }
	    $success;
	} @_;
    }

=begin original

Precompilation of the pattern into an internal representation at
the moment of qr() avoids a need to recompile the pattern every
time a match C</$pat/> is attempted.  (Perl has many other internal
optimizations, but none would be triggered in the above example if
we did not use qr() operator.)

=end original

qr() “ÀÇ “½Ã“Á¡“¿¡“¼­ “ÆÐ“ÅÏ“À» “³»“ºÎ“Ç¥“Çö“¿¡ “»ç“Áø “ÄÄ“ÆÄ“ÀÏ“ÇÏ“´Â “°Í“¿¡ “ÀÇ“ÇØ
C</$pat/> “¸¦ “½Ã“Çè“ÇÒ“¶§“¿¡ “¸Å“¹ø “ÆÐ“ÅÏ“À» “´Ù“½Ã “ÄÄ“ÆÄ“ÀÏ“ÇÏ“´Â “°Í“À» “ÇÇ“ÇÒ “¼ö “ÀÖ“½À“´Ï“´Ù.
(Perl “Àº “±×“¿Ü“¿¡“µµ “¸¹“Àº “³»“ºÎ“ÃÖ“Àû“È­“¸¦ “¼ö“Çà“ÇÏ“Áö“¸¸,
“À§“ÀÇ “¿¹“¿¡“¼­ qr() “¿¬“»ê“ÀÚ“¸¦ “»ç“¿ë“ÇÏ“Áö“¾Ê“Àº “°æ“¿ì“´Â “¾î“¶² “ÃÖ“Àû“È­“µµ “¼ö“Çà“ÇÏ“Áö “¾Ê“½À“´Ï“´Ù.)

=begin original

Options are:

=end original

“Á¤“±Ô“Ç¥“Çö“¿¡ “»ç“¿ë“ÇÏ“´Â “¿É“¼Ç“Àº “¾Æ“·¡“¿Í “°°“½À“´Ï“´Ù.

=begin original

    m	Treat string as multiple lines.
    s	Treat string as single line. (Make . match a newline)
    i	Do case-insensitive pattern matching.
    x	Use extended regular expressions.
    p	When matching preserve a copy of the matched string so
        that ${^PREMATCH}, ${^MATCH}, ${^POSTMATCH} will be defined.
    o	Compile pattern only once.

=end original

    m	“¹®“ÀÚ“¿­“À» “¿©“·¯“ÁÙ“·Î “Ãë“±Þ“ÇÕ“´Ï“´Ù. 
    s	“¹®“ÀÚ“¿­“À» “ÇÑ“ÁÙ“·Î “Ãë“±Þ“ÇÕ“´Ï“´Ù(.“ÀÌ “°³“Çà“¿¡ “¸Å“Äª“µÇ“°Ô “ÇÕ“´Ï“´Ù) 
    i	“ÆÐ“ÅÏ“¸Å“Ä¡“¿¡“¼­ “´ë“¹®“ÀÚ “¼Ò“¹®“ÀÚ“¸¦ “±¸“º°“ÇÏ“Áö “¾Ê“½À“´Ï“´Ù.
    x	“È®“Àå“Á¤“±Ô“Ç¥“Çö“À» “»ç“¿ë“ÇÕ“´Ï“´Ù. 
    p	“¸Å“Äª “¶§“¿¡ “¸Å“Äª“ÇÑ “¹®“ÀÚ“¿­“À» “º¸“Á¸“ÇÏ“±â “À§“ÇØ“¼­ 
        ${^PREMATCH}, ${^MATCH}, ${^POSTMATCH} “°¡ “Á¤“ÀÇ“µË“´Ï“´Ù. 
    o	“ÇÑ“¹ø“¸¸ “ÄÄ“ÆÄ“ÀÏ “ÇÕ“´Ï“´Ù. 

=begin original

If a precompiled pattern is embedded in a larger pattern then the effect
of 'msixp' will be propagated appropriately.  The effect of the 'o'
modifier has is not propagated, being restricted to those patterns
explicitly using it.

=end original

If a precompiled pattern is embedded in a larger pattern then the effect
of 'msixp' will be propagated appropriately.  The effect of the 'o'
modifier has is not propagated, being restricted to those patterns
explicitly using it.
(TBT)

=begin original

See L<perlre> for additional information on valid syntax for STRING, and
for a detailed look at the semantics of regular expressions.

=end original


=item m/PATTERN/msixpogc
X<m> X<operator, match>
X<regexp, options> X<regexp> X<regex, options> X<regex>
X</m> X</s> X</i> X</x> X</p> X</o> X</g> X</c>

=item /PATTERN/msixpogc

=begin original

Searches a string for a pattern match, and in scalar context returns
true if it succeeds, false if it fails.  If no string is specified
via the C<=~> or C<!~> operator, the $_ string is searched.  (The
string specified with C<=~> need not be an lvalue--it may be the
result of an expression evaluation, but remember the C<=~> binds
rather tightly.)  See also L<perlre>.  See L<perllocale> for
discussion of additional considerations that apply when C<use locale>
is in effect.

=end original

“ÆÐ“ÅÏ“¸Å“Ä¡“¿¡“¼­ “¹®“ÀÚ“¿­“°Ë“»ö“À» “¼ö“Çà“ÇØ, “½º“Ä®“¶ó“ÄÁ“ÅØ“½º“Æ®“¿¡“¼­“´Â “¼º“°ø“ÇÑ “°æ“¿ì "“Âü",
“½Ç“ÆÐ“ÇÑ “°æ“¿ì“¿¡“¼­“´Â "“°Å“Áþ"“À» “¹Ý“È¯“ÇÕ“´Ï“´Ù.
C<=~> “¿¬“»ê“ÀÚ“°¡ C<!~> “¿¬“»ê“ÀÚ“·Î “°Ë“»ö“´ë“»ó“ÀÇ “¹®“ÀÚ“¿­“À» “³ª“Å¸“³»“±â“Áö “¸ø“ÇÒ “¶§“¿¡“´Â 
C<$_> “ÀÇ “¹®“ÀÚ“¿­“ÀÌ “°Ë“»ö“´ë“»ó“ÀÌ “µË“´Ï“´Ù. 
(C<=~> “¿¡“¼­ “Áö“Á¤“µÈ “¹®“ÀÚ“¿­“Àº, “¿Þ“ÂÊ“°ª“ÀÏ “ÇÊ“¿ä“°¡ “¾ø“½À“´Ï“´Ù.
“½Ä“À» “Æò“°¡“ÇÏ“ÇÑ “°á“°ú“¿¡“¼­“µµ “»ó“°ü“¾ø“Áö“¸¸, C<=~> “ÀÇ “¿ì“¼±“¼ø“À§“°¡ “ÀÏ“ºÎ “³ô“Àº “°Í“¿¡
“ÁÖ“ÀÇ“ÇØ “ÁÖ“¼¼“¿ä 
L<perlre> “µµ “Âü“Á¶“ÇØ“ÁÖ“¼¼“¿ä.
C<use locale>“ÀÌ “À¯“È¿“ÇÑ “°æ“¿ì“¿¡ “´ë“ÇØ“¼­“´Â L<perllocale> “À» “Âü“Á¶“ÇØ“ÁÖ“¼¼“¿ä.

=begin original

Options are as described in C<qr//>; in addition, the following match
process modifiers are available:

=end original

Options are as described in C<qr//>; in addition, the following match
process modifiers are available:
(TBT)

=begin original

    g	Match globally, i.e., find all occurrences.
    c	Do not reset search position on a failed match when /g is in effect.

=end original

    g   “±Û“·Î“¹ú “¸Å“Ä¡, “Áï, “¸ð“µÎ “Ã£“¾Æ“³À“´Ï“´Ù. 
    c	/g “°¡ “À¯“È¿“ÇÒ “¶§, “¸Å“Äª“½Ç“ÆÐ“ÇØ“µµ “°Ë“»ö“À§“Ä¡“¸¦ “¸®“¼Â“ÇÏ“Áö “¾Ê“½À“´Ï“´Ù. 

=begin original

If "/" is the delimiter then the initial C<m> is optional.  With the C<m>
you can use any pair of non-alphanumeric, non-whitespace characters
as delimiters.  This is particularly useful for matching path names
that contain "/", to avoid LTS (leaning toothpick syndrome).  If "?" is
the delimiter, then the match-only-once rule of C<?PATTERN?> applies.
If "'" is the delimiter, no interpolation is performed on the PATTERN.

=end original

“±¸“ºÐ“ÀÚ“°¡ "/" “ÀÏ “¶§“¿¡“´Â, “¸Ç“Ã³“À½“ÀÇ C<m>“Àº “ºÙ“¿©“µµ “ºÙ“ÀÌ“Áö “¾Ê“¾Æ“µµ “»ó“°ü“¾ø“½À“´Ï“´Ù.
C<m> “¸¦ “ºÙ“ÀÏ“¶§“´Â, “¿µ“¹®/“¼ý“ÀÚ“¿¡“¼­“µµ “°ø“¹é“¿¡“¼­“µµ “¾Æ“´Ñ “ÀÓ“ÀÇ“ÀÇ “¹®“ÀÚ“ÀÇ “Â¦“À» 
“±¸“ºÐ“ÀÚ“·Î “»ç“¿ë“ÇÒ “¼ö “ÀÖ“½À“´Ï“´Ù. 
“ÀÌ“°Í“Àº "/"“¸¦ “Æ÷“ÇÔ“ÇÑ “ÆÐ“½º“ÀÌ“¸§“°ú “ÆÐ“ÅÏ“¸Å“Ä¡“¸¦ “¼ö“Çà“ÇÒ “¶§“¿¡ “Æí“¸®“ÇÕ“´Ï“´Ù. 
LTS (?) “¸¦ “ÇÇ“ÇÏ“±â “À§“ÇØ“¼­“µµ "'" “°¡ “±¸“ºÐ“ÀÚ“ÀÏ “°æ“¿ì, “ÆÐ“ÅÏ“¿¡ “´ë“ÇØ “Àü“°³“´Â 
“¼ö“Çà“µÇ“Áö “¾Ê“½À“´Ï“´Ù.

=begin original

PATTERN may contain variables, which will be interpolated (and the
pattern recompiled) every time the pattern search is evaluated, except
for when the delimiter is a single quote.  (Note that C<$(>, C<$)>, and
C<$|> are not interpolated because they look like end-of-string tests.)
If you want such a pattern to be compiled only once, add a C</o> after
the trailing delimiter.  This avoids expensive run-time recompilations,
and is useful when the value you are interpolating won't change over
the life of the script.  However, mentioning C</o> constitutes a promise
that you won't change the variables in the pattern.  If you change them,
Perl won't even notice.  See also L<"qr/STRING/msixpo">.

=end original

PATTERN “¿¡“´Â “º¯“¼ö“°¡ “º¯“¼ö“°¡ “Æ÷“ÇÔ“µÇ“¾î“µµ “µÇ“°í, “ÆÐ“ÅÏ“ÀÌ “Æò“°¡“µÉ“¶§“¿¡ 
(“±¸“ºÐ“ÀÚ“°¡ “µû“¿È“Ç¥“°¡ “¾Æ“´Ñ“ÇÑ) “º¯“¼ö“´Â “Àü“°³“µË“´Ï“´Ù(“ÆÐ“ÅÏ“ÀÌ “Àç“ÄÄ“ÆÄ“ÀÏ“µË“´Ï“´Ù).
(“º¯“¼ö C<$(>, C<$)>, C<$|> “´Â “¹®“ÀÚ“¿­“ÀÇ “³¡“À» “Á¶“»ç“ÇÏ“´Â “ÆÐ“ÅÏ“ÀÌ“¸é “ÇØ“¼®“µÇ“±â“¶§“¹®“¿¡
“Àü“°³“µÇ“Áö “¾Ê“½À“´Ï“´Ù).
“ÆÐ“ÅÏ“ÀÌ “ÄÄ“ÆÄ“ÀÏ“µÇ“´Â “°Í“À» “ÇÑ“¹ø“¸¸ “ÇÏ“°Ô “ÇÒ “°æ“¿ì“¿¡“´Â
“¸¶“Áö“¸·“ÀÇ “¿µ“¿ª“³ª“´®“¹®“ÀÚ“ÀÇ “µÚ“¿¡ C</o> “¼ö“½Ä“ÀÚ“¸¦ “ºÙ“ÀÔ“´Ï“´Ù.
“ÀÌ“°Í“¿¡ “ÀÇ“ÇØ “½Ç“Çà “½Ã“¿¡ “Àç“ÄÄ“ÆÄ“ÀÏ“ÀÌ “ºó“¹ø“ÇÏ“°Ô “ÀÏ“¾î“³ª“´Â “°Í“À» “ÇÇ“ÇÏ“°í,
“Àü“°³“ÇÑ “°ª“ÀÌ “½º“Å©“¸³“Æ®“ÀÇ “½Ç“Çà “Áß“¿¡ “º¯“È­“ÇÏ“Áö “¾Ê“´Â “°æ“¿ì“¿¡“´Â “À¯“È¿“ÇÑ “°Í“ÀÌ “µË“´Ï“´Ù.
“±×“·¯“³ª, C</o> “¸¦ “ºÙ“ÀÌ“´Â “°Í“Àº “¹è“ÅÏ “¾È“ÀÇ “º¯“¼ö“¸¦ “º¯“°æ“ÇÏ“Áö “¾Ê“´Â “°Í“À» “¾à“¼Ó“ÇÏ“´Â
“°Ì“´Ï“´Ù.
“º¯“°æ“Çß“´Ù“°í “ÇØ“µµ, Perl “ÀÌ “±×“°Í“À» “½Å“°æ“¾²“Áö“´Â “¾Ê“½À“´Ï“´Ù.
L<"qr/STRING/msixpo"> “À» “Âü“Á¶“ÇØ“ÁÖ“¼¼“¿ä.

=begin original

If the PATTERN evaluates to the empty string, the last
I<successfully> matched regular expression is used instead. In this
case, only the C<g> and C<c> flags on the empty pattern is honoured -
the other flags are taken from the original pattern. If no match has
previously succeeded, this will (silently) act instead as a genuine
empty pattern (which will always match).

=end original

PATTERN “À» “Æò“°¡“ÇÑ “°á“°ú“°¡ “ºó“¹®“ÀÚ“¿­“ÀÎ “°æ“¿ì“¿¡“´Â
“¸¶“Áö“¸·“¿¡ “¸Å“Ä¡“¿¡ I<“¼º“°ø“Çß“´Ù> “Á¤“±Ô“Ç¥“Çö“ÀÌ “´ë“½Å “»ç“¿ë“µË“´Ï“´Ù.
“ÀÌ “°æ“¿ì, “ºó “ÆÐ“ÅÏ“¿¡ “´ë“ÇØ“¼­ C<g>“ÀÇ C<c> “ÇÃ“·¡“±×“¸¸“ÀÌ “À¯“È¿“ÇÕ“´Ï“´Ù.
“±× “¿Ü“ÀÇ “ÇÃ“·¡“±×“´Â “¿ø“·¡ “ÆÐ“ÅÏ“¿¡“¼­ “°¡“Á®“°©“´Ï“´Ù.
“ÀÌ“Àü“¿¡ “¼º“°ø“ÇÑ “¸Å“Äª“ÀÌ “¾ø“´Â “°æ“¿ì, “ÀÌ“°Í“Àº(“¾Ï“¹¬“Àû“À¸“·Î) "“Âü"“ÀÇ “ºó “ÆÐ“ÅÏ“À¸“·Î“½á
“µ¿“ÀÛ“ÇÕ“´Ï“´Ù(“Áï, “Çà“»ó “¸Å“Äª“ÇÕ“´Ï“´Ù).

=begin original

Note that it's possible to confuse Perl into thinking C<//> (the empty
regex) is really C<//> (the defined-or operator).  Perl is usually pretty
good about this, but some pathological cases might trigger this, such as
C<$a///> (is that C<($a) / (//)> or C<$a // />?) and C<print $fh //>
(C<print $fh(//> or C<print($fh //>?).  In all of these examples, Perl
will assume you meant defined-or.  If you meant the empty regex, just
use parentheses or spaces to disambiguate, or even prefix the empty
regex with an C<m> (so C<//> becomes C<m//>).

=end original

Note that it's possible to confuse Perl into thinking C<//> (the empty
regex) is really C<//> (the defined-or operator).  Perl is usually pretty
good about this, but some pathological cases might trigger this, such as
C<$a///> (is that C<($a) / (//)> or C<$a // />?) and C<print $fh //>
(C<print $fh(//> or C<print($fh //>?).  In all of these examples, Perl
will assume you meant defined-or.  If you meant the empty regex, just
use parentheses or spaces to disambiguate, or even prefix the empty
regex with an C<m> (so C<//> becomes C<m//>).
(TBT)

=begin original

If the C</g> option is not used, C<m//> in list context returns a
list consisting of the subexpressions matched by the parentheses in the
pattern, i.e., (C<$1>, C<$2>, C<$3>...).  (Note that here C<$1> etc. are
also set, and that this differs from Perl 4's behavior.)  When there are
no parentheses in the pattern, the return value is the list C<(1)> for
success.  With or without parentheses, an empty list is returned upon
failure.

=end original

C</g> “¿É“¼Ç“ÀÌ “»ç“¿ë“µÇ“Áö “¾Ê“Àº “°æ“¿ì, “¸®“½º“Æ® “ÄÁ“ÅØ“½º“Æ®“¿¡“¼­“ÀÇ C<m//>“Àº
“ÆÐ“ÅÏ “¾È“ÀÇ “°ý“È£“¿¡“¼­ “°¨“½Ñ “ºÎ“ºÐ“¿¡ “¸Å“Ä¡“ÇÑ “°Í“¤·“·Î “±¸“¼º“µÈ “¸®“½º“Æ®“¸¦ “¹Ý“È¯“ÇÕ“´Ï“´Ù.
“ÀÌ“°Í“Àº (C<$1>, C<$2>, C<$3>, ...) “ÀÌ“¶ó“´Â “°Ì“´Ï“´Ù. 
(“ÀÌ “°æ“¿ì, C<$1> “°°“Àº “°Í“µµ “¼³“Á¤“µË“´Ï“´Ù.
“ÀÌ “Á¡“¿¡“¼­ Perl 4“ÀÇ “µ¿“ÀÛ“°ú “´Ù“¸¨“´Ï“´Ù)
“ÆÐ“ÅÏ“¿¡ “°ý“È£“°¡ “¾ø“´Â “°æ“¿ì“¿¡“´Â “¹Ý“È¯“°ª“Àº “¼º“°ø“½Ã“ÀÇ “¸®“½º“Æ® C<(1)>“ÀÔ“´Ï“´Ù.
“°ý“È£“°¡ “ÀÖ“°í“¾ø“°í“¿¡ “»ó“°ü“¾ø“ÀÌ, “½Ç“ÆÐ“ÇÒ “¶§“´Â “ºó “¸®“½º“Æ®“¸¦ “¹Ý“È¯“ÇÕ“´Ï“´Ù.

=begin original

Examples:

=end original

“¿¹“¸¦ “³ª“Å¸“³À“´Ï“´Ù : 

    open(TTY, '/dev/tty');
    <TTY> =~ /^y/i && foo();	# do foo if desired

    if (/Version: *([0-9.]*)/) { $version = $1; }

    next if m#^/usr/spool/uucp#;

    # poor man's grep
    $arg = shift;
    while (<>) {
	print if /$arg/o;	# compile only once
    }

    if (($F1, $F2, $Etc) = ($foo =~ /^(\S+)\s+(\S+)\s*(.*)/))

=begin original

This last example splits $foo into the first two words and the
remainder of the line, and assigns those three fields to $F1, $F2, and
$Etc.  The conditional is true if any variables were assigned, i.e., if
the pattern matched.

=end original

“¸¶“Áö“¸·“ÀÇ “¿¹“Á¦“´Â $foo “¸¦ “ÃÖ“ÃÊ“ÀÇ “µÎ“°³“ÀÇ “´Ü“¾î“¿Í “ÁÙ“ÀÇ “³²“Àº “ºÎ“ºÐ“À» “ºÐ“ÇØ“ÇØ
$F1 “¿Í $F2 “¿Í $Etc “¸¦ “´ë“ÀÔ“ÇÏ“°í “ÀÖ“½À“´Ï“´Ù. 
“º¯“¼ö“¿¡ “´ë“ÀÔ“µÇ“¸é, “Áï “ÆÐ“ÅÏ“ÀÌ “¸Å“Ä¡“µÇ“¸é if “ÀÇ “Á¶“°Ç“ÀÌ "“Âü"“ÀÌ “µË“´Ï“´Ù.

=begin original

The C</g> modifier specifies global pattern matching--that is,
matching as many times as possible within the string.  How it behaves
depends on the context.  In list context, it returns a list of the
substrings matched by any capturing parentheses in the regular
expression.  If there are no parentheses, it returns a list of all
the matched strings, as if there were parentheses around the whole
pattern.

=end original

C</g> “¼ö“½Ä“ÀÚ“´Â “±Û“·Î“¹ú“ÇÑ “ÆÐ“ÅÏ“¸Å“Ä¡“¸¦ “Áö“Á¤“ÇÏ“´Â “°Í“À¸“·Î,
“¹®“ÀÚ“¿­ “¾È“¿¡ “°¡“´É“ÇÑ“ÇÑ “¸¹“Àº “¸Å“Ä¡“¸¦ “¼ö“Çà“ÇÕ“´Ï“´Ù.
“ÀÌ “µ¿“ÀÛ“Àº “ÄÁ“ÅØ“½º“Æ®“¿¡ “ÀÇ“Á¸“ÇÕ“´Ï“´Ù.
“¸®“½º“Æ® “ÄÁ“ÅØ“½º“Æ®“¿¡“¼­“´Â “Á¤“±Ô“Ç¥“Çö “¾È“ÀÇ “°ý“È£“°¡ “ºÙ“Àº “°Í“¿¡ “¸Å“Ä¡“ÇÑ
“ºÎ“ºÐ“ÀÇ “¹®“ÀÚ“¿­“ÀÇ “¸®“½º“Æ®“°¡ “¹Ý“È¯“µË“´Ï“´Ù.
“°ý“È£“°¡ “¾ø“À¸“¸é, “ÆÐ“ÅÏ“Àü“Ã¼“¸¦ “°ý“È£“·Î “°¨“½Î“Áö“Áö “¾Ê“Àº “°æ“¿ì“¿Í “°°“ÀÌ
"“¸ð“µç “¸Å“Ä¡“ÇÑ “¹®“ÀÚ“¿­"“ÀÇ “¸®“½º“Æ®“°¡ “¹Ý“È¯“µË“´Ï“´Ù.

=begin original

In scalar context, each execution of C<m//g> finds the next match,
returning true if it matches, and false if there is no further match.
The position after the last match can be read or set using the pos()
function; see L<perlfunc/pos>.   A failed match normally resets the
search position to the beginning of the string, but you can avoid that
by adding the C</c> modifier (e.g. C<m//gc>).  Modifying the target
string also resets the search position.

=end original

“½º“Ä®“¶ó“ÄÁ“ÅØ“½º“Æ®“¿¡“¼­“´Â C<m//g> “¸¦ “½Ç“Çà“ÇÒ “¶§“¸¶“´Ù “´Ù“À½“ÀÇ “¸Å“Ä¡“¸¦ “Ã£“½À“´Ï“´Ù.
“¸Å“Ä¡“ÇÑ “°æ“¿ì“´Â "“Âü"“À» “¹Ý“È¯“ÇÏ“°í, “´õ “ÀÌ“»ó “¸Å“Ä¡“ÇÏ“Áö “¾Ê“°Ô “µÇ“¸é "“°Å“Áþ"“À» “¹Ý“È¯“ÇÕ“´Ï“´Ù.
“¸¶“Áö“¸·“ÀÇ “¸Å“Ä¡“ÀÇ “À§“Ä¡“´Â pos() “ÇÔ“¼ö“·Î “ÀÐ“¾î“µé“ÀÌ“°Å“³ª “¼³“Á¤“ÀÌ “°¡“´É“ÇÕ“´Ï“´Ù.
L<perlfunc/pos> “¸¦ “Âü“Á¶“ÇØ“ÁÖ“¼¼“¿ä. 
“¸Å“Ä¡“¿¡ “½Ç“ÆÐ“ÇÏ“¸é “º¸“Åë“Àº “°Ë“»ö“À§“Ä¡“¸¦ “¹®“ÀÚ“¿­“ÀÇ “¸Ç “¾Õ“¿¡ “¸®“¼Â“ÇÏ“Áö“¸¸,
C</c> “¼ö“½Ä“ÀÚ“¸¦ “ºÙ“ÀÓ(“Áï C<m//gc>)“À¸“·Î“½á “ÀÌ“°Í“À» “¸·“À» “¼ö “ÀÖ“½À“´Ï“´Ù.
“Å¸“°Ù“ÀÌ “µÇ“´Â “¹®“ÀÚ“¿­“ÀÌ “º¯“°æ“µÈ “°æ“¿ì“µµ “°Ë“»ö“¼ø“À§“´Â “¸®“¼Â“µË“´Ï“´Ù.

=begin original

You can intermix C<m//g> matches with C<m/\G.../g>, where C<\G> is a
zero-width assertion that matches the exact position where the previous
C<m//g>, if any, left off.  Without the C</g> modifier, the C<\G> assertion
still anchors at pos(), but the match is of course only attempted once.
Using C<\G> without C</g> on a target string that has not previously had a
C</g> match applied to it is the same as using the C<\A> assertion to match
the beginning of the string.  Note also that, currently, C<\G> is only
properly supported when anchored at the very beginning of the pattern.

=end original

C<m//g> “¸Å“Ä¡“¸¦ C<m/\G.../g> “¿Í “È¥“¿ë“ÇÒ “¼ö“µµ “ÀÖ“½À“´Ï“´Ù. 
C<\G> “´Â “¾Õ“¿¡“¼­“ÀÇ C<m//g> “°¡ “ÀÖ“À¸“¸é “°°“Àº “À§“Ä¡“¿¡“¼­ “¸Å“Ä¡“ÇÑ 
“Á¦“·Î“¹®“ÀÚ“Æø“ÀÇ “¼±“¾ð“ÀÔ“´Ï“´Ù.
C</g> “¼ö“½Ä“ÀÚ“°¡ “¾ø“´Â “°æ“¿ì C<\G> “¼±“¾ð“Àº pos()“¿¡ “°í“Á¤“ÇÏ“Áö“¸¸,
“¸Å“Ä¡“´Â “¹°“·Ð “ÇÑ“¹ø“¸¸ “½Ã“Çè“µË“´Ï“´Ù.
“¾Õ“¿¡“¼­“ÀÇ C</g> “¸Å“Ä¡“¸¦ “Á¤“¿ë“ÇÏ“Áö “¾Ê“Àº “Å¸“°Ù “¹®“ÀÚ“¿­“¿¡ “´ë“ÇØ“¼­“µµ
C</g> “¾ø“ÀÌ C<\G> “¸¦ “»ç“¿ë“ÇÏ“¸é, “¹®“ÀÚ“¿­“ÀÇ “¸Ç “¾Õ“¿¡ “¸Å“Ä¡“ÇÏ“¸é C<\A> “¼±“¾ð“À»
“»ç“¿ë“ÇÏ“´Â “°Í“°ú “°°“Àº “°Í“ÀÌ “µË“´Ï“´Ù.
C<\G> “´Â “Çö“Àç, “ÆÐ“ÅÏ“ÀÇ “´õ“¿í “¾Õ“À» “Ç¥“½Ã“ÇÏ“´Â “°æ“¿ì“¿¡“¸¸ “Á¤“È®“ÇÑ
“´ë“ÀÀ“À» “ÇÏ“´Â “°Í“¿¡ “ÁÖ“ÀÇ“ÇØ “ÁÖ“¼¼“¿ä.

=begin original

Examples:

=end original

“¿¹“Á¦:

    # list context
    ($one,$five,$fifteen) = (`uptime` =~ /(\d+\.\d+)/g);

    # scalar context
    $/ = "";
    while (defined($paragraph = <>)) {
	while ($paragraph =~ /[a-z]['")]*[.!?]+['")]*\s/g) {
	    $sentences++;
	}
    }
    print "$sentences\n";

    # using m//gc with \G
    $_ = "ppooqppqq";
    while ($i++ < 2) {
        print "1: '";
        print $1 while /(o)/gc; print "', pos=", pos, "\n";
        print "2: '";
        print $1 if /\G(q)/gc;  print "', pos=", pos, "\n";
        print "3: '";
        print $1 while /(p)/gc; print "', pos=", pos, "\n";
    }
    print "Final: '$1', pos=",pos,"\n" if /\G(.)/;

=begin original

The last example should print:

=end original

“¸¶“Áö“¸·“Àº “´Ù“À½“°ú “°°“Àº “°Í“À» “Ç¥“½Ã“ÇÒ “°Ì“´Ï“´Ù.

    1: 'oo', pos=4
    2: 'q', pos=5
    3: 'pp', pos=7
    1: '', pos=7
    2: 'q', pos=8
    3: '', pos=8
    Final: 'q', pos=8

=begin original

Notice that the final match matched C<q> instead of C<p>, which a match
without the C<\G> anchor would have done. Also note that the final match
did not update C<pos> -- C<pos> is only updated on a C</g> match. If the
final match did indeed match C<p>, it's a good bet that you're running an
older (pre-5.6.0) Perl.

=end original

C<\G> “¾ø“ÀÌ “¸Å“Ä¡“°¡ “Çà“ÇØ“Á³“±â “¶§“¹®“¿¡, “¸¶“Áö“¸·“ÀÇ “¸Å“Ä¡“¿¡“¼­“´Â C<p>“°¡ “¾Æ“´Ñ
C<q> “°¡ “¸Å“Ä¡“ÇÏ“´Â “°Í“À» “ÁÖ“ÀÇ“ÇØ“ÁÖ“¼¼“¿ä.
“±×“¸®“°í “¸¶“Áö“¸·“ÀÇ “¸Å“Ä¡“´Â C<pos>“¸¦ “º¯“°æ“ÇÏ“Áö “¾Ê“µµ“·Ï “ÇØ“ÁÖ“¼¼“¿ä.
C<pos>“´Â C</g> “¸Å“Ä¡“¿¡“¼­“¸¸ “º¯“°æ“µË“´Ï“´Ù.
“¸¸“¾à “¸¶“Áö“¸·“ÀÇ “¸Å“Ä¡“¿¡“¼­ C<p>“¿¡ “¸Å“Ä¡“ÇÑ “°æ“¿ì, “»ó“´ç“ÇÑ “È®“·ü“·Î
“¿¾ Perl (5.6.0“ÀÌ“Àü“ÀÇ9 “·Î “½Ç“Çà“ÇÒ “°Ì“´Ï“´Ù.

=begin original

A useful idiom for C<lex>-like scanners is C</\G.../gc>.  You can
combine several regexps like this to process a string part-by-part,
doing different actions depending on which regexp matched.  Each
regexp tries to match where the previous one leaves off.

=end original

C<lex> “°°“ÀÌ “½º“Äµ“ÇÏ“±â“À§“ÇØ “Æí“¸®“ÇÑ “Áö“Á¤“Àº C</\G.../gc> “ÀÔ“´Ï“´Ù.
“¹®“ÀÚ“¿­“À» “ÀÏ“ºÎ“ºÐ“¾¿ “Ã³“¸®“ÇÏ“±â “À§“ÇØ “¸î“°³“ÀÎ“°¡“ÀÇ “Á¤“±Ô“Ç¥“Çö“À» “¿¬“°á“ÇØ“¼­,
“¾î“´À “Á¤“±Ô“Ç¥“Çö“¿¡ “¸Å“Ä¡“ÇÑ“°Í“ÀÎ“°¡“¿¡ “ÀÇ“ÇØ “´Ù“¸¥ “Ã³“¸®“¸¦ “ÇÒ “¼ö “ÀÖ“½À“´Ï“´Ù.
“°¢“°¢“ÀÇ “Á¤“±Ô“Ç¥“Çö“Àº “¾Õ“ÀÇ “Á¤“±Ô“Ç¥“Çö“ÀÌ “¹«“½Ã“ÇÑ “ºÎ“ºÐ“¿¡ “´ë“ÇØ“¼­“µµ “¸Å“Ä¡“¸¦ “½Ã“Çè“ÇÕ“´Ï“´Ù.

 $_ = <<'EOL';
      $url = URI::URL->new( "http://www/" );   die if $url eq "xXx";
 EOL
 LOOP:
    {
      print(" digits"),		redo LOOP if /\G\d+\b[,.;]?\s*/gc;
      print(" lowercase"),	redo LOOP if /\G[a-z]+\b[,.;]?\s*/gc;
      print(" UPPERCASE"),	redo LOOP if /\G[A-Z]+\b[,.;]?\s*/gc;
      print(" Capitalized"),	redo LOOP if /\G[A-Z][a-z]+\b[,.;]?\s*/gc;
      print(" MiXeD"),		redo LOOP if /\G[A-Za-z]+\b[,.;]?\s*/gc;
      print(" alphanumeric"),	redo LOOP if /\G[A-Za-z0-9]+\b[,.;]?\s*/gc;
      print(" line-noise"),	redo LOOP if /\G[^A-Za-z0-9]+/gc;
      print ". That's all!\n";
    }

=begin original

Here is the output (split into several lines):

=end original

“Ãâ“·Â“Àº “¾Æ“·¡“¿Í “°°“½À“´Ï“´Ù(“¸î “ÁÙ“À» “Àß“¶ó“³õ“¾Ò“½À“´Ï“´Ù)

 line-noise lowercase line-noise lowercase UPPERCASE line-noise
 UPPERCASE line-noise lowercase line-noise lowercase line-noise
 lowercase lowercase line-noise lowercase lowercase line-noise
 MiXeD line-noise. That's all!

=item ?PATTERN?
X<?>

=begin original

This is just like the C</pattern/> search, except that it matches only
once between calls to the reset() operator.  This is a useful
optimization when you want to see only the first occurrence of
something in each file of a set of files, for instance.  Only C<??>
patterns local to the current package are reset.

=end original

“ÀÌ“°Í“Àº reset() “¿¬“»ê“ÀÚ“¸¦ “È£“Ãâ“ÇÒ“¶§“¸¶“´Ù “ÇÑ“¹ø“¹Û“¿¡ “¸Å“Ä¡“ÇÏ“Áö “¾Ê“´Â “°Í“À» “»©“°í“´Â
C</pattern/>“¿¡ “ÀÇ“ÇÑ “°Ë“»ö“°ú “¿Ï“Àü“È÷ “°°“½À“´Ï“´Ù.
“¿¹“¸¦ “µé“¾î, “ÆÄ“ÀÏ“À» “¸ð“À¸“´Â “Áß“¿¡ “°¢“°¢“ÀÇ “ÆÄ“ÀÏ“¿¡ “´ë“ÇØ 
“¾î“¶² “°Í“À» “Ã£“À» “¶§“¿¡, “¸Ç“Ã³“À½“ÀÇ “ÇÏ“³ª“ÀÇ “Á¸“Àç“¸¸ “¾Ë“¸é “µÈ“´Ù“¸é,
“ÀÌ “±â“´É“À» “»ç“¿ë“ÇØ“¼­ “ÃÖ“Àû“È­“¸¦ “ÇÒ “¼ö “ÀÖ“½À“´Ï“´Ù.
“Çö“Àç“ÀÇ “ÆÐ“Å°“Áö“¿¡ “·Î“ÄÃ“·Î “µÇ“¾î“ÀÖ“´Â C<??> “ÀÇ “ÆÐ“ÅÏ“¸¸“ÀÌ
“¸®“¼Â“µË“´Ï“´Ù.

    while (<>) {
	if (?^$?) {
			    # blank line between header and body
	}
    } continue {
	reset if eof;	    # clear ?? status for next file
    }

=begin original

This usage is vaguely deprecated, which means it just might possibly
be removed in some distant future version of Perl, perhaps somewhere
around the year 2168.

=end original

“ÀÌ “¹æ“¹ý“Àº “±×“¸® “Ãß“Ãµ“ÇÏ“Áö “¾Ê“½À“´Ï“´Ù.
Perl “ÀÇ “¸Õ “Àå“·¡“ÀÇ “¹ö“Á¯(“¾Æ“¸¶“µµ 2168“³â“°æ)“¿¡“¼­“´Â “¾ø“¾î“Áú“Áö“µµ “¸ð“¸£“°Ú“½À“´Ï“´Ù.


=item s/PATTERN/REPLACEMENT/msixpogce
X<substitute> X<substitution> X<replace> X<regexp, replace>
X<regexp, substitute> X</m> X</s> X</i> X</x> X</p> X</o> X</g> X</c> X</e>

=begin original

Searches a string for a pattern, and if found, replaces that pattern
with the replacement text and returns the number of substitutions
made.  Otherwise it returns false (specifically, the empty string).

=end original

“¹®“ÀÚ“¿­“¾È“¿¡ “ÆÐ“ÅÏ“À» “°Ë“»ö“ÇØ“¼­, “Ã£“À¸“¸é “Ä¡“È¯“ÅØ“½º“Æ®“·Î “¹Ù“²Ù“°í, “Ä¡“È¯“ÇÑ “È½“¼ö“¸¦ “¹Ý“È¯“ÇÕ“´Ï“´Ù.
“Ã£“Áö “¸ø“ÇÑ “°æ“¿ì“´Â "“°Å“Áþ(“±¸“Ã¼“Àû“À¸“·Î“´Â “ºó“¹®“ÀÚ“¿­)"“À» “¹Ý“È¯“ÇÕ“´Ï“´Ù.

=begin original

If no string is specified via the C<=~> or C<!~> operator, the C<$_>
variable is searched and modified.  (The string specified with C<=~> must
be scalar variable, an array element, a hash element, or an assignment
to one of those, i.e., an lvalue.)

=end original

C<=~> “¿¬“»ê“ÀÚ“³ª C<!~> “¿¬“»ê“ÀÚ“¿¡ “ÀÇ“ÇØ “¹®“ÀÚ“¿­“ÀÌ “Áö“Á¤“µÇ “¾Ê“¾Ò“´Ù“¸é,
“º¯“¼ö C<$_> “ÀÌ “°Ë“»ö“µÇ“¾î “¼ö“Á¤“µË“´Ï“´Ù.
(C<=~>“¿¡“¼­ “Áö“Á¤“ÇÑ “¹®“ÀÚ“¿­“Àº “½º“Å³“¶ó“º¯“¼ö, “¹è“¿­“¿ä“¼Ò, “ÇØ“½¬“¿ä“¼Ò, “È¤“Àº 
“ÀÌ“°Í“µé “¸ð“µÎ“¿¡ “´ë“ÀÔ“½Ä“À¸“·Î “µé“¾î“°£ “ÁÂ“º¯“Ä¡“°¡ “¾Æ“´Ï“¸é “¾È“µË“´Ï“´Ù.)

=begin original

If the delimiter chosen is a single quote, no interpolation is
done on either the PATTERN or the REPLACEMENT.  Otherwise, if the
PATTERN contains a $ that looks like a variable rather than an
end-of-string test, the variable will be interpolated into the pattern
at run-time.  If you want the pattern compiled only once the first time
the variable is interpolated, use the C</o> option.  If the pattern
evaluates to the empty string, the last successfully executed regular
expression is used instead.  See L<perlre> for further explanation on these.
See L<perllocale> for discussion of additional considerations that apply
when C<use locale> is in effect.

=end original

“³ª“Áß“¿¡ “±â“¼ú“ÇÏ“°Ú“Áö“¸¸, “±¸“ºÐ“ÀÚ“´Â “½½“·¡“½¬“¶ó“°í“¸¸ “ÇÒ “¼ö“´Â “¾ø“½À“´Ï“´Ù.
“µû“¿È“Ç¥“¸¦ “±¸“ºÐ“ÀÚ“·Î “»ç“¿ë“ÇÏ“´Â “°æ“¿ì“¿¡“´Â
PATTERN “´Â “¹°“·Ð“ÀÌ“°Å“´Ï“¿Í REPLACEMENT “¿¡“µµ “º¯“¼ö“ÀÇ “Àü“°³“¸¦ “¼ö“Çà“ÇÒ “¼ö “¾ø“½À“´Ï“´Ù.
“±× “¿Ü“¿¡“´Â “¹®“ÀÚ“¿­“ÀÇ “¸¶“Áö“¸·“À» “³ª“Å¸“³»“´Â $“°¡ PATTERN“¿¡ “Æ÷“ÇÔ“µÇ“¾î“ÀÖ“À¸“¸é, “½Ç“Çà“½Ã“¿¡ “º¯“¼ö“°¡
“ÆÐ“ÅÏ“¾È“¿¡ “Àü“°³“µË“´Ï“´Ù. “ÃÖ“ÃÊ“ÀÇ “º¯“¼ö“°¡ “Àü“°³“µÉ “¶§“¿¡“¸¸ “ÆÐ“ÅÏ“ÀÇ “ÄÄ“ÆÄ“ÀÏ“À» “Çà“ÇÏ“°í “½Í“À» “¶§“¿¡“´Â
C</o> “¿É“¼Ç“À» “»ç“¿ë“ÇØ“ÁÖ“¼¼“¿ä.
“ÀÌ“°Í“¿¡ “´ë“ÇÑ “ÀÚ“¼¼“ÇÑ “³»“¿ë“Àº L<perlre> “¸¦ “Âü“Á¶“ÇØ“ÁÖ“¼¼“¿ä. 
C<use locale> “ÀÌ “À¯“È¿“ÇÑ “°æ“¿ì“ÀÇ “ÀÇ“³í“¿¡ “´ë“ÇØ“¼­“´Â L<perllocale> “À» “Âü“Á¶“ÇØ“ÁÖ“¼¼“¿ä. 

=begin original

Options are as with m// with the addition of the following replacement
specific options:

=end original

Options are as with m// with the addition of the following replacement
specific options:
(TBT)

=begin original

    e	Evaluate the right side as an expression.
    ee  Evaluate the right side as a string then eval the result

=end original

    e   “½Ä“ÀÇ “¿À“¸¥“ÂÊ“ÀÇ “Æò“°¡“¸¦ “Çà“ÇÑ“´Ù. 
    ee  “¿À“¸¥“ÂÊ“À» “¹®“ÀÚ“¿­“·Î “Æò“°¡“ÇØ“¼­ “±× “°á“°ú“¸¦ “Æò“°¡“ÇÑ“´Ù. 

=begin original

Any non-alphanumeric, non-whitespace delimiter may replace the
slashes.  If single quotes are used, no interpretation is done on the
replacement string (the C</e> modifier overrides this, however).  Unlike
Perl 4, Perl 5 treats backticks as normal delimiters; the replacement
text is not evaluated as a command.  If the
PATTERN is delimited by bracketing quotes, the REPLACEMENT has its own
pair of quotes, which may or may not be bracketing quotes, e.g.,
C<s(foo)(bar)> or C<< s<foo>/bar/ >>.  A C</e> will cause the
replacement portion to be treated as a full-fledged Perl expression
and evaluated right then and there.  It is, however, syntax checked at
compile-time. A second C<e> modifier will cause the replacement portion
to be C<eval>ed before being run as a Perl expression.

=end original

“¿µ“¼ý“ÀÚ, “°ø“¹é“ÀÌ “¾Æ“´Ñ “ÀÓ“ÀÇ“ÀÇ “±¸“ºÐ“ÀÚ“·Î “½½“·¡“½¬“¸¦ “´ë“½Å“ÇÒ “¼ö “ÀÖ“½À“´Ï“´Ù.
“¾Õ“¿¡ “±â“¼ú“ÇÑ “°Í“°°“ÀÌ, “µû“¿È“Ç¥“¸¦ “»ç“¿ë“ÇÏ“¸é “Ä¡“È¯“¹®“ÀÚ“¿­“¿¡“¼­ “Àü“°³“µÇ“Áö “¾Ê“½À“´Ï“´Ù.
(C</e>“¼ö“½Ä“ÀÚ“¸¦ “»ç“¿ë“ÇÏ“¸é “°¡“´É“ÇÕ“´Ï“´Ù)
Perl 4 “¿Í “´Þ“¸®, Perl 5 “´Â “¿ª“µû“¿È“Ç¥(`)“¸¦ “Åë“»ó“ÀÇ “±¸“ºÐ“ÀÚ“·Î “Ãë“±Þ“ÇÕ“´Ï“´Ù.
“Ä¡“È¯ “ÅØ“½º“Æ®“´Â “Ä¿“¸Ç“µå“·Î“½á “Æò“°¡“µÇ“Áö “¾Ê“½À“´Ï“´Ù.
PATTERN “À» “°ý“È£“°°“Àº “°É“·Î “°¨“½Ñ “°æ“¿ì“¿¡“´Â,
REPLACEMENT “¿ë“¿¡ “´Ù“¸¥ “ÇÑ“½Ö“ÀÇ “±¸“ºÐ“ÀÚ“¸¦ “ÁØ“ºñ“ÇÕ“´Ï“´Ù.
“ÀÌ“°Í“Àº “°ý“È£“·ù“ÀÌ“µç “¾Æ“´Ï“µç “»ó“°ü“¾ø“½À“´Ï“´Ù.
“¿¹: C<s(foo)(bar)> “³ª C<< s<foo>/bar/ >>“¡£
C</e> “´Â “Ä¡“È¯“¹®“ÀÚ“¿­“À» “¿Ï“Àü“ÇÑ Perl “ÀÇ “½Ä“À¸“·Î “Ãë“±Þ“ÇÏ“°í, “±× “°÷“¿¡“¼­ “¹Ù“·Î “ÇØ“¼®“ÇÕ“´Ï“´Ù. 
“±×“·¯“³ª, “ÀÌ“°Í“Àº “ÄÄ“ÆÄ“ÀÏ“ÇÒ “¶§“¿¡ “±¸“¹®“Ã¼“Å©“°¡ “µË“´Ï“´Ù.
“µÎ“¹ø“Â°“ÀÇ C<e> “¼ö“½Ä“ÀÚ“¸¦ “Áö“Á¤“ÇÏ“¸é “Ä¡“È¯“ºÎ“ºÐ“ÀÌ “¿ì“¼± Perl “ÀÇ “½Ä“À¸“·Î C<eval>“µË“´Ï“´Ù.

=begin original

Examples:

=end original

“¿¹“Á¦:

    s/\bgreen\b/mauve/g;		# don't change wintergreen

    $path =~ s|/usr/bin|/usr/local/bin|;

    s/Login: $foo/Login: $bar/; # run-time pattern

    ($foo = $bar) =~ s/this/that/;	# copy first, then change

    $count = ($paragraph =~ s/Mister\b/Mr./g);  # get change-count

    $_ = 'abc123xyz';
    s/\d+/$&*2/e;		# yields 'abc246xyz'
    s/\d+/sprintf("%5d",$&)/e;	# yields 'abc  246xyz'
    s/\w/$& x 2/eg;		# yields 'aabbcc  224466xxyyzz'

    s/%(.)/$percent{$1}/g;	# change percent escapes; no /e
    s/%(.)/$percent{$1} || $&/ge;	# expr now, so /e
    s/^=(\w+)/pod($1)/ge;	# use function call

    # expand variables in $_, but dynamics only, using
    # symbolic dereferencing
    s/\$(\w+)/${$1}/g;

    # Add one to the value of any numbers in the string
    s/(\d+)/1 + $1/eg;

    # This will expand any embedded scalar variable
    # (including lexicals) in $_ : First $1 is interpolated
    # to the variable name, and then evaluated
    s/(\$\w+)/$1/eeg;

    # Delete (most) C comments.
    $program =~ s {
	/\*	# Match the opening delimiter.
	.*?	# Match a minimal number of characters.
	\*/	# Match the closing delimiter.
    } []gsx;

    s/^\s*(.*?)\s*$/$1/;	# trim whitespace in $_, expensively

    for ($variable) {		# trim whitespace in $variable, cheap
	s/^\s+//;
	s/\s+$//;
    }

    s/([^ ]*) *([^ ]*)/$2 $1/;	# reverse 1st two fields

=begin original

Note the use of $ instead of \ in the last example.  Unlike
B<sed>, we use the \<I<digit>> form in only the left hand side.
Anywhere else it's $<I<digit>>.

=end original

“¸¶“Áö“¸· “ÁÙ“¿¡“¼­“ÀÇ \ “´ë“½Å“¿¡ $ “¸¦ “»ç“¿ë“ÇÏ“°í “ÀÖ“´Â “°Í“¿¡ “ÁÖ“ÀÇ“ÇÏ“¼¼“¿ä.
B<sed>“¿Í“´Â “´Þ“¸® \<I<“¼ý“ÀÚ>> “ÀÇ “Çü“½Ä“Àº “ÆÐ“ÅÏ“¿¡“¼­“¸¸ “°¡“´É“ÇÕ“´Ï“´Ù.
“±× “¹Û“¿¡“´Â $<I<“¼ý“ÀÚ>> “¸¦ “»ç“¿ë“ÇÕ“´Ï“´Ù.

=begin original

Occasionally, you can't use just a C</g> to get all the changes
to occur that you might want.  Here are two common cases:

=end original

“¶§“¶§“·Î“´Â, C</g> “¸¦ “ºÙ“ÀÎ“°Í“¸¸“À¸“·Î“´Â “¹Ù“¶ó“´ø “Çü“ÅÂ“·Î “Àü“ºÎ “º¯“°æ“ÇÏ“Áö
“¾Ê“À» “¼ö“µµ “ÀÖ“½À“´Ï“´Ù.
“µÎ“°¡“Áö “¿¹“¸¦ “º¸“°Ú“½À“´Ï“´Ù.

    # put commas in the right places in an integer
    1 while s/(\d)(\d\d\d)(?!\d)/$1,$2/g;

    # expand tabs to 8-column spacing
    1 while s/\t+/' ' x (length($&)*8 - length($`)%8)/e;

=back

=head2 Quote-Like Operators
X<operator, quote-like>

(“ÀÎ“¿ë“½Ä “¿¬“»ê“ÀÚ) 

=over 4

=item q/STRING/
X<q> X<quote, single> X<'> X<''>

=item 'STRING'

=begin original

A single-quoted, literal string.  A backslash represents a backslash
unless followed by the delimiter or another backslash, in which case
the delimiter or backslash is interpolated.

=end original

“µû“¿È“Ç¥“·Î “µÈ “¸®“ÅÍ“·²“¹®“ÀÚ“¿­“ÀÔ“´Ï“´Ù.
“¹é“½½“·¡“½¬“´Â “µÚ“¿¡“¿À“´Â “°Í“ÀÌ “±¸“ºÐ“ÀÚ “È¤“Àº “´Ù“¸¥ “¹é“½½“·¡“½¬“ÀÎ “°æ“¿ì“¸¦ “»©“°í“´Â
“´Ü“¼ø“ÇÑ “¹é“½½“·¡“½¬“·Î “ÀÛ“¿ë“ÇÕ“´Ï“´Ù.
“±¸“ºÐ“ÀÚ“³ª “¹é“½½“·¡“½¬“°¡ “¿À“´Â “°æ“¿ì“¿¡“´Â, “±× “±¸“ºÐ“ÀÚ “ÀÚ“½Å “È¤“Àº “¹é“½½“·¡“½¬
“±× “ÀÚ“½Å“ÀÌ “Àü“°³“µË“´Ï“´Ù.

    $foo = q!I said, "You said, 'She said it.'"!;
    $bar = q('This is it.');
    $baz = '\n';		# a two-character string

=item qq/STRING/
X<qq> X<quote, double> X<"> X<"">

=item "STRING"

=begin original

A double-quoted, interpolated string.

=end original

“µû“¿È“Ç¥“·Î“µÈ “¸®“ÅÍ“·² “¹®“ÀÚ“¿­“ÀÔ“´Ï“´Ù.

    $_ .= qq
     (*** The previous line contains the naughty word "$1".\n)
		if /\b(tcl|java|python)\b/i;      # :-)
    $baz = "\n";		# a one-character string

=item qx/STRING/
X<qx> X<`> X<``> X<backtick>

=item `STRING`

=begin original

A string which is (possibly) interpolated and then executed as a
system command with C</bin/sh> or its equivalent.  Shell wildcards,
pipes, and redirections will be honored.  The collected standard
output of the command is returned; standard error is unaffected.  In
scalar context, it comes back as a single (potentially multi-line)
string, or undef if the command failed.  In list context, returns a
list of lines (however you've defined lines with $/ or
$INPUT_RECORD_SEPARATOR), or an empty list if the command failed.

=end original

“Àü“°³“µÈ, C</bin/sh> “¶Ç“´Â “±×“°Í“°ú “°°“Àº “°Í“À¸“·Î “½Ã“½º“ÅÛ“ÀÇ “Ä¿“¸Ç“µå“·Î“½á
“½Ç“Çà“µÇ“´Â(“µÉ) “¹®“ÀÚ“¿­“ÀÌ“´Ï“´Ù.
“¼Ð“ÀÇ “¿Í“ÀÏ“µå “Ä«“µå, “ÆÄ“ÀÌ“ÇÁ, “¸®“´Ù“ÀÌ“·º“Æ®“°¡ “À¯“È¿“ÇÕ“´Ï“´Ù.
“±× “Ä¿“¸Ç“µå“ÀÇ “Ç¥“ÁØ“Ãâ“·Â“À» “º¸“Àº “°Í“À» “¹Ý“È¯“ÇÕ“´Ï“´Ù.
“Ç¥“ÁØ“¿¡“·¯“´Â “¿µ“Çâ“À» “ÁÖ“Áö “¾Ê“½À“´Ï“´Ù.
“½º“Ä®“¶ó “ÄÁ“ÅØ“½º“Æ®“¿¡“¼­“´Â (“¿©“·¯“ÁÙ“À» “Æ÷“ÇÔ“ÇÒ “Áö“µµ “¸ð“¸£“´Â)
“ÇÏ“³ª“ÀÇ “¹®“ÀÚ“¿­“ÀÌ “µ¹“¾Æ“¿É“´Ï“´Ù.
“Ä¿“¸Ç“µå“°¡ “½Ç“ÆÐ“Çß“À» “¶§“´Â “¹Ì“Á¤“ÀÇ“°ª“À» “¹Ý“È¯“ÇÕ“´Ï“´Ù.
“¸®“½º“Æ® “ÄÁ“ÅØ“½º“Æ®“¿¡“¼­“´Â ($/ “È¤“Àº $INPUT_RECORD_SEPARATOR “¸¦
“¾î“¶»“°Ô “¼³“Á¤“ÇØ“µÖ“µµ) “ÁÙ“ÀÇ “¸®“½º“Æ®“¸¦ “¹Ý“È¯“ÇÕ“´Ï“´Ù.
“Ä¿“¸Ç“µå“°¡ “½Ç“ÆÐ“Çß“À» “¶§“´Â “ºó “¸®“½º“Æ®“¸¦ “¹Ý“È¯“ÇÕ“´Ï“´Ù.

=begin original

Because backticks do not affect standard error, use shell file descriptor
syntax (assuming the shell supports this) if you care to address this.
To capture a command's STDERR and STDOUT together:

=end original

“¿ª“µû“¿È“Ç¥(`)“´Â “Ç¥“ÁØ“¿¡“·¯“¿¡“´Â “¿µ“Çâ“À» “ÁÖ“Áö“¾Ê“À¸“¹Ç“·Î,
“Ç¥“ÁØ“¿¡“·¯“¸¦ “»ç“¿ë“ÇÒ “¶§“´Â (“¼Ð“ÀÌ “´ë“ÀÀ“ÇÏ“°í “ÀÖ“´Â “°Í“À¸“·Î“½á)
“¼Ð“ÀÇ “ÆÄ“ÀÏ“±â“¼ú“ÀÚ“ÀÇ “¹®“¹ý“À» “»ç“¿ë“ÇØ“ÁÖ“¼¼“¿ä
“Ä¿“¸Ç“µå“ÀÇ STDERR “¿Í STDOUT “À» “ÇÔ“²² “¾ò“À» “¶§“¿¡“´Â 

    $output = `cmd 2>&1`;

=begin original

To capture a command's STDOUT but discard its STDERR:

=end original

“Ä¿“¸Ç“µå“ÀÇ STDOUT “Àº “¾ò“Áö“¸¸ STDERR “Àº “¹ö“¸± “°æ“¿ì :

    $output = `cmd 2>/dev/null`;

=begin original

To capture a command's STDERR but discard its STDOUT (ordering is
important here):

=end original

“Ä¿“¸Ç“µå“ÀÇ STDERR “Àº “¾ò“Áö“¸¸ STDOUT “Àº “¹ö“¸± “°æ“¿ì“´Â
(“¿©“±â“¼­“¼­“´Â “¼ø“¼­“°¡ “Áß“¿ä)

    $output = `cmd 2>&1 1>/dev/null`;

=begin original

To exchange a command's STDOUT and STDERR in order to capture the STDERR
but leave its STDOUT to come out the old STDERR:

=end original

STDERR “À» “¾ò“Áö“¸¸ , STDOUT “Àº “¿¾ STDERR “¸¦ “À§“ÇØ “³²“°Ü“µÑ “¶§“´Â
STDOUT “¿Í STDERR “¸¦ “±³“È¯“ÇÏ“±â “À§“ÇØ 

    $output = `cmd 3>&1 1>&2 2>&3 3>&-`;

=begin original

To read both a command's STDOUT and its STDERR separately, it's easiest
to redirect them separately to files, and then read from those files
when the program is done:

=end original

“Ä¿“¸Ç“µå“ÀÇ STDOUT “°ú STDERR “¾ç“ÂÊ“À» “µû“·Î“µû“·Î “ÀÐ“¾î“µé“ÀÌ“°í “½Í“À» “°æ“¿ì
“Á¦“ÀÏ “°£“´Ü“ÇÑ “¹æ“¹ý“Àº “º°“µµ“ÀÇ “ÆÄ“ÀÏ“¿¡ “¸®“´Ù“ÀÌ“·º“Æ®“ÇØ“¼­
“ÇÁ“·Î“±×“·¥“ÀÌ “Á¾“·á“µÈ“ÈÄ“¿¡ “±× “ÆÄ“ÀÏ“À» “ÀÐ“´Â “°Í“ÀÔ“´Ï“´Ù.

    system("program args 1>program.stdout 2>program.stderr");

=begin original

The STDIN filehandle used by the command is inherited from Perl's STDIN.
For example:

=end original

“Ä¿“¸Ç“µå“ÀÇ “ÀÇ“ÇØ “»ç“¿ë“µÈ STDIN “ÆÄ“ÀÏ“ÇÚ“µé“Àº Perl “ÀÇ STDIN“À»
“°è“½Â“ÇÕ“´Ï“´Ù. 
“¿¹“¸¦ “µé“¸é;

    open BLAM, "blam" || die "Can't open: $!";
    open STDIN, "<&BLAM";
    print `sort`;

=begin original

will print the sorted contents of the file "blam".

=end original

“Àº “ÆÄ“ÀÏ "blam" “ÀÇ “³»“¿ë“À» “Á¤“·Ä“ÇØ “Ç¥“½Ã“ÇÕ“´Ï“´Ù.

=begin original

Using single-quote as a delimiter protects the command from Perl's
double-quote interpolation, passing it on to the shell instead:

=end original

“µû“¿È“Ç¥“¸¦ “±¸“ºÐ“ÀÚ“·Î “»ç“¿ë“ÇÏ“¸é Perl “ÀÇ “½Ö“µû“¿È“Ç¥ “Àü“°³“¿¡“¼­
“º¸“È£“µÇ“¾î, “±×“´ë“·Î “¼Ð“¿¡ “Àü“ÇØ“Áý“´Ï“´Ù.

    $perl_info  = qx(ps $$);            # that's Perl's $$
    $shell_info = qx'ps $$';            # that's the new shell's $$

=begin original

How that string gets evaluated is entirely subject to the command
interpreter on your system.  On most platforms, you will have to protect
shell metacharacters if you want them treated literally.  This is in
practice difficult to do, as it's unclear how to escape which characters.
See L<perlsec> for a clean and safe example of a manual fork() and exec()
to emulate backticks safely.

=end original

“ÀÌ “¹®“ÀÚ“¿­“ÀÌ “¾î“¶»“°Ô “Æò“°¡“µÇ“´Â “Áö“´Â “¿Ï“Àü “½Ã“½º“ÅÛ“ÀÇ “Ä¿“¸Ç“µå “ÀÎ“ÅÍ“ÇÁ“¸®“ÅÍ“¿¡ “ÀÇ“Á¸“ÇÕ“´Ï“´Ù.
“°Å“ÀÇ “¸ð“µç “ÇÃ“·§“Æû“¿¡“¼­“´Â “¼Ð“ÀÇ “¸Þ“Å¸“Ä³“¸¯“ÅÍ“¸¦ “¸®“ÅÍ“·²“ÇÏ“°Ô “´Ù“·ç“°í “½Í“À» “°æ“¿ì“¿¡“´Â
“±×“°Í“À» “º¸“È£“ÇÒ “ÇÊ“¿ä“°¡ “ÀÖ“½À“´Ï“´Ù.
“¹®“ÀÚ“¸¦ “ÀÌ“½º“ÄÉ“ÀÌ“ÇÁ“ÇÏ“´Â “¹æ“¹ý“ÀÌ “¸í“È®“ÇÏ“Áö “¾Ê“±â “¶§“¹®“¿¡, “ÀÌ“°Í“Àº “ÀÌ“·Ð“Àû“À¸“·Î “¾î“·Æ“½À“´Ï“´Ù.
“¿ª “µû“¿È“Ç¥“¸¦ “¿Ï“Àü“È÷ “¿¡“¹Ä“·¹“ÀÌ“Æ®“ÇÏ“±â “À§“ÇØ “¼ö“µ¿“À¸“·Î fork() “¿Í exec() “¸¦
“¼ö“Çà“ÇÏ“±â “À§“ÇÑ “±ú“²ý“ÇÏ“°í “¾È“Àü“ÇÑ “¿¹“Á¦“¿¡ “´ë“ÇØ“¼­“´Â L<perlsec> “¸¦ “Âü“Á¶“ÇØ“ÁÖ“¼¼“¿ä. 

=begin original

On some platforms (notably DOS-like ones), the shell may not be
capable of dealing with multiline commands, so putting newlines in
the string may not get you what you want.  You may be able to evaluate
multiple commands in a single line by separating them with the command
separator character, if your shell supports that (e.g. C<;> on many Unix
shells; C<&> on the Windows NT C<cmd> shell).

=end original

(“Æ¯“È÷ DOS “Ç³“ÀÇ) “ÇÃ“·§“Æû“¿¡“´Â, “¼Ð“ÀÌ “¿©“·¯“ÁÙ“ÀÇ “Ä¿“¸Ç“µå“¸¦ “´Ù“·ê “¼ö “¾ø“±â “¶§“¹®“¿¡
“¹®“ÀÚ“¿­“¿¡ “ÁÙ“¹Ù“²Þ“À» “ÇÏ“¸é “¿ø“ÇÏ“Áö “¾Ê“´Â “°á“°ú“°¡ “³ª“¿À“´Â “°æ“¿ì“°¡ “ÀÖ“½À“´Ï“´Ù.
“¼Ð“ÀÌ “´ë“ÀÀ“ÇÏ“°í “ÀÖ“À¸“¸é “Ä¿“¸Ç“µå“ºÐ“ÇÒ“¹®“ÀÚ“·Î “ºÐ“ÇÒ“ÇÏ“´Â “°Í“À¸“·Î 
“ÇÑ“ÁÙ“¿¡ “¿©“·¯ “Ä¿“¸Ç“µå“¸¦ “³Ö“¾î“¼­ “ÇØ“¼®“ÇÏ“°Ô “ÇÒ “¼ö “ÀÖ“½À“´Ï“´Ù.
(“ÀÌ “¹®“ÀÚ“´Â, “¸¹“Àº “À¯“´Ð“½º “¼Ð“¿¡“¼­“´Â C<;>, Windows NT C<cmd> “¼Ð“¿¡“¼­“´Â
C<&> “ÀÔ“´Ï“´Ù).

=begin original

Beginning with v5.6.0, Perl will attempt to flush all files opened for
output before starting the child process, but this may not be supported
on some platforms (see L<perlport>).  To be safe, you may need to set
C<$|> ($AUTOFLUSH in English) or call the C<autoflush()> method of
C<IO::Handle> on any open handles.

=end original

v5.6.0 “ÀÌ“ÈÄ, Perl “Àº “ÀÚ“½Ä “ÇÁ“·Î“¼¼“½º“ÀÇ “½Ç“Çà“Àü“¿¡ “Ãâ“·Â“¿ë“À¸“·Î “¿­“¸° “¸ð“µç
“ÆÄ“ÀÏ“À» “ÇÃ“·¯“½¬“ÇÏ“·Á“°í “ÇÏ“Áö“¸¸, “ÀÌ“°Í“¿¡ “´ë“ÀÀ“ÇÏ“Áö “¾Ê“Àº “ÇÃ“·§“Æû“µµ “ÀÖ“½À“´Ï“´Ù.
(L<perlport> “¸¦ “Âü“Á¶“ÇØ“ÁÖ“¼¼“¿ä).
“¾È“Àü“À» “À§“ÇØ“¼­“´Â,  C<$|> (English “¸ð“µâ“¿¡“¼­“´Â $AUTOFLUSH)“¸¦ “¼³“Á¤“ÇÏ“µç“°¡,
“¿­“·Á“ÀÖ“´Â “¸ð“µç “ÇÚ“µé“¿¡ “´ë“ÇØ C<IO::Handle>“ÀÇ C<autoflush()> “¸Þ“¼Ò“µå“¸¦
“È£“Ãâ“ÇÒ “ÇÊ“¿ä“°¡ “ÀÖ“½À“´Ï“´Ù.

=begin original

Beware that some command shells may place restrictions on the length
of the command line.  You must ensure your strings don't exceed this
limit after any necessary interpolations.  See the platform-specific
release notes for more details about your particular environment.

=end original

“Ä¿“¸Ç“µå “ÁÙ“ÀÇ “±æ“ÀÌ“¿¡ “Á¦“ÇÑ“ÇÏ“´Â “Ä¿“¸Ç“µå“¼Ð“ÀÌ “ÀÖ“´Ù“´Â “°Í“¿¡ “ÁÖ“ÀÇ“ÇØ“ÁÖ“¼¼“¿ä.
“¸ð“µç “ÇÊ“¿ä“ÇÑ “º¯“È¯“ÀÌ “¼ö“Çà“µÈ “µÚ“¿¡, “Ä¿“¸Ç“µå “¹®“ÀÚ“¿­“ÀÌ “ÀÌ “Á¦“ÇÑ“À» “³Ñ“Áö “¾Ê“´Â “°Í“À»
“º¸“Àå“ÇÒ “ÇÊ“¿ä“°¡ “ÀÖ“½À“´Ï“´Ù.
“Æ¯“Á¤“ÀÇ “È¯“°æ“¿¡ “°ü“ÇÑ “¿©“·¯ “»ç“¾ç“¿¡ “´ë“ÇØ“¼­“´Â “ÇÃ“·§“Æû “°í“À¯“ÀÇ “¸±“¸®“Áî“³ë“Æ®“¸¦
“Âü“Á¶“ÇØ“ÁÖ“¼¼“¿ä.

=begin original

Using this operator can lead to programs that are difficult to port,
because the shell commands called vary between systems, and may in
fact not be present at all.  As one example, the C<type> command under
the POSIX shell is very different from the C<type> command under DOS.
That doesn't mean you should go out of your way to avoid backticks
when they're the right way to get something done.  Perl was made to be
a glue language, and one of the things it glues together is commands.
Just understand what you're getting yourself into.

=end original

“ÀÌ “¿¬“»ê“ÀÚ“¸¦ “»ç“¿ë“ÇÏ“¸é, “ÇÁ“·Î“±×“·¥“ÀÇ “ÀÌ“½Ä“ÀÌ “°ï“¶õ“ÇØ“Áý“´Ï“´Ù.
“È£“Ãâ“µÇ“´Â “¼Ð“Ä¿“¸Ç“µå“´Â “½Ã“½º“ÅÛ“¿¡ “µû“¶ó “´Ù“¸£“°í,
“½Ç“Á¦ “Àü“Çô “Á¸“Àç“ÇÏ“Áö “¾Ê“´Â “°Í“µµ “ÀÖ“±â“¶§“¹®“ÀÌ“ÁÒ.
“ÇÏ“³ª“ÀÇ “¿¹“·Î“½á, POSIX“¼Ð“ÀÇ C<type> “Ä¿“¸Ç“µå“´Â
DOS “ÀÇ C<type> “Ä¿“¸Ç“µå“¿Í “Å©“°Ô “´Ù“¸¨“´Ï“´Ù.
“ÀÌ“°Í“Àº “¹º“°¡“¸¦ “ÇÏ“±â “À§“ÇØ “Á¤“È®“ÇÑ “¹æ“¹ý“À¸“·Î“½á“´Â “¿ª“µû“¿È“Ç¥“¸¦ “»ç“¿ë“ÇÏ“Áö “¾Ê“¾Æ“¾ß
“ÇÑ“´Ù“´Â “°Í“À» “ÀÇ“¹Ì“ÇÏ“Áö “¾Ê“½À“´Ï“´Ù.
Perl “Àº “Á¢“Âø“Á¦“°°“Àº “¾ð“¾î“·Î“½á “¸¸“µé“¾î“Á³“°í, “Á¢“Âø“µÇ“¾î“¾ß“ÇÒ “°Í“ÀÇ “ÇÏ“³ª“´Â
“Ä¿“¸Ç“µå“ÀÔ“´Ï“´Ù.
“´Ü“¼ø“È÷ “¹«“¾ù“¸¦ “ÇÏ“·Á“°í “ÇÏ“´Â “°Í“ÀÎ“°¡“¸¦ “ÀÌ“ÇØ“ÇØ “µÎ“¼¼“¿ä.

=begin original

See L</"I/O Operators"> for more discussion.

=end original

“¿©“·¯ “ÀÇ“³í“¿¡ “´ë“ÇØ“¼­“´Â L</"I/O Operators"> “¸¦ “Âü“Á¶“ÇØ“ÁÖ“¼¼“¿ä.

=item qw/STRING/
X<qw> X<quote, list> X<quote, words>

=begin original

Evaluates to a list of the words extracted out of STRING, using embedded
whitespace as the word delimiters.  It can be understood as being roughly
equivalent to:

=end original

“»ð“ÀÔ“µÈ “°ø“¹é“À» “±¸“ºÐ“ÀÚ“·Î“½á, STRING“¿¡“¼­ “Ãâ“·Â“ÇÑ
“´Ü“¾î“ÀÇ “¸®“½º“Æ®“¸¦ “Æò“°¡“ÇÕ“´Ï“´Ù.
“ÀÌ“°Í“Àº “ÀÌ“·¡“ÀÇ “½Ä“°ú “´ë“Ã¼“·Î “¶È“°°“´Ù“°í “»ý“°¢“ÇÒ “¼ö “ÀÖ“½À“´Ï“´Ù.

    split(' ', q/STRING/);

=begin original

the differences being that it generates a real list at compile time, and
in scalar context it returns the last element in the list.  So
this expression:

=end original

“´Ù“¸¥ “Á¡“ÀÌ “ÀÖ“´Ù“¸é, “½Ç“Á¦“ÀÇ “¸®“½º“Æ®“¸¦ “ÄÄ“ÆÄ“ÀÏ“ÇÒ “¶§“¿¡ “»ý“»ó“ÇÏ“°í, “½º“Ä®“¶ó“ÄÁ“ÅØ“½º“Æ®“¿¡“¼­“´Â
“¸®“½º“Æ®“ÀÇ “¸¶“Áö“¸· “¿ä“¼Ò“¸¦ “¹Ý“È¯“ÇÏ“´Â “°Í“ÀÔ“´Ï“´Ù.
“µû“¶ó“¼­, “¾Æ“·¡“ÀÇ “Ç¥“Çö“Àº

    qw(foo bar baz)

=begin original

is semantically equivalent to the list:

=end original

“¾Æ“·¡“ÀÇ “¸®“½º“Æ®“¿Í “¹®“¹ý“Àû“À¸“·Î “°°“½À“´Ï“´Ù.

    'foo', 'bar', 'baz'

=begin original

Some frequently seen examples:

=end original

“ÀÚ“ÁÖ “»ç“¿ë“µÇ“´Â “¿¹“Á¦“´Â “¾Æ“·¡“¿Í “°°“½À“´Ï“´Ù. 

    use POSIX qw( setlocale localeconv )
    @EXPORT = qw( foo bar baz );

=begin original

A common mistake is to try to separate the words with comma or to
put comments into a multi-line C<qw>-string.  For this reason, the
C<use warnings> pragma and the B<-w> switch (that is, the C<$^W> variable)
produces warnings if the STRING contains the "," or the "#" character.

=end original

“Á¾“Á¾ “Âø“°¢“ÇÏ“´Â “°Í“Àº, “´Ü“¾î“¸¦ “ÄÞ“¸¶“µ¥ “³ª“´©“°Å“³ª, “¿©“·¯“ÁÙ“ÀÇ C<qw> “¹®“ÀÚ“¿­“ÀÇ “¾È“¿¡
“ÄÚ“¸à“Æ®“¸¦ “¾²“°Å“³ª “ÇÏ“´Â “°Í“ÀÔ“´Ï“´Ù.
“ÀÌ “¶§“¹®“¿¡ C<use warnings> “ÇÁ“·¡“±×“¸¶“¿Í B<-w> “½º“À§“Ä¡
(“Áï, C<$^W> “º¯“¼ö)“´Â STRING“¿¡ ","“³ª "#"“ÀÇ “¹®“ÀÚ“°¡ “µé“¾î“ÀÖ“À¸“¸é
“°æ“°í“¸¦ “³À“´Ï“´Ù.

=item tr/SEARCHLIST/REPLACEMENTLIST/cds
X<tr> X<y> X<transliterate> X</c> X</d> X</s>

=item y/SEARCHLIST/REPLACEMENTLIST/cds

=begin original

Transliterates all occurrences of the characters found in the search list
with the corresponding character in the replacement list.  It returns
the number of characters replaced or deleted.  If no string is
specified via the =~ or !~ operator, the $_ string is transliterated.  (The
string specified with =~ must be a scalar variable, an array element, a
hash element, or an assignment to one of those, i.e., an lvalue.)

=end original

“°Ë“»ö“¸®“½º“Æ® (SEARCHLIST) “¿¡ “Æ÷“ÇÔ“µÈ “¹®“ÀÚ“¸¦, “´ë“ÀÀ“ÇÏ“´Â “Ä¡“È¯“¸®“½º“Æ®(REPLACEMENTLIST)
“ÀÇ “¹®“ÀÚ“·Î “º¯“È¯“ÇÕ“´Ï“´Ù.
“Ä¡“È¯ “È¤“Àº “»è“Á¦“°¡ “¼ö“Çà“µÈ “¹®“ÀÚ“¼ö“¸¦ “¹Ý“È¯“ÇÕ“´Ï“´Ù.
=~ “¿¬“»ê“ÀÚ“³ª =! “¿¬“»ê“ÀÚ“·Î “¹®“ÀÚ“¿­“ÀÌ “Áö“Á¤“µÇ“¾î“ÀÖ“Áö “¾Ê“À¸“¸é, $_ “¹®“ÀÚ“¿­“ÀÌ “º¯“È¯“µË“´Ï“´Ù.
(=~ “·Î “Áö“Á¤“µÈ “¹®“ÀÚ“¿­“Àº “½º“Ä®“¶ó“º¯“¼ö, “¹è“¿­“¿ä“¼Ò, “ÇØ“½¬“¿ä“¼Ò, “È¤“Àº “ÀÌ“°Í“µé“¿¡ “´ë“ÀÔ“½Ä“ÀÎ
“ÁÂ“º¯“°ª“ÀÌ “¾Æ“´Ï“¸é “¾È“µË“´Ï“´Ù.)

=begin original

A character range may be specified with a hyphen, so C<tr/A-J/0-9/>
does the same replacement as C<tr/ACEGIBDFHJ/0246813579/>.
For B<sed> devotees, C<y> is provided as a synonym for C<tr>.  If the
SEARCHLIST is delimited by bracketing quotes, the REPLACEMENTLIST has
its own pair of quotes, which may or may not be bracketing quotes,
e.g., C<tr[A-Z][a-z]> or C<tr(+\-*/)/ABCD/>.

=end original

“¹®“ÀÚ“ÀÇ “¹ü“À§“´Â “ÇÏ“ÀÌ“ÇÂ“À» “»ç“¿ë“ÇØ “Áö“Á¤“°¡“´É“ÇÕ“´Ï“´Ù.
C<tr/A-J/0-9/> “´Â C<tr/ACEGIBDFHJ/0246813579/> “¿Í “°°“Àº “Ä¡“È¯“À» “¼ö“Çà“ÇÕ“´Ï“´Ù.
B<sed> “ÀÇ “½Å“¾Ó“ÀÚ“¸¦ “À§“ÇØ C<y> “°¡ C<tr> “ÀÇ “µ¿“ÀÇ“¾î“·Î “Á¦“°ø“µÇ“°í “ÀÖ“½À“´Ï“´Ù.
SEARCHLIST “ÀÇ “°ý“È£“·ù“·Î “°¨“½Î“Áø “°æ“¿ì“¿¡“´Â
REPLACEMENTLIST “¿ë“À¸“·Î “ÇÑ“¹ø“´õ “ÇÑ“½Ö“ÀÇ “±¸“ºÐ“ÀÚ“¸¦ “ÁØ“ºñ“ÇÕ“´Ï“´Ù.
“ÀÌ“°Í“Àº “°ý“È£“·ù“ÀÌ“µç “¾Æ“´Ï“µç “»ó“°ü“Àº “¾ø“½À“´Ï“´Ù.
“¿¹“Á¦: C<tr[A-Z][a-z]> “³ª C<tr(+\-*/)/ABCD/>“¡£

=begin original

Note that C<tr> does B<not> do regular expression character classes
such as C<\d> or C<[:lower:]>.  The C<tr> operator is not equivalent to
the tr(1) utility.  If you want to map strings between lower/upper
cases, see L<perlfunc/lc> and L<perlfunc/uc>, and in general consider
using the C<s> operator if you need regular expressions.

=end original

C<tr> “Àº C<\d> “³ª C<[:lower:]> “°°“Àº “Á¤“±Ô“Ç¥“Çö“¹®“ÀÚ“Å¬“·¡“½º“¸¦ 
B<“»ç“¿ë“ÇÏ“Áö “¾Ê“´Â “°Í>“¿¡ “ÁÖ“ÀÇ“ÇÏ“¼¼“¿ä.
C<tr> “¿¬“»ê“ÀÚ“´Â tr(1) “À¯“Æ¿“¸®“Æ¼“¿Í “°°“Àº “°Ô “¾Æ“´Õ“´Ï“´Ù.
“¹®“ÀÚ“¿­“ÀÇ “´ë“¹®“ÀÚ/“¼Ò“¹®“ÀÚ“¸¦ “¸Å“ÇÎ“ÇÏ“°í “½Í“À» “¶§“´Â
L<perlfunc/lc> “¿Í L<perlfunc/uc> “¸¦ “Âü“Á¶“ÇØ“ÁÖ“¼¼“¿ä. 
“¶Ç “Á¤“±Ô“Ç¥“Çö“ÀÌ “ÇÊ“¿ä“ÇÑ “°æ“¿ì“¿¡“´Â “ÀÏ“¹Ý“Àû“À¸“·Î C<s> “¿¬“»ê“ÀÚ“¸¦ “»ç“¿ë“ÇÏ“´Â “°Í“À»
“°í“·Á“ÇØ“ÁÖ“¼¼“¿ä.

=begin original

Note also that the whole range idea is rather unportable between
character sets--and even within character sets they may cause results
you probably didn't expect.  A sound principle is to use only ranges
that begin from and end at either alphabets of equal case (a-e, A-E),
or digits (0-4).  Anything else is unsafe.  If in doubt, spell out the
character sets in full.

=end original

“¹ü“À§“Áö“Á¤“ÀÌ“¶ó“´Â “»ý“°¢“Àº “¹®“ÀÚ“¼Â“ÀÌ “´Ù“¸¥ “°æ“¿ì“´Â “´õ“¿í “ÀÌ“½Ä“¼º“¿¡ “Èì“ÀÌ “°¡“´Â “°Í“¿¡“µµ
“ÁÖ“ÀÇ“ÇØ“ÁÖ“¼¼“¿ä. -- “±×“¸®“°í “°°“Àº“¹®“ÀÚ“¼Â“ÀÌ“¾î“µµ “È¤“¿©“³ª “±â“´ë“ÇÏ“°í “ÀÖ“´Â “°Í“°ú“´Â
“´Ù“¸¥ “°á“°ú“¸¦ “ºÒ“·¯“ÀÏ“À¸“Å³ “¼ö“µµ “ÀÖ“½À“´Ï“´Ù.
“°Ç“Àü“ÇÑ “¿ø“Ä¢“Àº “¹ü“À§“ÀÇ “Ã³“À½“°ú “³¡“À» “¾Ë“ÆÄ“ºª(“´ë“¹®“ÀÚ/“¼Ò“¹®“ÀÚ“µµ “°°“ÀÌ, a-e, A-E)
“·Î “ÇÏ“µç“°¡, “¼ý“ÀÚ(0-4)“·Î “ÇÏ“´Â “°¡ “ÀÔ“´Ï“´Ù. 
“±× “¿Ü“¿¡“´Â “Àü“ºÎ “¾È“Àü“ÇÏ“Áö “¾Ê“½À“´Ï“´Ù.
“ÀÇ“¹®“ÀÌ “µé“¶§“´Â “¹®“ÀÚ“¼Â“À» “¿Ï“Àü“È÷ “»Ì“¾Æ“º¸“¼¼“¿ä.

=begin original

Options:

=end original

“¿É“¼Ç“Àº “¾Æ“·¡“¿Í “°°“½À“´Ï“´Ù. 

=begin original

    c	Complement the SEARCHLIST.
    d	Delete found but unreplaced characters.
    s	Squash duplicate replaced characters.

=end original

    c   SEARCHLIST “¸¦ “º¸“Áý“ÇÕ“À¸“·Î “ÇÕ“´Ï“´Ù. 
    d   “Ã£“¾Ò“Áö“¸¸ “Ä¡“È¯“µÇ“Áö “¾Ê“Àº “¹®“ÀÚ“¸¦ “»è“Á¦“ÇÕ“´Ï“´Ù. 
    s   “Ä¡“È¯“µÈ“¹®“ÀÚ“°¡ “Áß“º¹“µÈ “°æ“¿ì“¿¡“´Â “¾Ð“Ãà“ÇÕ“´Ï“´Ù. 

=begin original

If the C</c> modifier is specified, the SEARCHLIST character set
is complemented.  If the C</d> modifier is specified, any characters
specified by SEARCHLIST not found in REPLACEMENTLIST are deleted.
(Note that this is slightly more flexible than the behavior of some
B<tr> programs, which delete anything they find in the SEARCHLIST,
period.) If the C</s> modifier is specified, sequences of characters
that were transliterated to the same character are squashed down
to a single instance of the character.

=end original

C</c> “¼ö“½Ä“ÀÚ“°¡ “Áö“Á¤“µÇ“¸é, SEARCHLIST “¿¡“´Â “º¸“Áý“ÇÕ“ÀÌ “Áö“Á¤“µÈ “°Í“À¸“·Î
“ÇØ“¼®“µË“´Ï“´Ù.
C</d> “¼ö“½Ä“ÀÚ“°¡ “Áö“Á¤“µÇ“¸é SEARCHLIST“·Î “Áö“Á¤“µÈ
REPLACEMENTLIST “¿¡ “´ë“ÀÀ“ÇÏ“´Â “°Í“ÀÌ “¾ø“´Â “¹®“ÀÚ“°¡ “»è“Á¦“µË“´Ï“´Ù.
C</s> “¼ö“½Ä“ÀÚ“°¡ “Áö“Á¤“µÇ“¸é, “°°“Àº “¹®“ÀÚ“¿¡ “¹®“ÀÚ“Ä¡“È¯“µÈ “¹®“ÀÚ“ÀÇ “³ª“¿­“À»
1“¹®“ÀÚ“¸¸“À¸“·Î “¾Ð“Ãà“ÇÕ“´Ï“´Ù.

=begin original

If the C</d> modifier is used, the REPLACEMENTLIST is always interpreted
exactly as specified.  Otherwise, if the REPLACEMENTLIST is shorter
than the SEARCHLIST, the final character is replicated till it is long
enough.  If the REPLACEMENTLIST is empty, the SEARCHLIST is replicated.
This latter is useful for counting characters in a class or for
squashing character sequences in a class.

=end original

C</d> “¼ö“½Ä“ÀÚ“°¡ “»ç“¿ë“µÇ“¸é, REPLACEMENT “´Â “Ç×“»ó “Áö“Á¤“µÈ “´ë“·Î
“ÇØ“¼®“µË“´Ï“´Ù.
“±×“·¸“Áö “¾Ê“Àº “°æ“¿ì“¿¡“´Â REPLACEMENTLIST “°¡ SEARCHLIST “º¸“´Ù“µµ “Âª“À¸“¸é
“¹Ý“º¹“µÈ “°Í“À¸“·Î “Ãë“±Þ“ÇÕ“´Ï“´Ù.
REPLACEMENTLIST “°¡ “ºó“¹®“ÀÚ“¿­“ÀÎ “¶§“´Â, SEARCHLIST“¿Í “°°“¾Æ“Áý“´Ï“´Ù.
“ÈÄ“ÀÚ“´Â “¾î“¶² “¹®“ÀÚ“Å¬“·¡“½º“¿¡ “Æ÷“ÇÔ“µÈ “¹®“ÀÚ“¼ö“¸¦ “¼¼“´Â “¶§“³ª
“¾î“¶² “¹®“ÀÚ“Å¬“·¡“½º“ÀÇ “¹®“ÀÚ“ÀÇ “³ª“¿­“À» “¾Ð“Ãà“ÇÏ“´Â “°Í “°°“Àº “¶§“¿¡ “Æí“¸®“ÇÕ“´Ï“´Ù.

=begin original

Examples:

=end original

“¿¹“Á¦:

    $ARGV[1] =~ tr/A-Z/a-z/;	# canonicalize to lower case

    $cnt = tr/*/*/;		# count the stars in $_

    $cnt = $sky =~ tr/*/*/;	# count the stars in $sky

    $cnt = tr/0-9//;		# count the digits in $_

    tr/a-zA-Z//s;		# bookkeeper -> bokeper

    ($HOST = $host) =~ tr/a-z/A-Z/;

    tr/a-zA-Z/ /cs;		# change non-alphas to single space

    tr [\200-\377]
       [\000-\177];		# delete 8th bit

=begin original

If multiple transliterations are given for a character, only the
first one is used:

=end original

“¿©“·¯“°³“ÀÇ “¹®“ÀÚ“º¯“È¯“ÀÌ “ÇÏ“³ª“ÀÇ “¹®“ÀÚ“¿¡ “ÀÇ“ÇØ “Áö“Á¤“µÇ“¸é, “¸Ç“Ã³“À½ “°Í“¸¸ “»ç“¿ë“µË“´Ï“´Ù.

    tr/AAA/XYZ/

=begin original

will transliterate any A to X.

=end original

“´Â A “¸¦ X “·Î “º¯“È¯“ÇÕ“´Ï“´Ù. 

=begin original

Because the transliteration table is built at compile time, neither
the SEARCHLIST nor the REPLACEMENTLIST are subjected to double quote
interpolation.  That means that if you want to use variables, you
must use an eval():

=end original

“Ä¡“È¯“Å×“ÀÌ“ºí“Àº “ÄÄ“ÆÄ“ÀÏ“ÇÒ “¶§“¿¡ “¸¸“µé“¾î“Áö“±â“¶§“¹®“¿¡ SEARCHLIST “µµ
REPLACEMENTLIST “µµ “½Ö“µû“¿È“Ç¥ “Àü“°³“ÀÇ “´ë“»ó“ÀÌ “µÇ“Áö “¾Ê“½À“´Ï“´Ù.
“º¯“¼ö“¸¦ “»ç“¿ë“ÇÏ“°í “½Í“À» “¶§“¿¡“´Â,  eval() “À» “»ç“¿ë“ÇÏ“Áö“¾Ê“À¸“¸é “¾È“µË“´Ï“´Ù.

    eval "tr/$oldlist/$newlist/";
    die $@ if $@;

    eval "tr/$oldlist/$newlist/, 1" or die $@;

=item <<EOF
X<here-doc> X<heredoc> X<here-document> X<<< << >>>

=begin original

A line-oriented form of quoting is based on the shell "here-document"
syntax.  Following a C<< << >> you specify a string to terminate
the quoted material, and all lines following the current line down to
the terminating string are the value of the item.

=end original

“µû“¿È“Ç¥“ÀÇ “Çà“Áö“Çâ“Çü“½Ä“Àº “¼Ð“ÀÇ "Here-Document" “±¸“¹®“À» “±â“º»“À¸“·Î “ÇÏ“°í “ÀÖ“½À“´Ï“´Ù.
C<< << >> “¿¡“¼­ “°è“¼Ó“ÇØ“¼­ “µû“¿È“Ç¥“·Î “°¨“½Î“Áø “ÅØ“½º“Æ®“¸¦ “Á¾“·á“ÇÏ“°Ô“ÇÏ“´Â “¹®“ÀÚ“¿­“À» “Áö“Á¤
“ÇÒ “¼ö “ÀÖ“°í, “Çö“Àç“ÀÇ “Çà“ÀÇ “´Ù“À½“Çà “¿¡“¼­ “Á¾“´Ü“¹®“ÀÚ“¿­“±î“Áö“ÀÇ “¸ð“µç “Çà“ÀÌ “±× “Ç×“¸ñ“ÀÇ
“°ª“ÀÌ “µË“´Ï“´Ù.

=begin original

The terminating string may be either an identifier (a word), or some
quoted text.  An unquoted identifier works like double quotes.
There may not be a space between the C<< << >> and the identifier,
unless the identifier is explicitly quoted.  (If you put a space it
will be treated as a null identifier, which is valid, and matches the
first empty line.)  The terminating string must appear by itself
(unquoted and with no surrounding whitespace) on the terminating line.

=end original

“Á¾“´Ü“¹®“ÀÚ“¿­“¿¡“´Â, “½Ä“º°“ÀÚ(“´Ü“¾î) “°¡ “µû“¿È“Ç¥“·Î “ÃÄ“Áø “ÅØ“½º“Æ®“¸¦ “»ç“¿ë“ÇÒ “¼ö “ÀÖ“½À“´Ï“´Ù.
“ÀÌ “½Ä“º°“ÀÚ“´Â “½Ö“µû“¿È“Ç¥“°°“ÀÌ “Ãë“±Þ“µË“´Ï“´Ù.
“½Ä“º°“ÀÚ“°¡ “µû“¿È“Ç¥“ÃÄ“ÀÖ“Áö “¾Ê“Àº “°æ“¿ì C<< << >> “¿Í “½Ä“º°“ÀÚ“ÀÇ “»ç“ÀÌ“¿¡
“°ø“¹é“À» “³Ö“À» “¼ö “¾ø“½À“´Ï“´Ù.
(“¸¸“¾à “°ø“¹é“À» “³Ö“À¸“¸é, “ºó“½Ä“º°“ÀÚ“·Î“½á “Ãë“±Þ“µË“´Ï“´Ù; “ÀÌ“°Í“Àº “À¯“È¿“ÇÏ“¸ç,
“ÃÖ“ÃÊ“ÀÇ “ºó“Çà“ÀÌ “¸Å“Ä¡“ÇÏ“°Ô “µË“´Ï“´Ù.)
“Á¾“´Ü“¹®“ÀÚ“¿­“Àº “Á¾“´Ü“Çà“¿¡ “´Ü“Ã¼“·Î(“µû“¿È“Ç¥“¾ø“À¸“¸ç, “¾Õ“µÚ“¿¡ “°ø“¹é“¾ø“ÀÌ“µµ)
“³ª“Å¸“³ª“Áö “¾Ê“½À“´Ï“´Ù.

=begin original

If the terminating string is quoted, the type of quotes used determine
the treatment of the text.

=end original

“Á¾“´Ü“¹®“ÀÚ“¿­“ÀÌ “µû“¿È“Ç¥ “ÃÄ“Áö“Áö “¾Ê“Àº “°æ“¿ì“¿¡“´Â, “±× “µû“¿È“Ç¥“ÀÇ “Á¾“·ù“¿¡ “ÀÇ“ÇØ,
“µû“¿È“Ç¥“µÇ“¾î“Áø “ÅØ“½º“Æ®“ÀÇ “¾î“¶»“°Ô “´Ù“·ê “Áö “°á“Á¤“ÇÕ“´Ï“´Ù.

=over 4

=item Double Quotes

=begin original

Double quotes indicate that the text will be interpolated using exactly
the same rules as normal double quoted strings.

=end original

Double quotes indicate that the text will be interpolated using exactly
the same rules as normal double quoted strings.
(TBT)

       print <<EOF;
    The price is $Price.
    EOF

       print << "EOF"; # same as above
    The price is $Price.
    EOF

=item Single Quotes

=begin original

Single quotes indicate the text is to be treated literally with no
interpolation of its content. This is similar to single quoted
strings except that backslashes have no special meaning, with C<\\>
being treated as two backslashes and not one as they would in every
other quoting construct.

=end original

Single quotes indicate the text is to be treated literally with no
interpolation of its content. This is similar to single quoted
strings except that backslashes have no special meaning, with C<\\>
being treated as two backslashes and not one as they would in every
other quoting construct.
(TBT)

=begin original

This is the only form of quoting in perl where there is no need
to worry about escaping content, something that code generators
can and do make good use of.

=end original

This is the only form of quoting in perl where there is no need
to worry about escaping content, something that code generators
can and do make good use of.
(TBT)

=item Backticks

=begin original

The content of the here doc is treated just as it would be if the
string were embedded in backticks. Thus the content is interpolated
as though it were double quoted and then executed via the shell, with
the results of the execution returned.

=end original

The content of the here doc is treated just as it would be if the
string were embedded in backticks. Thus the content is interpolated
as though it were double quoted and then executed via the shell, with
the results of the execution returned.
(TBT)

       print << `EOC`; # execute command and get results
    echo hi there
    EOC

=back

=begin original

It is possible to stack multiple here-docs in a row:

=end original

“º¹“¼ö“ÀÇ here-docs“¸¦ “¿¬“¼Ó“ÇØ“¼­ “½º“ÅÃ“ÇÏ“´Â “°Í“µµ “°¡“´É“ÇÕ“´Ï“´Ù.

       print <<"foo", <<"bar"; # you can stack them
    I said foo.
    foo
    I said bar.
    bar

       myfunc(<< "THIS", 23, <<'THAT');
    Here's a line
    or two.
    THIS
    and here's another.
    THAT

=begin original

Just don't forget that you have to put a semicolon on the end
to finish the statement, as Perl doesn't know you're not going to
try to do this:

=end original

“¾Æ“·¡“¿Í “°°“Àº “°Í“À» “ÇÏ“°í“½Í“Àº “°Ô “¾Æ“´Ò“±î “ÇÏ“´Â “°Í“ÀÌ Perl “¿¡“°Ô “¸ð“¸£“´Â “°Í“ÀÌ“±â“¿¡,
“¹®“Àå “³¡“³»“±â“À§“ÇØ “¸Ç“¸¶“Áö“¸·“¿¡ “¼¼“¹Ì“ÄÝ“·Ð“À» “ºÙ“ÀÌ“Áö “¾Ê“À¸“¸é “¾È“µÈ“´Ù“´Â “°Í“À»
“ÀØ“Áö “¸»“¾Æ“ÁÖ“¼¼“¿ä.

       print <<ABC
    179231
    ABC
       + 20;

=begin original

If you want to remove the line terminator from your here-docs,
use C<chomp()>.

=end original

here-docs “¿¡“¼­ “Çà“Á¾“´Ü“ÀÚ“¸¦ “¾ø“¾Ö“°í “½Í“À»“¶§“´Â, C<chomp()> “¸¦ “»ç“¿ë“ÇÏ“¼¼“¿ä.

    chomp($string = <<'END');
    This is a string.
    END

=begin original

If you want your here-docs to be indented with the rest of the code,
you'll need to remove leading whitespace from each line manually:

=end original

here-docs“¸¦ “¼Ò“½º“ÀÌ“¿Ü“ÀÇ “ºÎ“ºÐ“¿¡“¼­ “ÀÎ“µ§“Æ®“ÇÏ“°í “½Í“À» “¶§“´Â
“°¢ “Çà“ÀÇ “¸Ç “¾Õ“ÀÇ “°ø“¹é“Àº “¼ö“µ¿“À¸“·Î “¾ø“¾Ù “ÇÊ“¿ä“°¡ “ÀÖ“½À“´Ï“´Ù.

    ($quote = <<'FINIS') =~ s/^\s+//gm;
       The Road goes ever on and on,
       down from the door where it began.
    FINIS

=begin original

If you use a here-doc within a delimited construct, such as in C<s///eg>,
the quoted material must come on the lines following the final delimiter.
So instead of

=end original

C<s///eg> “°°“Àº “±¸“ºÐ“ÀÚ“±¸“Á¶“ÀÇ “¾È“¿¡“¼­ here-docs“¸¦ “»ç“¿ë“ÇÏ“´Â “°æ“¿ì,
“ÀÎ“¿ë“µÈ “°Í“Àº “¸¶“Áö“¸·“ÀÇ “±¸“ºÐ“ÀÚ“¿¡ “ÀÌ“¾î“Áø “°Í“À¸“·Î“½á “¿À“Áö “¾Ê“À¸“¸é “¾È“µË“´Ï“´Ù.
“µû“¶ó“¼­, “¾Æ“·¡“¿Í “°°“Àº “°Í“ÀÌ “¾Æ“´Ï“¶ó;

    s/this/<<E . 'that'
    the other
    E
     . 'more '/eg;

=begin original

you have to write

=end original

“¾Æ“·¡“¿Í “°°“ÀÌ “¾²“Áö “¾Ê“À¸“¸é “¾È“µË“´Ï“´Ù.

    s/this/<<E . 'that'
     . 'more '/eg;
    the other
    E

=begin original

If the terminating identifier is on the last line of the program, you
must be sure there is a newline after it; otherwise, Perl will give the
warning B<Can't find string terminator "END" anywhere before EOF...>.

=end original

“ÇÁ“·Î“±×“·¥“ÀÇ “¸¶“Áö“¸· “Çà“¿¡ “Á¾“´Ü“½Ä“º°“ÀÚ“°¡ “ÀÖ“´Â “°æ“¿ì, “±× “µÚ“¿¡“´Â
“°³“Çà“ÀÌ “¾ø“À¸“¸é “¾È“µË“´Ï“´Ù; “±×“·¸“Áö “¾Ê“À¸“¸é Perl “Àº
B<Can't find string terminator "END" anywhere before EOF ...>“ÀÌ“¶ó“´Â
“°æ“°í“¸¦ “³À“´Ï“´Ù.

=begin original

Additionally, the quoting rules for the end of string identifier are not
related to Perl's quoting rules -- C<q()>, C<qq()>, and the like are not
supported in place of C<''> and C<"">, and the only interpolation is for
backslashing the quoting character:

=end original

“°Å“±â“¿¡ “¹®“ÀÚ“¿­“Á¾“´Ü“½Ä“º°“ÀÚ “´ë“ÇÑ “Æ÷“°ý “·ê“Àº Perl “ÀÇ “Æ÷“°ý “·ê“°ú“´Â
“°ü“°è“¾ø“½À“´Ï“´Ù. -- C<q()>, C<qq()> “¹× “°°“Àº “Á¾“·ù“ÀÇ “°Í“Àº C<''> “³ª C<""> “ÀÇ
“´ë“½Å “»ç“¿ë“ÇÒ “¼ö “¾ø“À¸“¸ç, “¹®“ÀÚ“¸¦ “ÀÎ“¿ë“ÇÏ“±â “À§“ÇØ “¹é“½½“·¡“½¬“¸¸“ÀÌ “Àü“°³“µË“´Ï“´Ù.

    print << "abc\"def";
    testing...
    abc"def

=begin original

Finally, quoted strings cannot span multiple lines.  The general rule is
that the identifier must be a string literal.  Stick with that, and you
should be safe.

=end original

“¸¶“Áö“¸·“¿¡ “ÀÎ“¿ë“µÈ “¹®“ÀÚ“¿­“Àº “¿©“·¯“ÁÙ“¿¡ “°É“Ä£ “°Í“Àº “¾ø“½À“´Ï“´Ù.
“½Ä“º°“ÀÚ“¿¡ “°ü“ÇÑ “ÀÏ“¹Ý“Àû“ÀÎ “·ê“Àº “¹®“ÀÚ“¿­“¸®“ÅÍ“·²“ÀÌ “¾Æ“´Ï“¸é “¾È“µÈ“´Ù“´Â “°Í“ÀÔ“´Ï“´Ù.
“ÀÌ“°Í“À» “µû“¸£“°í “ÀÖ“´Ù“¸é “¾È“Àü“ÇÒ “°Í“ÀÔ“´Ï“´Ù.

=back

=head2 Gory details of parsing quoted constructs
X<quote, gory details>

(“ÀÎ“¿ë“µÈ “±¸“Á¶“ÀÇ “ÆÐ“½º“¿¡ “°ü“ÇÑ “»ó“¼¼)

=begin original

When presented with something that might have several different
interpretations, Perl uses the B<DWIM> (that's "Do What I Mean")
principle to pick the most probable interpretation.  This strategy
is so successful that Perl programmers often do not suspect the
ambivalence of what they write.  But from time to time, Perl's
notions differ substantially from what the author honestly meant.

=end original

“¹º“°¡ “¿©“·¯ “ÇØ“¼®“ÀÌ “°¡“´É“ÇÑ “Ç¥“Çö“ÀÌ “ÀÖ“´Â “°æ“¿ì, Perl “Àº “°¡“Àå “¸í“È®“ÇÑ “ÇØ“¼®“À»
“¼±“ÅÃ“ÇÏ“±â “À§“ÇØ B<DWIM> ("Do What I Mean") “¿ø“Ä¢“À» “»ç“¿ë“ÇÕ“´Ï“´Ù.
“ÀÌ “Àü“·«“Àº “»ó“´ç“È÷ “¼º“°ø“Çß“±â “¶§“¹®“¿¡ Perl “ÇÁ“·Î“±×“·¡“¸Ó“¿Í “±×“·°“Àú“·°
“ÀÚ“½Å“ÀÌ “¾´ “°Í“ÀÇ “¸ð“¼ø“À» “ÀÇ“½É“ÇÏ“Áö “¾Ê“½À“´Ï“´Ù.
“±×“·¯“³ª “½Ã“°£“ÀÌ “Èå“¸§“¿¡ “µû“¶ó Perl “ÀÇ “°³“³ä“Àº “¸¸“µç “»ç“¶÷“ÀÌ “Á¤“¸» “ÀÇ“¹Ì“ÇÏ“°í “ÀÖ“´Â
“°Í“°ú“´Â “²Ï “´Þ“¶ó“Á³“½À“´Ï“´Ù.

=begin original

This section hopes to clarify how Perl handles quoted constructs.
Although the most common reason to learn this is to unravel labyrinthine
regular expressions, because the initial steps of parsing are the
same for all quoting operators, they are all discussed together.

=end original

“ÀÌ“¹ø “Àå“¿¡“¼­“´Â Perl “ÀÌ “¾î“¶² “ÀÎ“¿ë“±¸“Á¶“¸¦ “Ãë“±Þ“ÇÏ“´Â“°¡“¸¦ “¸í“È®“ÇÏ“°Ô “ÇÏ“°í“ÀÚ “ÇÕ“´Ï“´Ù.
“ÀÌ“°Í“À» “°ø“ºÎ“ÇÏ“°í“ÀÚ “ÇÏ“´Â “°¡“Àå “Èç“ÇÑ “ÀÌ“À¯“´Â “Á¤“±Ô“Ç¥“Çö“ÀÇ “¹Ì“±Ã“À» “¹þ“¾î“³ª“±â “À§“ÇÔ“ÀÌ“Áö“¸¸,
“ÆÐ“½º“ÀÇ “ÃÊ“±â“½º“ÅÜ“Àº “¸ð“µç “ÀÎ“¿ë“¿¬“»ê“ÀÚ“¿¡“¼­ “°°“±â“¶§“¹®“¿¡, “¸ð“µÎ “µ¿“½Ã“¿¡ “Ãë“±Þ“ÇÏ“°Ú“½À“´Ï“´Ù.

=begin original

The most important Perl parsing rule is the first one discussed
below: when processing a quoted construct, Perl first finds the end
of that construct, then interprets its contents.  If you understand
this rule, you may skip the rest of this section on the first
reading.  The other rules are likely to contradict the user's
expectations much less frequently than this first one.

=end original

Perl “ÀÇ “ÆÐ“½º“¿¡ “°ü“ÇÑ “·ê“¿¡“¼­ “°¡“Àå “Áß“¿ä“ÇÑ “°Í“Àº “¾Æ“·¡“¿¡“¼­ “±â“¼ú“ÇÏ“°í “ÀÖ“´Â “°Í “Áß
“Á¦“ÀÏ “Ã³“À½“ÀÇ “°Í“ÀÔ“´Ï“´Ù.
“Áï, “ÀÎ“¿ë“±¸“Á¶“¸¦ “Ã³“¸®“ÇÏ“°í“ÀÚ “ÇÒ “¶§, Perl “Àº “¿ì“¼± “±× “±¸“Á¶“ÀÇ
“¸¶“Áö“¸·“À» “Ã£“¾Æ“¼­ “³»“¿ë“À» “ÇØ“¼®“ÇÕ“´Ï“´Ù.
“ÀÌ “·ê“À» “ÀÌ“ÇØ“ÇÏ“¸é, “¿ì“¼±“Àº “ÀÌ “Àå“ÀÇ “³²“Àº “ºÎ“ºÐ“Àº “³Ñ“¾î“°¡“µµ “»ó“°ü“¾ø“½À“´Ï“´Ù.
“±× “¿Ü“ÀÇ “·ê“Àº “Ã³“À½“ÀÇ “·ê“°ú “ºñ“±³“ÇØ“¼­ “À¯“Àú“ÀÇ “¿¹“»ó“°ú “´Ù“¸¥ “ºó“µµ“´Â
“¾ó“¸¶ “µÇ“Áö “¾Ê“½À“´Ï“´Ù.

=begin original

Some passes discussed below are performed concurrently, but because
their results are the same, we consider them individually.  For different
quoting constructs, Perl performs different numbers of passes, from
one to four, but these passes are always performed in the same order.

=end original

“¾Æ“·¡“¿¡“¼­ “ÀÇ“³í“ÇÏ“´Â “ÆÐ“½º“¿¡“´Â “°°“Àº “¶§“¿¡ “½Ç“Çà“µÇ“´Â “°Í“µµ “ÀÖ“Áö“¸¸,
“°á“°ú“´Â “°°“Àº “°Í“ÀÌ“±â“¶§“¹®“¿¡ “º°“µµ“·Î “»ý“°¢“ÇÏ“±â“·Î “ÇÕ“´Ï.
“ÀÎ“¿ë“±¸“Á¶“ÀÇ “Á¾“·ù“¿¡ “µû“¶ó, Perl “ÀÌ “½Ç“Çà“ÇÏ“´Â “ÆÐ“½º“ÀÇ “¼ö“´Â
1“¿¡“¼­ 4“±î“Áö “´Ù“¸£“Áö“¸¸ “ÀÌ“·± “ÆÐ“½º“´Â “Ç×“»ó “°°“Àº “¼ø“¼­“·Î “½Ç“Çà“µË“´Ï“´Ù.

=over 4

=item Finding the end

(“¸¶“Áö“¸·“À» “Ã£“±â)

=begin original

The first pass is finding the end of the quoted construct, where
the information about the delimiters is used in parsing.
During this search, text between the starting and ending delimiters
is copied to a safe location. The text copied gets delimiter-independent.

=end original

The first pass is finding the end of the quoted construct, where
the information about the delimiters is used in parsing.
During this search, text between the starting and ending delimiters
is copied to a safe location. The text copied gets delimiter-independent.
(TBT)

=begin original

If the construct is a here-doc, the ending delimiter is a line
that has a terminating string as the content. Therefore C<<<EOF> is
terminated by C<EOF> immediately followed by C<"\n"> and starting
from the first column of the terminating line.
When searching for the terminating line of a here-doc, nothing
is skipped. In other words, lines after the here-doc syntax
are compared with the terminating string line by line.

=end original

If the construct is a here-doc, the ending delimiter is a line
that has a terminating string as the content. Therefore C<<<EOF> is
terminated by C<EOF> immediately followed by C<"\n"> and starting
from the first column of the terminating line.
When searching for the terminating line of a here-doc, nothing
is skipped. In other words, lines after the here-doc syntax
are compared with the terminating string line by line.
(TBT)

=begin original

For the constructs except here-docs, single characters are used as starting
and ending delimiters. If the starting delimiter is an opening punctuation
(that is C<(>, C<[>, C<{>, or C<< < >>), the ending delimiter is the
corresponding closing punctuation (that is C<)>, C<]>, C<}>, or C<< > >>).
If the starting delimiter is an unpaired character like C</> or a closing
punctuation, the ending delimiter is same as the starting delimiter.
Therefore a C</> terminates a C<qq//> construct, while a C<]> terminates
C<qq[]> and C<qq]]> constructs.

=end original

For the constructs except here-docs, single characters are used as starting
and ending delimiters. If the starting delimiter is an opening punctuation
(that is C<(>, C<[>, C<{>, or C<< < >>), the ending delimiter is the
corresponding closing punctuation (that is C<)>, C<]>, C<}>, or C<< > >>).
If the starting delimiter is an unpaired character like C</> or a closing
punctuation, the ending delimiter is same as the starting delimiter.
Therefore a C</> terminates a C<qq//> construct, while a C<]> terminates
C<qq[]> and C<qq]]> constructs.
(TBT)

=begin original

When searching for single-character delimiters, escaped delimiters
and C<\\> are skipped. For example, while searching for terminating C</>,
combinations of C<\\> and C<\/> are skipped.  If the delimiters are
bracketing, nested pairs are also skipped.  For example, while searching
for closing C<]> paired with the opening C<[>, combinations of C<\\>, C<\]>,
and C<\[> are all skipped, and nested C<[> and C<]> are skipped as well.
However, when backslashes are used as the delimiters (like C<qq\\> and
C<tr\\\>), nothing is skipped.
During the search for the end, backslashes that escape delimiters
are removed (exactly speaking, they are not copied to the safe location).

=end original

“ÇÑ “±Û“ÀÚ“ÀÇ “±¸“ºÐ“ÀÚ“¸¦ “Ã£“À» “°æ“¿ì, “ÀÌ“½º“ÄÉ“ÀÌ“ÇÁ“µÈ “±¸“ºÐ“ÀÚ“¿Í C<\\>“´Â
“³Ñ“¾î“°©“´Ï“´Ù.
“¿¹“¸¦ “µé“¾î, C</> “¸¦ “Ã£“À» “¶§“´Â, C<\\> “¿Í C<\/>“ÀÇ “Á¶“ÇÕ“Àº “³Ñ“¾î“°¡“¹ö“¸³“´Ï“´Ù.
“±¸“ºÐ“ÀÚ“°¡ “°ý“È£“·Î “ÁÖ“¾î“Á³“À» “°æ“¿ì“´Â “Áß“º¹“µÈ “±×“·ì“µµ “³Ñ“¾î“°¡“¹ö“¸³“´Ï“´Ù.
“¿¹“¸¦ “µé“¾î, “¿­“¸° C<[> “¿Í “±×“·ì“À» “ÀÌ“·ç“´Â “´Ý“´Â C<]>“¸¦ “Ã£“À» “¶§“¿¡“´Â
C<\\>, C<\]>, C<\[> “ÀÇ “Á¶“ÇÕ“Àº “Àü“ºÎ “¹«“½Ã“ÇÏ“°í
“°Å“±â“¿¡ “Áß“º¹“µÈ C<[>, C<]>“µµ “¹«“½Ã“ÇÕ“´Ï“´Ù.
“±×“·¯“³ª, (C<qq\\> “³ª C<tr\\\>“°°“ÀÌ) “¹é“½½“·¡“½¬“°¡ “±¸“ºÐ“ÀÚ“·Î“½á 
“»ç“¿ë“µÉ “°æ“¿ì“´Â “¾î“´À “°Í“µµ “¹«“½Ã“ÇÏ“Áö “¾Ê“½À“´Ï“´Ù.
“¸Ç “¸¶“Áö“¸·“ÀÇ “°Ë“»ö“Áß, “±¸“ºÐ“ÀÚ“¸¦ “ÀÌ“½º“ÄÉ“ÀÌ“ÇÁ“ÇÏ“´Â “¹é“½½“·¡“½¬“´Â “Á¦“°Å“µË“´Ï“´Ù.
(“¸»“ÇÑ “¹Ù“¿Í “°°“ÀÌ “Á¤“È®“È÷, “¾È“Àü“ÇÑ “Àå“¼Ò“¿¡ “º¹“»ç“´Â “ÇÏ“Áö“¾Ê“½À“´Ï“´Ù)

=begin original

For constructs with three-part delimiters (C<s///>, C<y///>, and
C<tr///>), the search is repeated once more.
If the first delimiter is not an opening punctuation, three delimiters must
be same such as C<s!!!> and C<tr)))>, in which case the second delimiter
terminates the left part and starts the right part at once.
If the left part is delimited by bracketing punctuations (that is C<()>,
C<[]>, C<{}>, or C<< <> >>), the right part needs another pair of
delimiters such as C<s(){}> and C<tr[]//>.  In these cases, whitespaces
and comments are allowed between both parts, though the comment must follow
at least one whitespace; otherwise a character expected as the start of
the comment may be regarded as the starting delimiter of the right part.

=end original

3 “°³“ÀÇ “±¸“ºÐ“ÀÚ“·Î “µÇ“´Â “±¸“Á¶ (C<s///>, C<y///>, C<tr///>) “ÀÇ “°æ“¿ì,
“°Ë“»ö“Àº “ÇÑ“¹ø “µµ “¹Ý“º¹“µË“´Ï“´Ù.
“¸Ç “Ã³“À½“ÀÇ “±¸“ºÐ“ÀÚ“°¡ “¿­“¸° “°ý“È£“°¡ “¾Æ“´Ñ “°æ“¿ì, C<s!!!> “¿Í C<tr)))> “°°“ÀÌ
3 “°³“ÀÇ “±¸“ºÐ“ÀÚ“´Â “°°“Àº “°Í“ÀÌ “¾Æ“´Ï“¸é “¾È“µË“´Ï“´Ù.
“ÀÌ “°æ“¿ì, 2“¹ø“Â°“ÀÇ “±¸“ºÐ“ÀÚ“°¡ “¿Þ“ÂÊ“ÀÇ “³¡“´Ü“°ú “¿À“¸¥“ÂÊ“ÀÇ “½Ã“ÀÛ“À» “µ¿“½Ã“¿¡ “¼ö“Çà“ÇÕ“´Ï“´Ù.

If the left part is delimited by bracketing punctuations (that is C<()>,
C<[]>, C<{}>, or C<< <> >>), the right part needs another pair of
delimiters such as C<s(){}> and C<tr[]//>.  In these cases, whitespaces
and comments are allowed between both parts, though the comment must follow
at least one whitespace; otherwise a character expected as the start of
the comment may be regarded as the starting delimiter of the right part.
(TBT)

=begin original

During this search no attention is paid to the semantics of the construct.
Thus:

=end original

“°Ë“»ö“ÇÏ“´Â “»ç“ÀÌ“¿¡ “±¸“Á¶“ÀÇ “¹®“¸Æ“Àº “°í“·Á“ÇÏ“Áö “¾Ê“½À“´Ï“´Ù.
“µû“¶ó“¼­;

    "$hash{"$foo/$bar"}"

=begin original

or:

=end original

“ÀÌ“°Å“³ª:

    m/
      bar	# NOT a comment, this slash / terminated m//!
     /x

=begin original

do not form legal quoted expressions.   The quoted part ends on the
first C<"> and C</>, and the rest happens to be a syntax error.
Because the slash that terminated C<m//> was followed by a C<SPACE>,
the example above is not C<m//x>, but rather C<m//> with no C</x>
modifier.  So the embedded C<#> is interpreted as a literal C<#>.

=end original

“Àº “Á¤“È®“ÇÑ “ÀÎ“¿ë“Ç¥“Çö“ÀÌ “¾Æ“´Õ“´Ï“´Ù.
“ÀÎ“¿ë“Àº “¸Ç “Ã³“À½“ÀÇ C<"> “³ª C</> “·Î “³¡“³ª“°í, 
“³²“Àº “ºÎ“ºÐ“Àº “¹®“¹ý“¿¡“·¯“°¡ “µË“´Ï“´Ù.
C<m//> “¸¦“³¡“³»“°í “ÀÖ“´Â “½½“·¡“½¬“ÀÇ “´Ù“À½“¿¡ “¿À“´Â “°Í“ÀÌ C<“°ø“¹é> “ÀÌ“¶ó“¼­,
“À§“ÀÇ “¿¹“Á¦“¿¡“¼­“´Â C<m//x> “°¡ “¾Æ“´Ñ C</x> “¾ø“´Â C<m//>“ÀÌ “µË“´Ï“´Ù.
“µû“¶ó“¼­, “¾È“¿¡ “ÀÖ“´Â C<#> “Àº “¸®“ÅÍ“·²“ÇÑ C<#> “·Î“½á “Ãë“±Þ“µË“´Ï“´Ù.

=begin original

Also no attention is paid to C<\c\> (multichar control char syntax) during
this search. Thus the second C<\> in C<qq/\c\/> is interpreted as a part
of C<\/>, and the following C</> is not recognized as a delimiter.
Instead, use C<\034> or C<\x1c> at the end of quoted constructs.

=end original

“ÀÌ “°Ë“»ö“À» “ÇÏ“´Â “»ç“ÀÌ“¿¡, C<\c\> (“¸Ö“Æ¼“¹Ù“ÀÌ“Æ®“¹®“ÀÚ“Á¦“¾î“¹®“¹ý)“¿¡ “½Å“°æ“¾²“Áö “¾Ê“½À“´Ï“´Ù.
“µû“¶ó“¼­, C<qq/\c\/>“ÀÇ 2“¹ø“Â°“ÀÇ C<\> “´Â C<\/> “ÀÇ “ÀÏ“ºÎ“·Î“½á “Ãë“±Þ“µÇ“°í,
“°Å“±â“¿¡ C</> “Àº “±¸“ºÐ“ÀÚ“·Î“½á “ÀÎ“½Ä“µÇ“Áö “¾Ê“½À“´Ï“´Ù.
“´ë“½Å“¿¡ “ÀÎ“¿ë“±¸“Á¶“ÀÇ “³¡“´Ü“Àº C<\034> “È¤“Àº C<\x1c>“¸¦ “»ç“¿ë“ÇØ“ÁÖ“¼¼“¿ä.

=item Interpolation
X<interpolation>

(“Àü“°³)

=begin original

The next step is interpolation in the text obtained, which is now
delimiter-independent.  There are multiple cases.

=end original

“´Ù“À½ “´Ü“°è“´Â, “¾ò“¾î“Áø(“±¸“ºÐ“ÀÚ“¿¡ “ÀÇ“Á¸“ÇÏ“Áö “¾Ê“Àº) “ÅØ“½º“Æ®“¿¡ “´ë“ÇÑ “Àü“°³“ÀÔ“´Ï“´Ù.
“¿©“·¯ “°æ“¿ì“°¡ “ÀÖ“½À“´Ï“´Ù.

=over 4

=item C<<<'EOF'>

=begin original

No interpolation is performed.
Note that the combination C<\\> is left intact, since escaped delimiters
are not available for here-docs.

=end original

“Àü“°³“´Â “¼ö“Çà“µÇ“Áö “¾Ê“½À“´Ï“´Ù.
C<\\> “ÀÇ “Á¶“ÇÕ“Àº “±×“´ë“·Î“ÀÎ “°Í“¿¡ “ÁÖ“ÀÇ“ÇØ“ÁÖ“¼¼“¿ä.
here-docs“¿¡“¼­“´Â “±¸“ºÐ“ÀÚ“ÀÇ “ÀÌ“½º“ÄÉ“ÀÌ“ÇÁ“´Â “µÇ“Áö “¾Ê“±â “¶§“¹®“ÀÔ“´Ï“´Ù.

=item  C<m''>, the pattern of C<s'''>

=begin original

No interpolation is performed at this stage.
Any backslashed sequences including C<\\> are treated at the stage
to L</"parsing regular expressions">.

=end original

No interpolation is performed at this stage.
Any backslashed sequences including C<\\> are treated at the stage
to L</"parsing regular expressions">.
(TBT)

=item C<''>, C<q//>, C<tr'''>, C<y'''>, the replacement of C<s'''>

=begin original

The only interpolation is removal of C<\> from pairs of C<\\>.
Therefore C<-> in C<tr'''> and C<y'''> is treated literally
as a hyphen and no character range is available.
C<\1> in the replacement of C<s'''> does not work as C<$1>.

=end original

C<\\> “ÀÇ “Á¶“ÇÕ“¿¡ “ÀÇ“ÇÑ C<\> “ÀÇ “»è“Á¦“¸¸“ÀÌ “¼ö“Çà“µË“´Ï“´Ù.
“µû“¶ó“¼­ C<tr''> “³ª C<y'''> “ÀÇ “¾È“¿¡ “ÀÖ“´Â C<-> “´Â “¹®“ÀÚ“±×“´ë“·Î “ÇÏ“ÀÌ“ÇÂ“À¸“·Î“½á
“Ãë“±Þ“µÇ“°í “¹®“ÀÚ“¹ü“À§“´Â “»ç“¿ë“ÇÏ“Áö “¾Ê“½À“´Ï“´Ù.
C<s'''> “ÀÈ “Ä¡“È¯“¹®“ÀÚ“¿­“¿¡“¼­“ÀÇ C<\1> “Àº C<$1>“·Î“½á“´Â “µ¿“ÀÛ“ÇÏ“Áö “¾Ê“½À“´Ï“´Ù.

=item C<tr///>, C<y///>

=begin original

No variable interpolation occurs.  String modifying combinations for
case and quoting such as C<\Q>, C<\U>, and C<\E> are not recognized.
The other escape sequences such as C<\200> and C<\t> and backslashed
characters such as C<\\> and C<\-> are converted to appropriate literals.
The character C<-> is treated specially and therefore C<\-> is treated
as a literal C<->.

=end original

No variable interpolation occurs.  String modifying combinations for
case and quoting such as C<\Q>, C<\U>, and C<\E> are not recognized.
The other escape sequences such as C<\200> and C<\t> and backslashed
characters such as C<\\> and C<\-> are converted to appropriate literals.
The character C<-> is treated specially and therefore C<\-> is treated
as a literal C<->.
(TBT)

=item C<"">, C<``>, C<qq//>, C<qx//>, C<< <file*glob> >>, C<<<"EOF">

=begin original

C<\Q>, C<\U>, C<\u>, C<\L>, C<\l> (possibly paired with C<\E>) are
converted to corresponding Perl constructs.  Thus, C<"$foo\Qbaz$bar">
is converted to C<$foo . (quotemeta("baz" . $bar))> internally.
The other escape sequences such as C<\200> and C<\t> and backslashed
characters such as C<\\> and C<\-> are replaced with appropriate
expansions.

=end original

C<\Q>, C<\U>, C<\u>, C<\L>, C<\l> (“¾Æ“¸¶“µµ C<\E> “¿Í“ÀÇ “Á¶“ÇÕ)“Àº
“´ë“ÀÀ“ÇÏ“´Â Perl “±¸“Á¶“¿¡ “º¯“È¯“µË“´Ï“´Ù.
“µû“¶ó“¼­,C<"$foo\Qbaz$bar"> “Àº “³»“ºÎ“Àû“À¸“·Î
C<$foo . (quotemeta("baz" . $bar))> “·Î “º¯“È¯“µË“´Ï“´Ù. 
C<\200> “³ª C<\t> “°°“ÀÌ, “±× “¿Ü“ÀÇ “ÀÌ“½º“ÄÉ“ÀÌ“ÇÁ“½Ã“Äö“½º“³ª C<\\>“³ª C<\->“°°“Àº
“¹é“½½“·¡“½¬“°¡ “ºÙ“Àº “¹®“ÀÚ“´Â “Àû“Àý“ÇÑ “È®“Àå“À¸“·Î “Ä¡“È¯“µË“´Ï“´Ù.

=begin original

Let it be stressed that I<whatever falls between C<\Q> and C<\E>>
is interpolated in the usual way.  Something like C<"\Q\\E"> has
no C<\E> inside.  instead, it has C<\Q>, C<\\>, and C<E>, so the
result is the same as for C<"\\\\E">.  As a general rule, backslashes
between C<\Q> and C<\E> may lead to counterintuitive results.  So,
C<"\Q\t\E"> is converted to C<quotemeta("\t")>, which is the same
as C<"\\\t"> (since TAB is not alphanumeric).  Note also that:

=end original

I<C<\Q> “¿Í C<\E> “»ç“¿¡“ÀÌ “ÀÖ“´Â “¸ð“µç “°Í> “ÀÌ “ÀÏ“¹Ý“Àû“ÀÎ “¹æ“¹ý“À¸“·Î “Àü“°³“µË“´Ï“´Ù.
C<"\Q\\E"> “°°“Àº “°Í“Àº “³»“ºÎ“¿¡ “ÀÖ“´Â “°Í“Àº C<\E>“°¡ “¾Æ“´Ñ 
C<\Q>, C<\\>, C<E> “ÀÌ“±â“¶§“¹®“¿¡, “°á“°ú“´Â C<"\\\\E"> “¿Í “°°“¾Æ“Áý“´Ï“´Ù. 
“ÀÏ“¹Ý“Àû“ÀÎ “·ê“·Î“½á, C<\Q>“¿Í C<\E>“ÀÇ “»ç“ÀÌ“¿¡ “ÀÖ“´Â “¹é“½½“·¡“½¬“´Â
“»ý“°¢“ÇÏ“´Â “°Í“°ú“´Â “´Ù“¸¥ “°á“°ú“°¡ “µË“´Ï“´Ù.
“±×“·¡“¼­ C<"\Q\t\E"> “´Â C<quotemeta("\t">“·Î “º¯“È¯“µÇ“°í, “ÀÌ“°Í“Àº(TAB “Àº
“¿µ“¾î“¼ý“ÀÚ“°¡ “¾Æ“´Ñ C<"\\\t">“¿Í “°°“½À“´Ï“´Ù.
“¾Æ“·¡“¿Í “°°“Àº “°Í“¿¡“µµ “ÁÖ“ÀÇ“ÇØ “ÁÖ“¼¼“¿ä.

  $str = '\t';
  return "\Q$str";

=begin original

may be closer to the conjectural I<intention> of the writer of C<"\Q\t\E">.

=end original

“ÀÌ“°Í“Àº C<"\Q\t\E"> “À» “¾´ “»ç“¶÷“ÀÇ “¾ï“Ãø“»ó“ÀÇ I<“ÀÇ“µµ> “¿¡ “°¡“±õ“½À“´Ï“´Ù.

=begin original

Interpolated scalars and arrays are converted internally to the C<join> and
C<.> catenation operations.  Thus, C<"$foo XXX '@arr'"> becomes:

=end original

“Àü“°³“µÈ “½º“Ä®“¤¿“¿Í “¹è“¿­“Àº “³»“ºÎ“¿¡“¼­ C<join> “°ú C<.> “ÀÇ “°á“ÇÕ“Á¶“ÀÛ“À¸“·Î “º¯“È¯“µË“´Ï“´Ù.
“µû“¶ó“¼­, C<"$foo XXX '@arr'"> “Àº “¾Æ“·¡“Ã³“·³ “µË“´Ï“´Ù.

  $foo . " XXX '" . (join $", @arr) . "'";

=begin original

All operations above are performed simultaneously, left to right.

=end original

“À§“ÀÇ “¸ð“µç “Á¶“ÀÛ“Àº “¿Þ“ÂÊ“¿¡“¼­ “¿À“¸¥“ÂÊ“À¸“·Î “µ¿“½Ã“¿¡ “ÀÌ“·ç“¾î“Áý“´Ï“´Ù.

=begin original

Because the result of C<"\Q STRING \E"> has all metacharacters
quoted, there is no way to insert a literal C<$> or C<@> inside a
C<\Q\E> pair.  If protected by C<\>, C<$> will be quoted to became
C<"\\\$">; if not, it is interpreted as the start of an interpolated
scalar.

=end original

C<"\Q STRING \E"> “ÀÇ “°á“°ú“´Â “¸ð“µç “¸Þ“Å¸“¹®“ÀÚ“°¡ “ÀÎ“¿ë“µÈ “°Í“ÀÌ“¹Ç“·Î,
C<\Q\E> “ÀÇ “Á¶“ÇÕ“ÀÇ “³»“ºÎ“¿¡ “¸®“ÅÍ“·²“ÇÑ C<$> “³ª C<@> “¸¦ “»ð“ÀÔ“ÇÏ“´Â “¹æ“¹ý“Àº “¾ø“½À“´Ï“´Ù.
C<\> “¿¡“ÀÇ“ÇØ “º¸“È£“µÇ“´Â “°æ“¿ì, C<$> “Àº “ÀÎ“¿ë“µÈ C<"\\\$"> “ÀÌ “µË“´Ï“´Ù.
“±×“·¸“Áö “¾Ê“Àº “°æ“¿ì, “ÀÌ“°Í“Àº “Àü“°³“µÇ“´Â “½º“Ä®“¶ó“º¯“¼ö“ÀÇ “½Ã“ÀÛ“À¸“·Î“½á “ÇØ“¼®“µË“´Ï“´Ù.

=begin original

Note also that the interpolation code needs to make a decision on
where the interpolated scalar ends.  For instance, whether
C<< "a $b -> {c}" >> really means:

=end original

“Àü“°³“ÄÚ“µå“´Â “Àü“°³“ÇÏ“´Â “½º“Ä®“¶ó“º¯“¼ö“°¡ “¾î“µð“¿¡“¼­ “³¡“³ª“´Â “°¡“¸¦ “°á“Á¤“ÇÒ “ÇÊ“¿ä“°¡
“ÀÖ“´Ù“´Â “°Í“¿¡“µµ “ÁÖ“ÀÇ“ÇØ“ÁÖ“¼¼“¿ä.
“¿¹“¸¦ “µé“¾î, C<< "a $b -> {c} " >> “ÀÌ “½Ç“Á¦“·Î “¾Æ“·¡“Ã³“·³ “µÉ“°Í“ÀÎ“°¡

  "a " . $b . " -> {c}";

=begin original

or:

=end original

“¾Æ“·¡“Ã³“·³ “µÉ“°Í“ÀÎ“°¡ “ÇÏ“´Â “°Í “ÀÔ“´Ï“´Ù.

  "a " . $b -> {c};

=begin original

Most of the time, the longest possible text that does not include
spaces between components and which contains matching braces or
brackets.  because the outcome may be determined by voting based
on heuristic estimators, the result is not strictly predictable.
Fortunately, it's usually correct for ambiguous cases.

=end original

“´ë“ºÎ“ºÐ“ÀÇ “°æ“¿ì, “¿ä“¼Ò“¿Í, “¸Å“Ä¡“ÇÏ“´Â “Áß“°ý“È£“³ª “´ë“°ý“È£“ÀÇ “»ç“ÀÌ“¿¡ “°ø“¹é“À» “Æ÷“ÇÔ“ÇÏ“Áö “¾Ê“°í,
“¾ö“Ã» “±ä “ÅØ“½º“Æ®“°¡ “µË“´Ï“´Ù.
“Ãâ“·Â“Àº “Ãß“Á¤“±â“µÎ“°í “Åõ“Ç¥“¿¡ “ÀÇ“ÇØ “°á“Á¤“µÇ“¾î“Áú“¶§, “°á“°ú“´Â “¾ö“¹Ð“ÇÏ“°Ô
“¿¹“Ãø“ÇÒ “¼ö “¾ø“½À“´Ï“´Ù.
“¿î“ÁÁ“°Ô“µµ, “¸ð“È£“ÇÑ “°æ“¿ì“¿¡“µµ “ÀÏ“¹Ý“Àû“À¸“·Î“´Â “¸Â“½À“´Ï“´Ù. 

=item the replacement of C<s///>

=begin original

Processing of C<\Q>, C<\U>, C<\u>, C<\L>, C<\l>, and interpolation
happens as with C<qq//> constructs.

=end original

C<\Q>, C<\U>, C<\u>, C<\L>, C<\l> “ÀÇ “Ã³“¸®“¿Í “Àü“°³“°¡  C<qq//> “±¸“Á¶“¿Í
“°°“°Ô “ÀÏ“¾î“³³“´Ï“´Ù.

=begin original

It is at this step that C<\1> is begrudgingly converted to C<$1> in
the replacement text of C<s///>, in order to correct the incorrigible
I<sed> hackers who haven't picked up the saner idiom yet.  A warning
is emitted if the C<use warnings> pragma or the B<-w> command-line flag
(that is, the C<$^W> variable) was set.

=end original

“ÀÌ “½º“ÅÜ“¿¡“¼­“´Â “º¸“´Ù “°Ç“Àü“ÇÑ “¹®“¹ý“À» “¾Æ“Á÷ “µµ“ÀÔ“ÇÏ“Áö “¾Ê“Àº, “Áö“Áö “¾Ê“À¸“·Á“´Â I<sed>
“ÇØ“Ä¿“¸¦ “À§“ÇØ C<s///>“ÀÇ “Ä¡“È¯“ÅØ“½º“Æ®“ÀÇ “¾È“¿¡ “ÀÖ“´Â C<\1> “À», “¸¶“Áö“¸ø“ÇØ 
C<$1>“·Î “º¯“È¯“ÇÕ“´Ï“´Ù.
C<use warnings> “ÇÁ“¶ó“±×“¸¶ “³ª “Ä¿“¸Ç“µå“¶ó“ÀÎ“¿É“¼Ç B<-w> (“ÀÌ“°Í“Àº C<$^W> “º¯“¼ö“ÀÔ“´Ï“´Ù)
“°¡ “¼¼“ÆÃ“µÇ“¾î “ÀÖ“À¸“¸é “°æ“°í“°¡ “»ý“¼º“µË“´Ï“´Ù.

=item C<RE> in C<?RE?>, C</RE/>, C<m/RE/>, C<s/RE/foo/>,

=begin original

Processing of C<\Q>, C<\U>, C<\u>, C<\L>, C<\l>, C<\E>,
and interpolation happens (almost) as with C<qq//> constructs.

=end original

C<\Q>, C<\U>, C<\u>, C<\L>, C<\l> C<\E> “ÀÇ “Ã³“¸®“¿Í “Àü“°³“°¡ C<qq//> “±¸“Á¶“¿Í
(“°Å“ÀÇ) “°°“°Ô “ÀÏ“¾î“³³“´Ï“´Ù.

=begin original

However any other combinations of C<\> followed by a character
are not substituted but only skipped, in order to parse them
as regular expressions at the following step.
As C<\c> is skipped at this step, C<@> of C<\c@> in RE is possibly
treated as an array symbol (for example C<@foo>),
even though the same text in C<qq//> gives interpolation of C<\c@>.

=end original

However any other combinations of C<\> followed by a character
are not substituted but only skipped, in order to parse them
as regular expressions at the following step.
As C<\c> is skipped at this step, C<@> of C<\c@> in RE is possibly
treated as an array symbol (for example C<@foo>),
even though the same text in C<qq//> gives interpolation of C<\c@>.
(TBT)

=begin original

Moreover, inside C<(?{BLOCK})>, C<(?# comment )>, and
a C<#>-comment in a C<//x>-regular expression, no processing is
performed whatsoever.  This is the first step at which the presence
    of the C<//x> modifier is relevant.

=end original

“°Å“±â“¿¡ C<(?{BLOCK})>, C<(?# comment )>, C<//x> “Á¤“±Ô“Ç¥“Çö“¿¡“¼­“ÀÇ C<#> “ÀÇ
“ÄÚ“¸à“Æ® “¾È“¿¡“¼­“´Â, “¾î“¶°“ÇÑ “Ã³“¸®“µµ “¼ö“Çà“ÇÏ“Áö “¾Ê“½À“´Ï“´Ù.
“ÀÌ“°Í“Àº C<//x> “¼ö“½Ä“ÀÚ“°¡ “¿µ“Çâ“À» “ÁÖ“´Â “Ã¹“¹ø“Â° “Àý“Â÷“ÀÔ“´Ï“´Ù.

=begin original

Interpolation in patterns has several quirks: C<$|>, C<$(>, C<$)>, C<@+>
and C<@-> are not interpolated, and constructs C<$var[SOMETHING]> are
voted (by several different estimators) to be either an array element
or C<$var> followed by an RE alternative.  This is where the notation
C<${arr[$bar]}> comes handy: C</${arr[0-9]}/> is interpreted as
array element C<-9>, not as a regular expression from the variable
C<$arr> followed by a digit, which would be the interpretation of
C</$arr[0-9]/>.  Since voting among different estimators may occur,
the result is not predictable.

=end original

“ÆÐ“ÅÏ “¾È“ÀÇ “Àü“°³“¿¡“¼­“´Â “¸î“°³“ÀÎ“°¡ “Æ¯“¼ö“ÇÑ “µ¿“ÀÛ“À» “ÇÕ“´Ï“´Ù:
C<$|>, C<$(>, C<$)>, C<@+>, C<@-> “Àº “Àü“°³“µÇ“Áö “¾Ê“°í
C<$var[SOMETHING]> “´Â(“¸î“°³“ÀÎ“°¡ “´Ù“¸¥ “Ãß“Á¤“±â“¿¡ “ÀÇ“ÇØ) “¹è“¿­“ÀÇ “¿ä“¼Ò“ÀÎ“°¡
C<$var> “ÀÇ “µÚ“¿¡ “Á¤“±Ô“Ç¥“Çö“ÀÌ “µû“¶ó“¿À“´Â “°Í“ÀÎ“°¡“¸¦ “Åõ“Ç¥“ÇÕ“´Ï“´Ù.
“ÀÌ“°Í“Àº C<${arr[$bar]}> “°¡ “Æí“¸®“ÇØ“Áö“´Â “Á¡“ÀÔ“´Ï“´Ù.  C</${arr[0-9]}/> “Àº
“¹è“¿­“¿ä“¼Ò C<-9> “·Î “ÇØ“¼®“µÇ“°í, C</$arr[0-9]/>“ÀÇ “°æ“¿ì“¿¡ “ÀÇ“ÇØ C<$arr> “ÀÇ “µÚ“¿¡
“¼ý“ÀÚ“°ª“ÀÌ “µû“¶ó“¿À“´Â “°Í“°ú “°°“Àº “Á¤“±Ô“Ç¥“Çö“À¸“·Î “ÇØ“¼®“µÇ“Áö “¾Ê“½À“´Ï“´Ù.
“´Ù“¸¥ “Ãß“Á¤“±â“¿¡ “ÀÇ“ÇØ “Åõ“Ç¥“µÇ“´Â “°Í“ÀÌ “ÀÖ“¾î“¼­ “°á“°ú“´Â “¿¹“Ãø“ÇÒ “¼ö “¾ø“½À“´Ï“´Ù.

=begin original

The lack of processing of C<\\> creates specific restrictions on
the post-processed text.  If the delimiter is C</>, one cannot get
the combination C<\/> into the result of this step.  C</> will
finish the regular expression, C<\/> will be stripped to C</> on
the previous step, and C<\\/> will be left as is.  Because C</> is
equivalent to C<\/> inside a regular expression, this does not
matter unless the delimiter happens to be character special to the
RE engine, such as in C<s*foo*bar*>, C<m[foo]>, or C<?foo?>; or an
alphanumeric char, as in:

=end original

C<\\> “¸¦ “Ã³“¸®“ÇÏ“Áö “¾Ê“´Â “°Í“¿¡ “µû“¶ó, “ÈÄ“Ã³“¸®“ÇÑ “ÅØ“½º“Æ®“¿¡ “Æ¯“Á¤“ÀÇ “Á¦“ÇÑ“ÀÌ “ÀÖ“½À“´Ï“´Ù.
“±¸“ºÐ“ÀÚ“°¡ C</> “ÀÇ “°æ“¿ì, “ÀÌ “½º“ÅÜ“ÀÇ “°á“°ú“·Î“½á C<\/>“¸¦ “¾ò“À» “¼ö “¾ø“½À“´Ï“´Ù.
C</> “´Â “Á¤“±Ô“Ç¥“Çö“À» “³¡“³»“°í, C<\/>“´Â “¾Õ“ÀÇ “½º“ÅÜ“¿¡“¼­ C</>“¿¡ “Àü“°³“µÇ“¾î
C<\\/>“´Â “±×“´ë“·Î “³²“°Ô “µË“´Ï“´Ù.
C</> “´Â “Á¤“±Ô“Ç¥“Çö “¾È“¿¡“¼­“´Â C<\/> “¿Í “°°“À¸“¹Ç, “ÀÌ“°Í“Àº “°¡“²û “±¸“ºÐ“ÀÚ“°¡
“Á¤“±Ô“Ç¥“Çö “¿£“Áø“¿¡“¼­ “Æ¯“º°“ÇÑ “¹®“ÀÚ“ÀÎ “°æ“¿ì, “Áï C<s*foo*bar*>,
C<m[foo]>, C<?foo?> “°°“Àº “°æ“¿ì, “È¤“Àº “¾Æ“·¡“¿Í “°°“Àº “¿µ“¼ý“ÀÚ“°¡ “¾Æ“´Ï“¸é “¹®“Á¦“¾ø“½À“´Ï“´Ù.

  m m ^ a \s* b mmx;

=begin original

In the RE above, which is intentionally obfuscated for illustration, the
delimiter is C<m>, the modifier is C<mx>, and after delimiter-removal the
RE is the same as for C<m/ ^ a \s* b /mx>.  There's more than one
reason you're encouraged to restrict your delimiters to non-alphanumeric,
non-whitespace choices.

=end original

“À§“ÀÇ “Á¤“±Ô“Ç¥“Çö“¿¡“¼­“´Â “¼³“¸í“À» “À§“ÇØ “ÀÇ“µµ“Àû“À¸“·Î “¾Ë“±â“¾î“·Æ“°Ô “ÇØ“³õ“¾Ò“Áö“¸¸,
“±¸“ºÐ“ÀÚ“´Â C<m>“ÀÌ“°í, “¼ö“½Ä“ÀÚ“´Â C<mx>“ÀÌ“¸ç, “±¸“ºÐ“ÀÚ“¸¦ “»« “µÚ“ÀÇ
“Á¤“±Ô“Ç¥“Çö“Àº C<m/ ^ a \s* b /mx> “¿Í “°°“½À“´Ï“´Ù.
“±¸“ºÐ“ÀÚ“¸¦ “¿µ“¼ý“ÀÚ“³ª “°ø“¹é“ÀÌ “¾Æ“´Ñ “°Í“¿¡ “Á¦“ÇÑ“ÇØ“¾ß“ÇÒ “ÀÌ“À¯“´Â “¿©“·¯“°¡“Áö“°¡ “ÀÖ“½À“´Ï“´Ù.

=back

=begin original

This step is the last one for all constructs except regular expressions,
which are processed further.

=end original

“ÀÌ“°Í“Àº “Á¤“±Ô“Ç¥“Çö “ÀÌ“¿Ü“ÀÇ “¸ð“µç “±¸“Á¶“¿¡“¼­ “¸¶“Áö“¸·“ÀÇ “½º“ÅÜ“ÀÔ“´Ï“´Ù.
“Á¤“±Ô“Ç¥“Çö“Àº “°Å“±â“¿¡ “Ã³“¸®“°¡ “µ¡“ºÙ“½À“´Ï“´Ù.

=item parsing regular expressions
X<regexp, parse>

(“Á¤“±Ô“Ç¥“Çö“ÀÇ “ÆÐ“½º)

=begin original

Previous steps were performed during the compilation of Perl code,
but this one happens at run time--although it may be optimized to
be calculated at compile time if appropriate.  After preprocessing
described above, and possibly after evaluation if concatenation,
joining, casing translation, or metaquoting are involved, the
resulting I<string> is passed to the RE engine for compilation.

=end original

“ÀÌ“Àü “½º“ÅÜ“Àº Perl “ÄÚ“µå“ÀÇ “ÄÄ“ÆÄ“ÀÏ“Áß“¿¡ “½Ç“Çà“µÇ“Áö“¸¸,
“ÀÌ“°Í“Àº “½Ç“Çà“½Ã“¿¡ “¹ß“»ý“ÇÕ“´Ï“´Ù -- “ÇÏ“Áö“¸¸ “¸¸“¾à “Àû“Àý“ÇÏ“´Ù“¸é “ÄÄ“ÆÄ“ÀÏ “½Ã“¿¡
“°è“»ê“ÇÒ “¼ö “ÀÖ“µµ“·Ï “ÃÖ“Àû“È­“µÇ“´Â “°æ“¿ì“µµ “ÀÖ“½À“´Ï“´Ù.
“À§“ÀÇ “Àü“Ã³“¸® “ÈÄ, “±×“¸®“°í “ÇÊ“¿ä“ÇÏ“´Ù“¸é “¿¬“°á, “°á“ÇÕ, “´ë“¹®“ÀÚ“¼Ò“¹®“ÀÚ“º¯“È¯,
“¸Þ“Å¸“Äõ“Æ®“È­“°¡ “¼ö“Çà“µÈ “ÈÄ, “°á“°ú“ÀÇ I<“¹®“ÀÚ“¿­> “ÀÌ “ÄÄ“ÆÄ“ÀÏ“¶§“¹®“¿¡
“Á¤“±Ô“Ç¥“Çö “¿£“Áø“À¸“·Î “³Ñ“°Ü“Áý“´Ï“´Ù.

=begin original

Whatever happens in the RE engine might be better discussed in L<perlre>,
but for the sake of continuity, we shall do so here.

=end original

“Á¤“±Ô“Ç¥“Çö“¿£“Áø“¿¡“¼­ “ÀÏ“¾î“³ª“´Â “ÀÏ“µé“¿¡ “´ë“ÇØ“¼­“´Â L<perlre>“¿¡“¼­ “ÀÇ“³í“ÇÏ“´Â “Æí“ÀÌ
“ÁÁ“°Ú“Áö“¸¸, “°è“¼Ó“¼º“À» “À§“ÇØ “¿©“±â“¼­ “±× “¾ê“±â“¸¦ “ÇØ“º¸“µµ“·Ï “ÇÕ“´Ï“´Ù.

=begin original

This is another step where the presence of the C<//x> modifier is
relevant.  The RE engine scans the string from left to right and
converts it to a finite automaton.

=end original

“ÀÌ“°Í“µµ C<//x> “¼ö“½Ä“ÀÚ“ÀÇ “Á¸“Àç“°¡ “°ü“·Ã“ÇÑ “½º“ÅÜ“ÀÇ “ÇÏ“³ª“ÀÔ“´Ï“´Ù.
“Á¤“±Ô“Ç¥“Çö“¿£“Áø“Àº “¹®“ÀÚ“¿­“À» “¿Þ“ÂÊ“¿¡“¼­ “¿À“¸¥“ÂÊ“À¸“·Î “½º“Äµ“ÇØ“¼­, “À¯“ÇÑ“»ó“ÅÂ “¿À“Åä“¸¶“Åæ“À¸“·Î
“º¯“È¯“ÇÕ“´Ï“´Ù.

=begin original

Backslashed characters are either replaced with corresponding
literal strings (as with C<\{>), or else they generate special nodes
in the finite automaton (as with C<\b>).  Characters special to the
RE engine (such as C<|>) generate corresponding nodes or groups of
nodes.  C<(?#...)> comments are ignored.  All the rest is either
converted to literal strings to match, or else is ignored (as is
whitespace and C<#>-style comments if C<//x> is present).

=end original

“¹é“½½“·¡“½¬“°¡ “ºÙ“Àº “¹®“ÀÚ“´Â(C<\{>“°°“Àº) “´ë“ÀÀ“ÇÏ“´Â “¸®“ÅÍ“·²“¹®“ÀÚ“¿­“¿¡
“º¯“È¯“µÇ“°Å“³ª, “È¤“Àº(C<\b>“°°“Àº) “À¯“ÇÑ“»ó“ÅÂ “¿À“Åä“¸¶“Åæ“ÀÇ “Æ¯“º°“ÇÑ “³ë“µå“¸¦ “»ý“¼º“ÇÕ“´Ï“´Ù.
(C<|>“°¡“Àº) “Á¤“±Ô“Ç¥“Çö“¿£“Áø“¿¡“¼­ “Æ¯“º°“ÇÑ “¹®“ÀÚ“´Â “´ë“ÀÀ“ÇÏ“´Â “³ë“µå“°¡ “³ë“µå“ÀÇ
“±×“·ì“À» “»ý“¼º“ÇÕ“´Ï“´Ù.
“³²“Àº “¸ð“µç “°Í“Àº “¸Å“Ä¡“ÇÏ“´Â “¸®“ÅÍ“·²“¹®“ÀÚ“¿­“¿¡ “º¯“È¯“µÇ“°Å“³ª “±×“·¸“Áö “¾Ê“À¸“¸é
(C<//x>“°¡ “Áö“Á¤“µÈ “¶§“ÀÇ “°ø“¹é“°ú C<#> “½º“Å¸“ÀÏ“ÀÇ “ÄÚ“¸à“Æ®“¿Í “Ã³“·³) “¹«“½Ã“µË“´Ï“´Ù.

=begin original

Parsing of the bracketed character class construct, C<[...]>, is
rather different than the rule used for the rest of the pattern.
The terminator of this construct is found using the same rules as
for finding the terminator of a C<{}>-delimited construct, the only
exception being that C<]> immediately following C<[> is treated as
though preceded by a backslash.  Similarly, the terminator of
C<(?{...})> is found using the same rules as for finding the
terminator of a C<{}>-delimited construct.

=end original

“¹®“ÀÚ“Å¬“·¡“½º“±¸“Á¶ C<[...]> “ÀÇ “ÆÐ“½º“´Â “´Ù“¸¥ “ÆÐ“ÅÏ“°ú“´Â “·ê“ÀÌ “´Ù“¸¨“´Ï“´Ù.
“ÀÌ “±¸“Á¶“ÀÇ “Á¾“´Ü“Àº C<{}> “·Î “±¸“ºÐ“µÇ“¾î“Áø “±¸“Á¶“ÀÇ “Á¾“´Ü“À» “°Ë“»ö“ÇÏ“´Â “°Í“°ú “°°“Àº “·ê“·Î
“°Ë“»ö“µË“´Ï“´Ù.. “À¯“ÀÏ“ÇÑ “¿¹“¿Ü“´Â C<[> “ÀÇ “Á÷“ÈÄ C<]> “´Â “¹é“½½“·¡“½¬“°¡ “¼±“Çà“ÇÏ“°í “ÀÖ“´Â “°Í“À¸“·Î
“Ãë“±Þ“µË“´Ï“´Ù.
“ÀÌ“¿Í“°°“ÀÌ, C<(?{...})> “ÀÇ “Á¾“´Ü“Àº C<{}> “·Î “±¸“ºÐ“µÈ “±¸“Á¶“ÀÇ “Á¾“´Ü“À»
“°Ë“»ö“ÇÏ“´Â “°Í“°ú “°°“Àº “·ê“·Î “°Ë“»ö“µË“´Ï“´Ù.

=begin original

It is possible to inspect both the string given to RE engine and the
resulting finite automaton.  See the arguments C<debug>/C<debugcolor>
in the C<use L<re>> pragma, as well as Perl's B<-Dr> command-line
switch documented in L<perlrun/"Command Switches">.

=end original

“Á¤“±Ô“Ç¥“Çö“¿¡ “ÁÖ“¾î“Áø “¹®“ÀÚ“¿­“°ú “°á“°ú“·Î“½á“ÀÇ “À¯“ÇÑ“»ó“ÅÂ “¿À“Åä“¸¶“Åæ“ÀÇ “¾ç“ÂÊ“À»
“°Ë“»ç“ÇÒ “¼ö “ÀÖ“½À“´Ï“´Ù.
C<use L<re>> “ÇÁ“¶ó“±×“¸¶“ÀÇ C<debug>/C<debugcolor> “ÀÎ“¼ö“¿Í
L<perlrun/"Command Switches"> “¿¡ “±â“¼ú“µÇ“¾î “ÀÖ“´Â  B<-Dr> “Ä¿“¸Ç“µå“¶ó“ÀÎ
“¿É“¼Ç“À» “Âü“Á¶“ÇØ“ÁÖ“¼¼“¿ä.

=item Optimization of regular expressions
X<regexp, optimization>

=begin original

This step is listed for completeness only.  Since it does not change
semantics, details of this step are not documented and are subject
to change without notice.  This step is performed over the finite
automaton that was generated during the previous pass.

=end original

“ÀÌ “½º“ÅÜ“Àº “¿Ï“Àü“¼º“À» “À§“ÇØ“¼­“¸¸ “¸®“½º“Æ®“µÇ“¾î“Áý“´Ï“´Ù.
“ÀÌ“°Í“Àº “ÀÇ“¹Ì“·Ð“Àû“À¸“·Î“´Â “º¯“È­“°¡ “¾ø“±â“¶§“¹®“¿¡ “ÀÌ “½º“ÅÜ“ÀÇ “ÀÚ“¼¼“ÇÑ “³»“¿ë“Àº 
“¹®“¼­“È­“µÇ“¾î “ÀÖ“Áö “¾Ê“±â“¿¡, “Àå“·¡“¿¹“°í“¾ø“ÀÌ “º¯“°æ“µÉ “¼ö “ÀÖ“½À“´Ï“´Ù.
“ÀÌ “½º“ÅÜ“Àº “¿©“±â“±î“Áö“ÀÇ “Ã³“¸®“·Î “»ý“¼º“µÈ “À¯“ÇÑ“¿À“Åä“¸¶“Åæ“¿¡ “´ë“ÇØ “Àû“¿ë“µË“´Ï“´Ù.

=begin original

It is at this stage that C<split()> silently optimizes C</^/> to
mean C</^/m>.

=end original

C<split()> “¿¡“¼­ C</^/> “¸¦ “¾Ï“¹¬“Àû“À¸“·Î C</^/m> “·Î “ÃÖ“Àû“È­“ÇÏ“´Â “°Í“µµ
“ÀÌ “½º“ÅÜ“ÀÔ“´Ï“´Ù. 

=back

=head2 I/O Operators
X<operator, i/o> X<operator, io> X<io> X<while> X<filehandle>
X<< <> >> X<@ARGV>

(I/O “¿¬“»ê“ÀÚ)

=begin original

There are several I/O operators you should know about.

=end original

“¾Ë“¾Æ “µÎ“´Â “Æí“ÀÌ “ÁÁ“Àº I/O “¿¬“»ê“ÀÚ“µµ “¸î “°³“Á¤“µµ “ÀÖ“½À“´Ï“´Ù.

=begin original

A string enclosed by backticks (grave accents) first undergoes
double-quote interpolation.  It is then interpreted as an external
command, and the output of that command is the value of the
backtick string, like in a shell.  In scalar context, a single string
consisting of all output is returned.  In list context, a list of
values is returned, one per line of output.  (You can set C<$/> to use
a different line terminator.)  The command is executed each time the
pseudo-literal is evaluated.  The status value of the command is
returned in C<$?> (see L<perlvar> for the interpretation of C<$?>).
Unlike in B<csh>, no translation is done on the return data--newlines
remain newlines.  Unlike in any of the shells, single quotes do not
hide variable names in the command from interpretation.  To pass a
literal dollar-sign through to the shell you need to hide it with a
backslash.  The generalized form of backticks is C<qx//>.  (Because
backticks always undergo shell expansion as well, see L<perlsec> for
security concerns.)
X<qx> X<`> X<``> X<backtick> X<glob>

=end original

“¿ª“µû“¿È“Ç¥“·Î “°¨“½Î“Áø “¹®“ÀÚ“¿­“Àº “¿ì“¼±, “½Ö“µû“¿È“Ç¥ “º¸“¿Ï“°°“ÀÌ “º¯“¼ö“ÀÇ “Àü“°³“°¡ “¼ö“Çà“µË“´Ï“´Ù.
“±× “µÚ, “¼Ð“¿¡“¼­“ÀÇ “°æ“¿ì“¿Í “°°“ÀÌ “¿Ü“ºÎ “Ä¿“¸Ç“µå“·Î“½á “ÇØ“¼®“µÇ“°í,
“±× “Ä¿“¸Ç“µå“ÀÇ “Ãâ“·Â“ÀÌ “ÀÌ “¿ª“µû“¿È“Ç¥ “¹®“ÀÚ“¿­“ÀÇ “°ª“ÀÌ “µË“´Ï“´Ù.
“½º“Ä®“¶ó “ÄÁ“ÅØ“½º“Æ®“¿¡“¼­“´Â “Ãâ“·Â “¸ð“µÎ“¸¦ “Æ÷“ÇÔ“ÇÑ “ÇÏ“³ª“ÀÇ “¹®“ÀÚ“¿­“ÀÌ “¹Ý“È¯“µË“´Ï“´Ù.
“¸®“½º“Æ®“ÄÁ“ÅØ“½º“Æ®“¿¡“¼­“´Â “Ãâ“·Â“ÀÇ “ÇÑ“ÁÙ“ÇÑ“ÁÙ“ÀÌ “°¢“°¢“ÀÇ “¿ä“¼Ò“°¡ “µÇ“´Â “¸®“½º“Æ®“°¡ “¹Ý“È¯“µË“´Ï“´Ù.
(C<$/> “¸¦ “¼³“Á¤“ÇÏ“¸é, “ÁÙ“ÀÇ “³¡“À» “³ª“Å¸“´Â “¹®“ÀÚ“¸¦ “¹Ù“²Ù“´Â “°Í“µµ “°¡“´É“ÇÕ“´Ï“´Ù)
“Ä¿“¸Ç“µå“´Â, “ÀÌ“·± “À¯“»ç“¸®“ÅÍ“·²“ÀÌ “Æò“°¡“µÇ“´Â “°Í“¿¡ “½Ç“Çà“µË“´Ï“´Ù.
“Ä¿“¸Ç“µå“ÀÇ “»ó“ÅÂ“°ª“Àº C<$?>“·Î “¹Ý“È¯“µË“´Ï“´Ù (C<$?> “ÀÇ “ÇØ“¼®“¿¡ “´ë“ÇØ“¼­“´Â,
L<perlvar> “¸¦ “Âü“Á¶“ÇØ“ÁÖ“¼¼“¿ä).
B<csh> “¿¡“¼­“ÀÇ “°æ“¿ì“¿Í“´Â “´Þ“¸®, “°á“°ú“ÀÇ “µ¥“ÀÌ“ÅÍ“¿¡ “´ë“ÇÑ “º¯“È¯“Àº “¼ö“Çà“µÇ“¾î“Áö“Áö“¾Ê“°í,
“°³“Çà“Àº “°³“Çà “±×“´ë“·Î“ÀÔ“´Ï“´Ù.
“¾î“´À “¼Ð“°ú“µµ “´Ù“¸£“°Ô, “µû“¿È“Ç¥“°¡ “Ä¿“¸Ç“µå“¾È“ÀÇ “º¯“¼ö“¸í“À» “ÇØ“¼®“ÇÏ“Áö“¾Ê“µµ“·Ï “ÇÏ“´Â “°Í“Àº 
“¾ø“½À“´Ï“´Ù.
“¼Ð“¿¡ “¸®“ÅÍ“·²“ÇÑ “´Þ“·¯“±â“È£“¸¦ “°Ç“³»“±â“À§“ÇØ, “¹é“½½“·¡“½¬“·Î “ÀÌ“½º“ÄÉ“ÀÌ“ÇÁ“ÇÏ“Áö “¾Ê“À¸“¸é “¾È“µË“´Ï“´Ù.
“¿ª“µû“¿È“Ç¥“ÀÇ “ÀÏ“¹Ý“Çü“Àº C<qx//> “ÀÔ“´Ï“´Ù.
(“¿ª“µû“¿È“Ç¥“´Â “Ç×“»ó “¼Ð“Àü“°³“µË“´Ï“´Ù. “º¸“¾È“¿¡ “°ü“ÇØ“¼­“´Â L<perlsec>“¸¦ “Âü“Á¶“ÇØ“ÁÖ“¼¼“¿ä)

=begin original

In scalar context, evaluating a filehandle in angle brackets yields
the next line from that file (the newline, if any, included), or
C<undef> at end-of-file or on error.  When C<$/> is set to C<undef>
(sometimes known as file-slurp mode) and the file is empty, it
returns C<''> the first time, followed by C<undef> subsequently.

=end original

“½º“Ä®“¶ó “ÄÁ“ÅØ“½º“Æ®“¿¡“¼­ “²ª“Àº“°ý“È£“ÀÇ “¾È“ÀÇ “ÆÄ“ÀÏ“ÇÚ“µé“À» “Æò“°¡“ÇÏ“¸é,
“±× “ÆÄ“ÀÏ“¿¡“¼­ “´Ù“À½“ÀÇ “Çà“À» “ÀÐ“¾î“µé“ÀÌ“´Â “°Í“ÀÌ “µË“´Ï“´Ù.
(“°³“Çà“ÀÌ “ÀÖ“À¸“¸é “±×“°Í“µµ “Æ÷“ÇÔ“µË“´Ï“´Ù)
“ÆÄ“ÀÏ“ÀÇ “¸¶“Áö“¸· “¶Ç“´Â “¿¡“·¯“ÀÇ “°æ“¿ì“´Â C<undef>“¸¦ “¹Ý“È¯“ÇÕ“´Ï“´Ù.
C<$/>“°¡ C<undef>“·Î “¼³“Á¤“µÈ “°æ“¿ì(File-Slurp“¸ð“µå“¶ó“°í “ºÒ“¸³“´Ï“´Ù)“¿¡“¼­,
“ÆÄ“ÀÏ“ÀÌ “ºó “°æ“¿ì, “Ã³“À½“Àº C<''> “¸¦ “¹Ý“È¯“ÇÏ“°í, “´Ù“À½“Àº C<undef>“¸¦ “¹Ý“È¯“ÇÕ“¤¤“µð“¤¿.

=begin original

Ordinarily you must assign the returned value to a variable, but
there is one situation where an automatic assignment happens.  If
and only if the input symbol is the only thing inside the conditional
of a C<while> statement (even if disguised as a C<for(;;)> loop),
the value is automatically assigned to the global variable $_,
destroying whatever was there previously.  (This may seem like an
odd thing to you, but you'll use the construct in almost every Perl
script you write.)  The $_ variable is not implicitly localized.
You'll have to put a C<local $_;> before the loop if you want that
to happen.

=end original

“º¸“Åë“Àº, “¹Ý“È¯“µÈ “°¡“¹å“À» “º¯“¼ö“¿¡ “´ë“ÀÔ“ÇÏ“Áö “¾Ê“À¸“¸é “¾È“µÇ“Áö“¸¸, “ÀÚ“µ¿“Àû“À¸“·Î
“´ë“ÀÔ“µÇ“´Â “°æ“¿ì“°¡ “µü “ÇÏ“³ª “ÀÖ“½À“´Ï“´Ù.
“ÀÌ “ÀÔ“·Â “½É“º¼“ÀÌ while “¹®(C<for(;;)>)“ÀÇ “Çü“ÅÂ“·Î “µÇ“¾î“ÀÖ“µç)“ÀÇ “Á¶“°Ç“½Ä “¾È“¿¡
“´Ü“µ¶“À¸“·Î “³ª“Å¸“³­ “°æ“¿ì“¸¸“Àº, “±× “°ª“ÀÌ “ÀÚ“µ¿“Àû“À¸“·Î “±Û“·Î“¹ú “º¯“¼ö $_ “¿¡ “´ë“ÀÔ“µË“´Ï“´Ù.
“ÀÌ“Àü“ÀÇ “°ª“Àº “ÆÄ“±«“µË“´Ï“´Ù.
(“ÀÌ“°Í“Àº, “½Å“±â“ÇÏ“°Ô “»ý“°¢“ÇÒ “¼ö“µµ “ÀÖ“°Ú“Áö“¸¸, “´ë“ºÎ“ºÐ “¸ð“µÎ“ÀÇ Perl “½º“Å©“¸³“Æ®“¿¡“¼­
“ÀÌ“°Í“ÀÌ “ÇÊ“¿ä“ÇÏ“°Ô “µÇ“°Ú“ÁÒ)
$_ “º¯“¼ö“´Â “¾Ï“¹¬“Àû“À¸“·Î “·Î“ÄÃ“È­“µÇ“Áö“¾Ê“½À“´Ï“´Ù. 
“±×“·¸“°Ô “ÇÏ“°í “½Í“Àº “°æ“¿ì “·ç“ÇÁ“ÀÇ “¾Õ“¿¡ C<local $_;>“¶ó“°í “¾µ “ÇÊ“¿ä“°¡ “ÀÖ“½À“´Ï“´Ù.

=begin original

The following lines are equivalent:

=end original

“¾Æ“·¡“´Â, “¼­“·Î “°°“Àº “°Í“µé“ÀÔ“´Ï“´Ù.

    while (defined($_ = <STDIN>)) { print; }
    while ($_ = <STDIN>) { print; }
    while (<STDIN>) { print; }
    for (;<STDIN>;) { print; }
    print while defined($_ = <STDIN>);
    print while ($_ = <STDIN>);
    print while <STDIN>;

=begin original

This also behaves similarly, but avoids $_ :

=end original

“ÀÌ“°Í“Àº “°°“Àº “¼ö“Çà“À» “ÇÏ“Áö“¸¸, $_ “¸¦ “»ç“¿ë“ÇÏ“Áö “¾Ê“½À“´Ï“´Ù:

    while (my $line = <STDIN>) { print $line }

=begin original

In these loop constructs, the assigned value (whether assignment
is automatic or explicit) is then tested to see whether it is
defined.  The defined test avoids problems where line has a string
value that would be treated as false by Perl, for example a "" or
a "0" with no trailing newline.  If you really mean for such values
to terminate the loop, they should be tested for explicitly:

=end original

“ÀÌ“·± “·ç“ÇÁ“±¸“Á¶ “¾È“¿¡“¼­, “´ë“ÀÔ“µÈ “°ª“Àº (“´ë“ÀÔ“ÀÌ “ÀÚ“µ¿“ÀÎ“°¡ “¸í“½Ã“Àû“ÀÎ“°¡“¿¡ “»ó“°ü“¾ø“ÀÌ)
“Á¤“ÀÇ“µÇ“¤Ã“ÀÖ“´Â“°¡ “¾î“¶²“°¡“¸¦ “º¸“±â“À§“ÇØ“¼­ “Å×“½º“Æ®“µË“´Ï“´Ù.
“Á¤“ÀÇ“Å×“½º“Æ®“´Â “ÁÙ“ÀÌ Perl “¿¡ “ÀÖ“¾î“¼­ "“°Å“Áþ"“ÀÌ “µÇ“´Â “¹®“ÀÚ“¿­“°ª“À» “°¡“Áö“°í “ÀÖ“´Â“Áö
“¾î“¶²“Áö“ÀÇ “¹®“Á¦“¸¦ “È¸“ÇÇ“ÇÕ“´Ï“´Ù. “¿¹“¸¦ “µé“¸é, newline “¿¡ “ÀÖ“Áö “¾Ê“Àº "" “³ª "0"“ÀÔ“´Ï“´Ù.
“¸¸“¾à “Áø“Â¥“·Î “ÀÌ“·± “°ª“À¸“·Î “·ç“ÇÁ“¸¦ “Á¾“·á“½Ã“Å°“°í “½Í“À» “¶§“´Â 
“¾Æ“·¡“¿Í “°°“ÀÌ “¸í“½Ã“Àû“À¸“·Î “Å×“½º“Æ®“ÇØ“¾ß“ÇÕ“´Ï“´Ù.

    while (($_ = <STDIN>) ne '0') { ... }
    while (<STDIN>) { last unless $_; ... }

=begin original

In other boolean contexts, C<< <I<filehandle>> >> without an
explicit C<defined> test or comparison elicit a warning if the
C<use warnings> pragma or the B<-w>
command-line switch (the C<$^W> variable) is in effect.

=end original

“±× “¿Ü“ÀÇ “ºÒ“¸° “°ª “ÄÁ“ÅØ“½º“Æ®“¿¡“¼­“´Â “¸í“½Ã“Àû“ÀÎ C<defined> “³ª “ºñ“±³“¾ø“ÀÌ
C<< <I<filehandle>> >> “À» “»ç“¿ë“ÇÏ“¸é, C<use warnings> “ÇÁ“¶ó“±×“¸¶“³ª
B<-w> “Ä¿“¸Ç“µå“¶ó“ÀÎ “½º“À§“Ä¡(C<$^W> “º¯“¼ö) “°¡ “À¯“È¿“ÇÑ “¶§“¿¡“´Â
“°æ“°í“¸¦ “¹ß“»ý“½Ã“Åµ“´Ï“´Ù.

=begin original

The filehandles STDIN, STDOUT, and STDERR are predefined.  (The
filehandles C<stdin>, C<stdout>, and C<stderr> will also work except
in packages, where they would be interpreted as local identifiers
rather than global.)  Additional filehandles may be created with
the open() function, amongst others.  See L<perlopentut> and
L<perlfunc/open> for details on this.
X<stdin> X<stdout> X<sterr>

=end original

STDIN, STDOUT, STDERR “°ú “°°“Àº “ÆÄ“ÀÏ“ÇÚ“µé“Àº, “¹Ì“¸® “Á¤“ÀÇ“µË“´Ï“´Ù.
(C<stdin>, C<stdout>, C<stderr> “°ú “°¡“Àº “ÆÄ“ÀÏ“ÇÚ“µé“µµ, 
“·Î“ÄÃ“ÇÑ “ÀÌ“¸§“À¸“·Î “ÀÌ“·± “±Û“·Î“¹ú“ÇÑ “ÀÌ“¸§“ÀÌ “º¸“ÀÌ“Áö “¾Ê“°Ô “µÇ“¾î “ÀÖ“´Â
“ÆÐ“Å°“Áö“¸¦ “»©“¸é, “»ç“¿ë“ÇÒ “¼ö “ÀÖ“½À“´Ï“´Ù)
“±× “¿Ü“ÀÇ “ÆÄ“ÀÏ“ÇÚ“µé“Àº open() “ÇÔ“¼ö“µî“¿¡“¼­ “¸¸“µé “¼ö “ÀÖ“½À“´Ï“´Ù.
“ÀÌ“°Í“¿¡ “°ü“ÇÑ “ÀÚ“¼¼“ÇÑ “³»“¿ë“Àº L<perlopentut>“¿Í L<perlfunc/open>“À»
“Âü“Á¶“ÇØ“ÁÖ“¼¼“¿ä.
X<stdin> X<stdout> X<sterr>

=begin original

If a <FILEHANDLE> is used in a context that is looking for
a list, a list comprising all input lines is returned, one line per
list element.  It's easy to grow to a rather large data space this
way, so use with care.

=end original

<FILEHANDLE> “ÀÌ “¸®“½º“Æ®“¸¦ “ÇÊ“¿ä“·Î“ÇÏ“´Â “ÄÁ“ÅØ“½º“Æ®“¿¡“¼­ “»ç“¿ë“µÇ“¸é,
“ÇÏ“³ª“ÀÇ “¿ä“¼Ò“¿¡ “ÇÑ“ÁÙ“ÀÇ “ÀÔ“·Â“Çà“¿¡“¼­ “¸®“½º“Æ®“°¡ “¹Ý“È¯“µË“´Ï“´Ù.
“ÀÌ“°Í“À» “»ç“¿ë“ÇÏ“¸é“°£“´Ü“ÇÏ“°í “²Ï “Å« “µ¥“ÀÌ“ÅÍ“°¡ “µÇ“¾î“¹ö“¸®“±â “¶§“¹®“¿¡,
“ÁÖ“ÀÇ“¸¦ “ÇÊ“¿ä“·Î“ÇÕ“´Ï“´Ù.

=begin original

<FILEHANDLE> may also be spelled C<readline(*FILEHANDLE)>.
See L<perlfunc/readline>.

=end original

<FILEHANDLE> “Àº C<readline(*FILEHANDLE)> “·Î“µµ “¾µ“¼ö “ÀÖ“½À“´Ï“´Ù.
L<perlfunc/readline> “¸¦ “Âü“Á¶“ÇØ“ÁÖ“¼¼“¿ä.

=begin original

The null filehandle <> is special: it can be used to emulate the
behavior of B<sed> and B<awk>.  Input from <> comes either from
standard input, or from each file listed on the command line.  Here's
how it works: the first time <> is evaluated, the @ARGV array is
checked, and if it is empty, C<$ARGV[0]> is set to "-", which when opened
gives you standard input.  The @ARGV array is then processed as a list
of filenames.  The loop

=end original

Null “½º“À§“Ä¡“ÇÚ“µé <> “Àº “Æ¯“º°“È÷ B<sed> “³ª B<awk> “ÀÇ “µ¿“ÀÛ“À»
“¿¡“¹Ä“·¹“ÀÌ“Æ®“ÇÏ“±â “À§“ÇØ “»ç“¿ë“µË“´Ï“´Ù.
<> “¿¡“¼­“ÀÇ “ÀÔ“·Â“Àº , “Ç¥“ÁØ“ÀÔ“·Â“À¸“·Î“ºÎ“ÅÍ “È¤“Àº “Ä¿“¸Ç“µå“¶ó“ÀÎ “À§“¿¡ “³Î“¸° “°¢“°¢“ÀÇ
“ÆÄ“ÀÏ“¿¡“¼­ “¼ö“Çà“µÇ“¾î“Áý“´Ï“´Ù.
“µ¿“ÀÛ“ÀÇ “°³“¿ä“´Â “¾Æ“·¡“¿Í “°°“½À“´Ï“´Ù.
“¸Ç“Ã³“À½“¿¡ <>“°¡ “Æò“°¡“µÇ“¸é, “¹è“¿­ @ARGV“°¡ “Á¶“»ç“µÇ“¾î, “ºñ“¾î“ÀÖ“À¸“¸é,
C<$ARGV[0]>“¿¡ "-"“¸¦ “¼³“Á¤“ÇÕ“´Ï“´Ù.
“ÀÌ“°Í“Àº open“µÉ “¶§ “Ç¥“ÁØ“ÀÔ“·Â“ÀÌ “µË“´Ï“´Ù.
“±× “ÈÄ, “¹è“¿­ @ARGV“°¡ “ÆÄ“ÀÏ“ÀÌ“¸§“ÀÇ “¸®“½º“Æ®“·Î“½á “Ã³“¸®“µË“´Ï“´Ù.

    while (<>) {
	...			# code for each line
    }

=begin original

is equivalent to the following Perl-like pseudo code:

=end original

“Àº “¾Æ“·¡“¿Í “°°“Àº Perl “ÀÇ pseduo code“¿Í “°°“½À“´Ï“´Ù.

    unshift(@ARGV, '-') unless @ARGV;
    while ($ARGV = shift) {
	open(ARGV, $ARGV);
	while (<ARGV>) {
	    ...		# code for each line
	}
    }

=begin original

except that it isn't so cumbersome to say, and will actually work.
It really does shift the @ARGV array and put the current filename
into the $ARGV variable.  It also uses filehandle I<ARGV>
internally--<> is just a synonym for <ARGV>, which
is magical.  (The pseudo code above doesn't work because it treats
<ARGV> as non-magical.)

=end original

“´Ù“¸¸, “¹ø“°Å“·Ó“°Ô “¾²“Áö“¾Ê“¾Æ“µµ “µ¿“ÀÛ“ÇÕ“´Ï“´Ù.
“½Ç“Á¦“·Î @ARGV“¸¦ shift “ÇÏ“°í, “±× “½Ã“Á¡“ÀÇ “ÆÄ“ÀÏ“¸í“À» “º¯“¼ö $ARGV“¿¡ “³Ö“½À“´Ï“´Ù.
“¶Ç“ÇÑ, “³»“ºÎ“Àû“À¸“·Î “ÆÄ“ÀÏ“ÇÚ“µé ARGV “¸¦ “»ç“¿ë“ÇÏ“°í “ÀÖ“¾î, <> “´Â “¸Å“Áö“ÄÃ“ÇÑ
<ARGV> “ÀÇ “µ¿“ÀÇ“¾î“°¡ “µË“´Ï“´Ù.
(“À§“ÀÇ pseudo code“´Â, <ARGV> “¸¦ “ÀÏ“¹Ý“Àû“ÀÎ “°Í“À¸“·Î “Ãë“±Þ“ÇÏ“¹Ç“·Î “Àß “µ¿“ÀÛ“ÇÏ“Áö “¾Ê“½À“´Ï“´Ù)

=begin original

You can modify @ARGV before the first <> as long as the array ends up
containing the list of filenames you really want.  Line numbers (C<$.>)
continue as though the input were one big happy file.  See the example
in L<perlfunc/eof> for how to reset line numbers on each file.

=end original

“¸¶“Áö“¸·“À¸“·Î, @ARGV“·Î “Ãë“±Þ“ÇÏ“°í “½Í“Àº “ÆÄ“ÀÏ“ÀÌ“¸§“ÀÌ “Æ÷“ÇÔ“µÇ“¾î “ÀÖ“´Ù“¸é,
“¸Ç“Ã³“À½“¿¡, <>“¸¦ “Æò“°¡“ÇÏ“±â “Àü“¿¡ @ARGV“¸¦ “º¯“°æ“ÇÏ“´Â “°Í“µµ “°¡“´É“ÇÕ“´Ï“´Ù.
“Çà“¹ø“È£ (C<$.>) “´Â, “ÀÔ“·Â“ÇÚ“µé“ÀÌ “µÚ“¿¡ “ÇÏ“³ª“ÀÇ “Å« “ÆÄ“ÀÏ“ÀÎ“°¡“¿Í “°°“ÀÌ
“°è“¼Ó“ÇØ“¼­ “Ä«“¿î“Æ®“µË“´Ï“´Ù.
“°¢“°¢“ÀÇ “ÆÄ“ÀÏ“¸¶“´Ù “¸®“¼Â“ÇÏ“´Â “¹æ“¹ý“Àº L<perlfunc/eof> “ÀÇ “¿¹“¸¦
“Âü“Á¶“ÇØ“ÁÖ“¼¼“¿ä.

=begin original

If you want to set @ARGV to your own list of files, go right ahead.
This sets @ARGV to all plain text files if no @ARGV was given:

=end original

“¸Ç“Ã³“À½“ºÎ“ÅÍ @ARGV“¿¡ “ÀÚ“½Å“ÀÌ “ÆÄ“ÀÏ“ÀÇ “¸®“½º“Æ®“¸¦ “¼³“Á¤“ÇØ“µµ “»ó“°ü“¾ø“½À“´Ï“´Ù.
“¾Æ“·¡“´Â @ARGV“°¡ “ÁÖ“¾î“Áö“Áö“¾Ê“¾Ò“À» “¶§“¿¡ “¸ð“µç “ÅØ“½º“Æ®“ÆÄ“ÀÏ“À»
@ARGV“·Î “¼³“Á¤“ÇÕ“´Ï“´Ù.

    @ARGV = grep { -f && -T } glob('*') unless @ARGV;

=begin original

You can even set them to pipe commands.  For example, this automatically
filters compressed arguments through B<gzip>:

=end original

“¿©“±â“¿¡ “ÆÄ“ÀÌ“ÇÁ“Ä¿“¸Ç“µå“¸¦ “³Ö“À» “¼ö“µµ “ÀÖ“½À“´Ï“´Ù.
“¿¹“¸¦ “µé“¸é, “¾Æ“·¡“´Â “¾Ð“Ãà“µÈ “ÀÎ“¼ö“¸¦ “ÀÚ“µ¿“Àû“À¸“·Î B<gzip> “ÀÇ “ÇÊ“ÅÍ“·Î “Åë“ÇÕ“´Ï“´Ù.

    @ARGV = map { /\.(gz|Z)$/ ? "gzip -dc < $_ |" : $_ } @ARGV;

=begin original

If you want to pass switches into your script, you can use one of the
Getopts modules or put a loop on the front like this:

=end original

“½º“Å©“¸³“Æ®“¿¡ “½º“À§“Ä¡“¸¦ “³Ñ“±â“°í “½Í“´Ù“¸é Getopts “¸ð“µâ“À»
“»ç“¿ë“ÇÏ“´Â “°Í“µµ “µÇ“¸ç, “½Ç“Á¦ “Ã³“¸® “Àü“¿¡“¿Í “°°“Àº “·ç“ÇÁ“¸¦ “µÎ“´Â “°Í“µµ “°¡“´É“ÇÕ“´Ï“´Ù.

    while ($_ = $ARGV[0], /^-/) {
	shift;
        last if /^--$/;
	if (/^-D(.*)/) { $debug = $1 }
	if (/^-v/)     { $verbose++  }
	# ...		# other switches
    }

    while (<>) {
	# ...		# code for each line
    }

=begin original

The <> symbol will return C<undef> for end-of-file only once.
If you call it again after this, it will assume you are processing another
@ARGV list, and if you haven't set @ARGV, will read input from STDIN.

=end original

“½É“º¼ <> “°¡ “ÆÄ“ÀÏ“ÀÇ “¸¶“Áö“¸·“¿¡“¼­ C<undef> “¸¦ “¹Ý“È¯“ÇÏ“¤¤ “°Í“¸¸ “ÇÑ“¹ø “»Ó“ÀÔ“´Ï“´Ù.
“±× “µÚ“¿¡ “ÇÑ“¹ø “´õ “ºÎ“¸£“¸é, “»õ“·Î“¿î “º°“µµ“ÀÇ @ARGV “¸¦ “Ã³“¸®“ÇÏ“´Â “°Í“À¸“·Î “°£“ÁÖ“µÇ“¾î,
“±× “¶§“¿¡ @ARGV“¸¦ “´Ù“½Ã “¼³“Á¤“ÇÏ“Áö “¾Ê“À¸“¸é, STDIN“¿¡“¼­“ÀÇ “ÀÔ“·Â“À» 
“ÀÐ“¾î“µé“ÀÌ“´Â “°Í“ÀÌ “µË“´Ï“´Ù.

=begin original

If what the angle brackets contain is a simple scalar variable (e.g.,
<$foo>), then that variable contains the name of the
filehandle to input from, or its typeglob, or a reference to the
same.  For example:

=end original

“²ª“Àº “°ý“È£ “¾È“ÀÇ “¹®“ÀÚ“¿­“ÀÌ (<$foo>“°°“ÀÌ) “´Ü“¼ø“½º“Ä®“¶ó “º¯“¼ö“ÀÌ“¸é,
“ÀÌ “º¯“¼ö“°¡ “ÀÔ“·Â“À» “¼ö“Çà“ÇÏ“´Â “ÆÄ“ÀÏ“ÇÚ“µé“ÀÇ “ÀÌ“¸§, “ÀÌ“¸§“À¸“·Î“ÀÇ “Çü“ÅÂglob,
“ÀÌ“¸§“À¸“·Î“ÀÇ “¸®“ÆÛ“·±“½º “Áß “ÇÏ“³ª“¸¦ “Ç¥“½Ã“ÇÏ“´Â “°Í“À¸“·Î “°£“ÁÖ“ÇÕ“´Ï“´Ù.

    $fh = \*STDIN;
    $line = <$fh>;

=begin original

If what's within the angle brackets is neither a filehandle nor a simple
scalar variable containing a filehandle name, typeglob, or typeglob
reference, it is interpreted as a filename pattern to be globbed, and
either a list of filenames or the next filename in the list is returned,
depending on context.  This distinction is determined on syntactic
grounds alone.  That means C<< <$x> >> is always a readline() from
an indirect handle, but C<< <$hash{key}> >> is always a glob().
That's because $x is a simple scalar variable, but C<$hash{key}> is
not--it's a hash element.  Even C<< <$x > >> (note the extra space)
is treated as C<glob("$x ")>, not C<readline($x)>.

=end original

“²ª“Àº “°ý“È£“ÀÇ “¾È“ÀÇ “¹®“ÀÚ“¿­“ÀÌ “ÆÄ“ÀÏ“ÇÚ“µé“µµ,  
“ÆÄ“¾Ù“ÇÚ“µé“ÀÌ“¸§, “Çü“ÅÂglob, “Çü“ÅÂglob “¸®“ÆÛ“·±“½º “Áß “¾î“´À “ÇÏ“³ª“°¡ “µé“¾î“°£ 
“´Ü“¼ø “½º“Ä®“¶ó“º¯“¼ö“µµ “¾Æ“´Ò “°æ“¿ì“´Â,
glob“¸¦ “¼ö“Çà“ÇÒ “ÆÄ“ÀÏ“¸í“ÀÇ “ÆÐ“ÅÏ“À¸“·Î “ÇØ“¼®“µÇ“¾î, “ÄË“ÅÎ“½º“Æ®“¿¡ “ÀÇ“ÇØ
“ÆÄ“ÀÏ“¸í“ÀÇ “¸®“½º“Æ®“³ª, “±× “¸®“½º“Æ®“ÀÇ “´Ù“À½ “ÆÄ“ÀÏ“¸í“ÀÌ “¹Ý“È¯“µË“´Ï“´Ù.
“ÀÌ “±¸“º°“Àº “´Ü“¼ø“È÷ “±¸“¹®“Àû“À¸“·Î “¼ö“Çà“µË“´Ï“´Ù.
C<< <$x> >> “´Â “Æò“¼Ò “°£“Á¢“ÇÚ“µé“¿¡“¼­ readline() “ÇÏ“Áö“¸¸ 
C<< <$hash{key}> >> “´Â “Ç×“»ó glob() “ÇÕ“´Ï“´Ù.
$x “´Â “´Ü“¼ø “½º“Ä®“¶ó“º¯“¼ö“ÀÌ“Áö“¸¸, C<$hash{key}> “´Â “´Ù“¸£“±â “¶§“¹®“ÀÔ“´Ï“´Ù(“ÇØ“½¬ “¿ä“¼Ò). 
C<< <$x > >> (“¿©“ºÐ“ÀÇ “°ø“¹é“¿¡ “ÁÖ“ÀÇ) “¿¡“¼­“µµ C<readline($x)> “ÀÌ “¾Æ“´Ñ
C<glob("$x ")> “·Î“½á “ÇØ“¼®“µË“´Ï“´Ù. 

=begin original

One level of double-quote interpretation is done first, but you can't
say C<< <$foo> >> because that's an indirect filehandle as explained
in the previous paragraph.  (In older versions of Perl, programmers
would insert curly brackets to force interpretation as a filename glob:
C<< <${foo}> >>.  These days, it's considered cleaner to call the
internal function directly as C<glob($foo)>, which is probably the right
way to have done it in the first place.)  For example:

=end original

“¿ì“¼±“Àº 1“´Ü“°è“¸¸ “½Ö“µû“¿È“Ç¥ “Àü“°³“°¡ “¼ö“Çà“µÇ“Áö“¸¸, “¾Õ“ÀÇ “´Ü“¶ô“¿¡ “¾²“ÀÎ
“°£“Á¢“ÆÄ“ÀÏ“ÇÚ“µé“¿Í “°°“¾Æ“Áö“´Â C<< <$foo> >> “¿Í “°°“ÀÌ“´Â “¾µ “¼ö “¾ø“½À“´Ï“´Ù.
(Perl “ÀÇ “³°“Àº “¹ö“Á¯“¿¡“¼­“´Â “ÆÄ“ÀÏ“¸í glob“·Î “ÇØ“¼®“½Ã“Å°“±â “À§“ÇØ“¼­“´Â
 C<< <${foo}> >> “°°“ÀÌ “Áß“°ý“È£“¸¦ “³Ö“¾ú“½À“´Ï“´Ù.
“ÃÖ“±Ù“¿¡“´Â “º¸“´Ù “¸í“È®“ÇÏ“°Ô “ÇÏ“±â “À§“ÇØ, C<glob($foo)> “¿Í “°°“ÀÌ “³»“ºÎ“ÇÔ“¼ö“¸¦
“ºÎ“¸¦ “¼ö“µµ “ÀÖ“½À“´Ï“´Ù.
“¾Æ“¸¶“µµ, “¿ì“¼±“Àº “ÀÌ“ÂÊ“¿¡“¼­ “½Ã“Çè“ÇØ “º¸“´Â “°Í“ÀÌ “ÁÁ“°Ú“ÁÒ)
“¿¹“¸¦ “µé“¸é:

    while (<*.c>) {
	chmod 0644, $_;
    }

=begin original

is roughly equivalent to:

=end original

“´Â “´ë“Ã¼“Àû“À¸“·Î “¾Æ“·¡“¿Í “°°“½À“´Ï“´Ù.

    open(FOO, "echo *.c | tr -s ' \t\r\f' '\\012\\012\\012\\012'|");
    while (<FOO>) {
	chomp;
	chmod 0644, $_;
    }

=begin original

except that the globbing is actually done internally using the standard
C<File::Glob> extension.  Of course, the shortest way to do the above is:

=end original

“´Ù“¸¸ “½Ç“Á¦“ÀÇ glob“´Â “³»“ºÎ“Àû“À¸“·Î “Ç¥“ÁØ“ÀÎ C<File::Glob> “¸ð“µâ“À» “»ç“¿ë“ÇÕ“´Ï“´Ù.
“¹°“·Ð “´õ“¿í “°£“´Ü“È÷ “¾Æ“·¡“¿Í “°°“ÀÌ “¾µ “¼ö “ÀÖ“½À“´Ï“´Ù.

    chmod 0644, <*.c>;

=begin original

A (file)glob evaluates its (embedded) argument only when it is
starting a new list.  All values must be read before it will start
over.  In list context, this isn't important because you automatically
get them all anyway.  However, in scalar context the operator returns
the next value each time it's called, or C<undef> when the list has
run out.  As with filehandle reads, an automatic C<defined> is
generated when the glob occurs in the test part of a C<while>,
because legal glob returns (e.g. a file called F<0>) would otherwise
terminate the loop.  Again, C<undef> is returned only once.  So if
you're expecting a single value from a glob, it is much better to
say

=end original

(“ÆÄ“ÀÏ) glob“´Â “»õ“·Î“¿î “¸®“½º“Æ®“¸¦ “°³“½Ã“ÇÒ “¶§“¿¡“¸¸(“Æ÷“ÇÔ“µÈ) “ÀÎ“¼ö“¸¦ “Æò“°¡“ÇÕ“´Ï“´Ù.
“¸ð“µç “°ª“Àº “°³“½Ã“ÇÏ“±â “Àü“¿¡ “ÀÐ“¾î“µé“ÀÌ“Áö “¾Ê“À¸“¸é “¾È“µË“´Ï“´Ù.
“ÀÌ“°Í“Àº “¸®“½º“Æ®“ÄÁ“ÅØ“½º“Æ®“¿¡“¼­“´Â “¾î“Â·“µç “ÀÚ“µ¿“Àû“À¸“·Î “¸ð“µÎ“¸¦ “²ø“¾î“µé“ÀÌ“±â “¶§“¹®“¿¡
“Áß“¿ä“ÇÏ“Áö “¾Ê“½À“´Ï“´Ù.
“±×“·¯“³ª, “½º“Ä®“¶ó “ÄÁ“ÅØ“½º“Æ®“¿¡“¼­“´Â “ÀÌ “¿¬“»ê“ÀÚ“´Â “È£“Ãâ“µÈ “¶§“ÀÇ “´Ù“À½“ÀÇ “°ª“ÀÎ“°¡
“¸®“½º“Æ®“°¡ “¾ø“´Â “¶§“¿¡“´Â C<undef>“¸¦ “¹Ý“È¯“ÇÕ“´Ï“´Ù.
“ÆÄ“ÀÏ“ÇÚ“µé“À» “ÀÐ“¾î“µé“ÀÏ “°æ“¿ì“´Â glob“°¡ C<while>“ÀÇ “Á¶“°Ç“ºÎ“¿¡ “ÀÖ“´Â “°æ“¿ì“´Â
“ÀÚ“µ¿“Àû“ÀÎ C<defined>“°¡ “»ý“¼º“µË“´Ï“´Ù.
“¿Ö“³Ä“¸é “±×“·¸“°Ô “ÇÏ“Áö“¾Ê“À¸“¸é, “º»“·¡“ÀÇ glob “ÀÇ “¹Ý“È¯“°ª(F<0>“¶ó“°í “ÇÏ“´Â “ÆÄ“ÀÏ)“ÀÌ
“·ç“ÇÁ“¸¦ “Á¾“·á“½Ã“Å°“±â“¶§“¹®“ÀÔ“´Ï“´Ù.
“¿©“±â“¿¡“¼­“µµ, C<undef>“´Â “ÇÑ“¹ø“¸¸ “¹Ý“È¯“µË“´Ï“´Ù.
“µû“¶ó“¼­, “¸¸“¾à glob“¿¡“¼­ “ÇÏ“³ª“ÀÇ “°ª“¸¸“À» “»ó“Á¤“ÇÏ“°í “ÀÖ“´Â “°æ“¿ì,
“¾Æ“·¡“¿Í “°°“ÀÌ “¾²“´Â “°Í“ÀÌ

    ($file) = <blurch*>;

=begin original

than

=end original

“¾Æ“·¡“¿Í “°°“ÀÌ “¾²“´Â “°Í“º¸“´Ù “ÈÎ“¾À “ÁÁ“½À“´Ï“´Ù.

    $file = <blurch*>;

=begin original

because the latter will alternate between returning a filename and
returning false.

=end original

“¿Ö“³Ä“¸é “ÈÄ“ÀÚ“´Â “ÆÄ“ÀÏ“¸í“À» “¹Ý“È¯“ÇÏ“´Â “°æ“¿ì "“°Å“Áþ"“À» “¹Ý“È¯“ÇÏ“´Â “°æ“¿ì“°¡ “ÀÖ“±â“¶§“¹®“ÀÔ“´Ï“´Ù.

=begin original

If you're trying to do variable interpolation, it's definitely better
to use the glob() function, because the older notation can cause people
to become confused with the indirect filehandle notation.

=end original

“º¯“¼ö“º¯“È¯“¿¡ “µµ“Àü“ÇÏ“´Â “°æ“¿ì, glob() “ÇÔ“¼ö“¸¦ “»ç“¿ë“ÇÏ“´Â “Æí“ÀÌ “ÁÁ“½À“´Ï“´Ù.
“¿Ö“³Ä“¸é “³°“Àº “Ç¥“±â“´Â “°£“Á¢ “ÆÄ“ÀÏ“ÇÚ“µé“Ç¥“±â“¿Í “È¥“¶õ“ÇÒ“Áö“µµ “¸ð“¸£“±â “¶§“¹®“ÀÔ“´Ï“´Ù.

    @files = glob("$dir/*.[ch]");
    @files = glob($files[$i]);

=head2 Constant Folding
X<constant folding> X<folding>

(“Á¤“¼ö(Constant)“ÀÇ “Æú“µù)

=begin original

Like C, Perl does a certain amount of expression evaluation at
compile time whenever it determines that all arguments to an
operator are static and have no side effects.  In particular, string
concatenation happens at compile time between literals that don't do
variable substitution.  Backslash interpolation also happens at
compile time.  You can say

=end original

C “¿Í “¸¶“Âù“°¡“Áö“·Î Perl “¿¡“¼­“µµ, “¿¬“»ê“ÀÚ“¿¡ “´ë“ÇØ “¸ð“µç “ÀÎ“¼ö“°¡ “½º“ÅÂ“Æ½“À¸“·Î,
“ºÎ“ÀÛ“¿ë“ÀÌ “¾ø“´Ù“°í “ÆÇ“´Ü“ÇÒ “¼ö “ÀÖ“À¸“¸é, “ÄÄ“ÆÄ“ÀÏ “ÇÒ “¶§“¿¡ “½Ä“ÀÇ “Æò“°¡“¸¦ “¼ö“Çà“ÇØ“¹ö“¸³“´Ï“´Ù.
“Æ¯“È÷, “º¯“¼ö“Ä¡“È¯“ÀÌ “¾ø“´Â “¸®“ÅÍ“·²“³¢“¸®“ÀÇ “¹®“ÀÚ“¿­“¿¬“°á“Àº “ÄÄ“ÆÄ“ÀÏ “½Ã “¼ö“Çà“µË“´Ï“´Ù.
“¹é“½½“·¡“½¬“ÀÇ “ÇØ“¼®“µµ “ÄÄ“ÆÄ“ÀÏ “½Ã “¼ö“Çà“µË“´Ï“´Ù.

    'Now is the time for all' . "\n" .
	'good men to come to.'

=begin original

and this all reduces to one string internally.  Likewise, if
you say

=end original

“¶ó“°í “½á“µµ “³»“ºÎ“Àû“À¸“·Î“´Â “ÇÑ“°³“ÀÇ “¹®“ÀÚ“¿­“ÀÌ “µË“´Ï“´Ù. “°°“Àº “¸ð“¾ç“À¸“·Î

    foreach $file (@filenames) {
	if (-s $file > 5 + 100 * 2**16) {  }
    }

=begin original

the compiler will precompute the number which that expression
represents so that the interpreter won't have to.

=end original

“¶ó“°í “¾²“¸é “ÄÄ“ÆÄ“ÀÏ“·¯“´Â “½Ä“ÀÌ “Ç¥“Çö“ÇÏ“´Â “¼ý“ÀÚ“°ª“À» “´Ù“½Ã“±Ý “°è“»ê“ÇÏ“±â“¶§“¹®“¿¡
“ÀÎ“ÅÍ“ÇÁ“¸®“ÅÍ“¿¡“¼­ “°è“»ê“ÇÒ “ÇÊ“¿ä“°¡ “¾ø“½À“´Ï“´Ù.

=head2 No-ops
X<no-op> X<nop>

(“¹«“½Ç“Çà) 

=begin original

Perl doesn't officially have a no-op operator, but the bare constants
C<0> and C<1> are special-cased to not produce a warning in a void
context, so you can for example safely do

=end original

Perl “Àº “°ø“½Ä“Àû“À¸“·Î“´Â “¹«“½Ç“Çà“¿¬“»ê“ÀÚ“´Â “¾ø“Áö“¸¸, “ºó “Á¤“¼ö C<0>“¿Í C<1>“Àº
“Æ¯“º°“È÷ “¹«“È¿“ÄÁ“ÅØ“½º“Æ®“¿¡“¼­“µµ “°æ“°í“¸¦ “³»“Áö“¾Ê“´Â “°Í“À¸“·Î “µÇ“¾î “ÀÖ“±â“¶§“¹®“¿¡
“¿¹“¸¦ “µé“¸é “¾È“Àü“ÇÏ“°Ô “¾Æ“·¡“¿Í “°°“ÀÌ “¾µ“¼ö “ÀÖ“½À“´Ï“´Ù.

    1 while foo();

=head2 Bitwise String Operators
X<operator, bitwise, string>

(“ºñ“Æ®“¿­ “¿¬“»ê“ÀÚ) 

=begin original

Bitstrings of any size may be manipulated by the bitwise operators
(C<~ | & ^>).

=end original

“ÀÓ“ÀÇ“ÀÇ “»ç“ÀÌ“Áî“ÀÇ “ºñ“Æ®“¿­“Àº “ºñ“Æ®“´Ü“À§“¿¬“»ê“ÀÚ(C<~ | & ^>)“·Î “Á¶“ÀÛ“ÇÒ “¼ö “ÀÖ“½À“´Ï“´Ù.

=begin original

If the operands to a binary bitwise op are strings of different
sizes, B<|> and B<^> ops act as though the shorter operand had
additional zero bits on the right, while the B<&> op acts as though
the longer operand were truncated to the length of the shorter.
The granularity for such extension or truncation is one or more
bytes.

=end original

“ÀÌ“Ç×“ºñ“Æ®“´Ü“À§“¿¬“»ê“ÀÚ“ÀÇ “ÇÇ“¿¬“»ê“ÀÚ“°¡ “´Ù“¸¥ “±æ“ÀÌ“ÀÇ “¹®“ÀÚ“¿­“ÀÎ “°æ“¿ì,
B<|>“¿Í B<^> “ÀÇ “¿¬“»ê“ÀÚ“´Â “Âª“Àº “Ãø“ÀÇ “ÇÇ“¿¬“»ê“ÀÚ“ÀÇ “¿À“¸¥“ÂÊ“¿¡ “Á¦“·Î“°¡ “Ãß“°¡“·Î
“ºÙ“¾î“ÀÖ“´Â “°Í“À¸“·Î “°£“ÁÖ“ÇÕ“´Ï“´Ù.
“ÇÑ“Æí B<&> “¿¬“»ê“ÀÚ“´Â “±ä “ÂÊ“ÀÇ “ÇÇ“¿¬“»ê“ÀÚ“°¡ “Âª“Àº “ÂÊ“¿¡ “¸Â“Ãß“°Ô “µË“´Ï“´Ù.
“ÀÌ “È®“Àå “ÀÌ“³ª “Ãà“¼Ò“´Â “¹Ù“ÀÌ“Æ® “´Ü“À§“ÀÔ“´Ï“´Ù.

    # ASCII-based examples
    print "j p \n" ^ " a h";        	# prints "JAPH\n"
    print "JA" | "  ph\n";          	# prints "japh\n"
    print "japh\nJunk" & '_____';   	# prints "JAPH\n";
    print 'p N$' ^ " E<H\n";		# prints "Perl\n";

=begin original

If you are intending to manipulate bitstrings, be certain that
you're supplying bitstrings: If an operand is a number, that will imply
a B<numeric> bitwise operation.  You may explicitly show which type of
operation you intend by using C<""> or C<0+>, as in the examples below.

=end original

“ºñ“Æ® “¿­“À» “Á¶“ÀÛ“ÇÏ“°í“½Í“À» “°æ“¿ì“´Â “È®“½Ç“È÷ “ºñ“Æ®“¿­“ÀÌ “³Ñ“°Ü“Áú“¼ö “ÀÖ“µµ“·Ï “ÇØ“ÁÖ“¼¼“¿ä.
“ÇÇ“¿¬“»ê“ÀÚ“°¡ “Á¤“¼ö“ÀÎ “°æ“¿ì, B<“¼ý“ÀÚ“°ª> “ºñ“Æ®“´Ü“À§“¿¬“»ê“À» “°¡“Á¤“ÇÕ“´Ï“´Ù.
“¸í“½Ã“Àû“À¸“·Î “¿¬“»ê“ÀÇ “Çü“ÅÂ“¸¦ “Áö“Á¤“ÇÒ “¶§“¿¡“´Â “¾Æ“·¡“ÀÇ “¿¹“¿Í “°°“ÀÌ
C<""> “³ª C<0+> “¸¦ “»ç“¿ë“ÇØ“ÁÖ“¼¼“¿ä. 

    $foo =  150  |  105;	# yields 255  (0x96 | 0x69 is 0xFF)
    $foo = '150' |  105;	# yields 255
    $foo =  150  | '105';	# yields 255
    $foo = '150' | '105';	# yields string '155' (under ASCII)

    $baz = 0+$foo & 0+$bar;	# both ops explicitly numeric
    $biz = "$foo" ^ "$bar";	# both ops explicitly stringy

=begin original

See L<perlfunc/vec> for information on how to manipulate individual bits
in a bit vector.

=end original

“ºñ“Æ®“º¤“ÅÍ“ÀÇ “°¢“°¢“ÀÇ “ºñ“Æ®“¸¦ “¾î“¶»“°Ô “Á¶“ÀÛ“ÇÏ“´Â“°¡“ÀÇ “Á¤“º¸“¿¡ “´ë“ÇØ“¼­“´Â
L<perlfunc/vec> “¸¦ “Âü“Á¶“ÇØ“ÁÖ“¼¼“¿ä.

=head2 Integer Arithmetic
X<integer>

(“Á¤“¼ö“¿¬“»ê)

=begin original

By default, Perl assumes that it must do most of its arithmetic in
floating point.  But by saying

=end original

“±â“º»“Àû“À¸“·Î, Perl“Àº “¿¬“»ê“À» “ºÎ“µ¿“¼Ò“¼ö“¿¡“¼­ “¼ö“Çà“ÇÏ“Áö “¾Ê“À¸“¸é “¾È“µÇ“´Â “°Í“À¸“·Î
“ÇÏ“°í “ÀÖ“½À“´Ï“´Ù.
“ÇÏ“Áö“¸¸(“¸¸“¾à “±×“·¸“°Ô “ÇÏ“°í “½Í“´Ù“¸é)

    use integer;

=begin original

you may tell the compiler that it's okay to use integer operations
(if it feels like it) from here to the end of the enclosing BLOCK.
An inner BLOCK may countermand this by saying

=end original

“¶ó“°í “¾²“¸é “±× “°÷“¿¡“¼­ “Çö“Àç“ÀÇ BLOCK “ÀÇ “³¡“±î“Áö“´Â “Á¤“¼ö“¿¬“»ê“À» “¼ö“Çà“ÇØ“µµ “µÇ“¸ç
“ÄÄ“ÆÄ“ÀÏ“·¯“¿¡ “Áö“½Ã“ÇÒ “¼ö “ÀÖ“½À“´Ï“´Ù.
“³»“ºÎ“ÀÇ BLOCK“¿¡“¼­

    no integer;

=begin original

which lasts until the end of that BLOCK.  Note that this doesn't
mean everything is only an integer, merely that Perl may use integer
operations if it is so inclined.  For example, even under C<use
integer>, if you take the C<sqrt(2)>, you'll still get C<1.4142135623731>
or so.

=end original

“¶ó“°í “¾²“¸é, “±× BLOCK “ÀÇ “³¡“±î“Áö“´Â “Áö“½Ã“¸¦ “Áö“¿î“°Í“ÀÌ “µË“´Ï“´Ù.
“ÀÌ“°Í“Àº “¸ð“µÎ“¸¦ “Á¤“¼ö“¸¸“À» “»ç“¿ë“ÇØ“¼­ “Ã³“¸®“ÇÏ“´Â “°Í“À» “ÀÇ“¹Ì“ÇÏ“´Â “°Í“ÀÌ “¾Æ“´Ñ “°Í“¿¡
“ÁÖ“ÀÇ“ÇØ“ÁÖ“¼¼“¿ä.
“ÀÌ“°Í“Àº “´Ü“¼ø“È÷ Perl “ÀÌ “Á¤“¼ö“¸¦ “»ç“¿ë“ÇÏ“°í “½Í“´Ù“°í “»ý“°¢“ÇÑ “¶§“¿¡ “»ç“¿ë“ÇÒ“Áö“µµ “¸ð“¸£“´Â
“°Í “»Ó“ÀÔ“´Ï“´Ù.
“¿¹“¸¦ “µé“¾î, C<use integer> “ÀÇ “Áö“½Ã“°¡ “ÀÖ“¾î“µµ, C<sqrt(2)> “¶ó“°í “ÇÏ“¸é,
C<1.4142135623731> “¶ó“´Â “°á“°ú“°¡ “¹Ý“È¯“µË“´Ï“´Ù. 

=begin original

Used on numbers, the bitwise operators ("&", "|", "^", "~", "<<",
and ">>") always produce integral results.  (But see also
L<Bitwise String Operators>.)  However, C<use integer> still has meaning for
them.  By default, their results are interpreted as unsigned integers, but
if C<use integer> is in effect, their results are interpreted
as signed integers.  For example, C<~0> usually evaluates to a large
integral value.  However, C<use integer; ~0> is C<-1> on two's-complement
machines.

=end original

“¼ý“ÀÚ“°ª“À» “»ç“¿ë“ÇÒ “°æ“¿ì, “ºñ“Æ®“´Ü“À§“¿¬“»ê“ÀÚ("&", "|", "^", "~", "<<",               
and ">>")“´Â “Ç×“»ó “Á¤“¼ö“ÀÇ “°á“°ú“¸¦ “»ý“¼º“ÇÕ“´Ï“´Ù(“´Ü L<Bitwise String Operators> “µµ
“Âü“Á¶“ÇØ“ÁÖ“¼¼“¿ä).
“±×“·¯“³ª, “±×“·¸“´õ“·¡“µµ C<use integer> “´Â “ÀÇ“¹Ì“°¡ “ÀÖ“½À“´Ï“´Ù.
“±â“º»“Àû“À¸“·Î “ÀÌ“°Í“µé“Àº “°á“°ú“´Â “ºÎ“È£“¾ø“´Â “Á¤“¼ö“·Î“½á “ÇØ“¼®“µÇ“Áö“¸¸
C<use integer> “°¡ “À¯“È¿“ÇÑ“°æ“¿ì“´Â “ºÎ“È£“ºÙ“Àº“Á¤“¼ö“·Î“½á “ÇØ“¼®“µË“´Ï“´Ù.
“¿¹“¸¦ “µé“¸é, C<~0>“´Â “º¸“Åë “Å« “Á¤“¼ö“ÀÇ “°ª“À¸“·Î“½á “Æò“°¡“µË“´Ï“´Ù.
“±×“·¯“³ª C<use integer; ~0>“Àº 2“ÀÇ “º¸“¼ö“ÀÇ “¸Ó“½Å“¿¡“¼­“´Â C<-1>“ÀÌ “µË“´Ï“´Ù.

=head2 Floating-point Arithmetic
X<floating-point> X<floating point> X<float> X<real>

(“ºÎ“µ¿“¼Ò“¼ö“Á¡“¿¬“»ê) 

=begin original

While C<use integer> provides integer-only arithmetic, there is no
analogous mechanism to provide automatic rounding or truncation to a
certain number of decimal places.  For rounding to a certain number
of digits, sprintf() or printf() is usually the easiest route.
See L<perlfaq4>.

=end original

C<use integer> “°¡ “Á¤“¼ö“¿¬“»ê“À» “Á¦“°ø“ÇÏ“´Â “ÇÑ“Æí, “¼ö“¸¦ “Æ¯“Á¤“ÀÇ “ÀÚ“¸´“¼ö“¿¡“¼­
“ÀÚ“µ¿“Àû“À¸“·Î “¿Ã“¸®“°Å“³ª “¹ö“¸®“°Å“³ª “ÇÏ“´Â “±â“´É“Àº “¾ø“½À“´Ï“´Ù.
“¼ö“¸¦ “¿Ã“¸®“±â“¿¡“´Â sprintf() “³ª printf() “¸¦ “»ç“¿ë“ÇÏ“´Â “°Í“ÀÌ “Á¦“ÀÏ
“°£“´Ü“ÇÑ “¹æ“¹ý“ÀÔ“´Ï“´Ù.
L<perlfaq4> “¸¦ “Âü“Á¶“ÇØ“ÁÖ“¼¼“¿ä.

=begin original

Floating-point numbers are only approximations to what a mathematician
would call real numbers.  There are infinitely more reals than floats,
so some corners must be cut.  For example:

=end original

“ºÎ“µ¿“¼Ò“¼ö“Á¡“¼ö“´Â “¼ö“ÇÐ“ÀÚ“°¡ “½Ç“¼ö“¶ó“°í “ºÎ“¸£“´Â “°Í“ÀÇ “±Ù“»ç“¹Û“¿¡ “¾ø“½À“´Ï“´Ù.
“½Ç“¼ö“´Â “ºÎ“µ¿“¼Ò“¼ö“Á¡“º¸“´Ù “¹«“ÇÑ“ÇÏ“°Ô “°è“¼Ó“µÇ“±â“¿¡, “´Ù“¼Ò “Â÷“ÀÌ“°¡ “»ý“±é“´Ï“´Ù.
“¿¹“Á¦:

    printf "%.20g\n", 123456789123456789;
    #        produces 123456789123456784

=begin original

Testing for exact equality of floating-point equality or inequality is
not a good idea.  Here's a (relatively expensive) work-around to compare
whether two floating-point numbers are equal to a particular number of
decimal places.  See Knuth, volume II, for a more robust treatment of
this topic.

=end original

“ºÎ“µ¿“¼Ò“¼ö“Á¡“¼ö“°¡ “°°“Àº“Áö “¾î“¶²“Áö“¸¦ “Á¤“È®“È÷ “°°“Àº“Áö “¾î“¶²“Áö“·Î “ºñ“±³“ÇÏ“´Â “°Í“Àº
“ÁÁ“Àº “¾Æ“ÀÌ“µð“¾î“°¡ “¾Æ“´Õ“´Ï“´Ù.
“¾Æ“·¡“¿¡, “µÎ“°³“ÀÇ “ºÎ“µ¿“¼Ò“¼ö“Á¡“ÀÌ “Áö“Á¤“µÈ “ÀÚ“¸´“¼ö“±î“Áö “°°“Àº“Áö“¸¦ “ºñ“±³“ÇÏ“´Â(“ºñ“±³“Àû “¹«“°Å“¿î)
“Â÷“¼±“ÀÇ “¼±“ÅÃ“À» “³ª“Å¸“³À“´Ï“´Ù.
“ÀÌ “¹®“Á¦“¿¡ “°ü“ÇØ, “º¸“´Ù “¾ö“¹Ð“ÇÏ“°Ô “´Ù“·ç“°í “ÀÖ“´Â Knuth, volume II “¸¦ “Âü“Á¶“ÇØ“ÁÖ“¼¼“¿ä.

    sub fp_equal {
	my ($X, $Y, $POINTS) = @_;
	my ($tX, $tY);
	$tX = sprintf("%.${POINTS}g", $X);
	$tY = sprintf("%.${POINTS}g", $Y);
	return $tX eq $tY;
    }

=begin original

The POSIX module (part of the standard perl distribution) implements
ceil(), floor(), and other mathematical and trigonometric functions.
The Math::Complex module (part of the standard perl distribution)
defines mathematical functions that work on both the reals and the
imaginary numbers.  Math::Complex not as efficient as POSIX, but
POSIX can't work with complex numbers.

=end original

POSIX “¸ð“µâ (Perl “Ç¥“ÁØ“¹è“Æ÷“ÆÐ“Å°“Áö“ÀÇ “ÀÏ“ºÎ) “´Â ceil(), floor() “¹×
“±× “¿Ü“ÀÇ “¼ö“ÇÐ“ÇÔ“¼ö“³ª “»ï“°¢“ÇÔ“¼ö“¸¦ “Áö“´Ï“°í “ÀÖ“½À“´Ï“´Ù.
Math::Complex “¸ð“µâ(Perl “Ç¥“ÁØ“¹è“Æ÷“ÆÐ“Å°“Áö“ÀÇ “ÀÏ“ºÎ)“´Â
“½Ç“¼ö“¿Í “Çã“¼ö “µÑ“´Ù “µ¿“ÀÛ“ÇÏ“´Â “¼ö“ÇÐ“ÇÔ“¼ö“¸¦ “Á¤“ÀÇ“ÇÏ“°í “ÀÖ“½À“´Ï“´Ù.
Math::Complex“´Â POSIX “º¸“´Ù “È¿“À²“Àû“ÀÌ“Áö“´Â “¾Ê“Áö“¸¸,
POSIX“´Â “º¹“¼Ò“¼ö“´Â “Ãë“±Þ“ÇÒ “¼ö “¾ø“½À“´Ï“´Ù.

=begin original

Rounding in financial applications can have serious implications, and
the rounding method used should be specified precisely.  In these
cases, it probably pays not to trust whichever system rounding is
being used by Perl, but to instead implement the rounding function you
need yourself.

=end original

“±Ý“À¶ “¾î“ÇÃ“¸®“ÄÉ“ÀÌ“¼Ç“¿¡ “ÀÇ“ÇÑ “¶ó“¿î“µù“Àº “½É“°¢“ÇÑ “¿µ“Çâ“À» “³¢“Ä¥ “°¡“´É“¼º“ÀÌ “ÀÖ“°í,
“»ç“¿ë“ÇÏ“´Â “¶ó“¿î“µù “¸Þ“¼Ò“µå“´Â “Áö“Á¤“ÇÑ “Á¤“µµ“¿¡“¼­ “¼ö“Çà“µÇ“¾î“Á®“¾ß “ÇÕ“´Ï“´Ù.
“ÀÌ“·± “°æ“¿ì, Perl “ÀÌ “»ç“¿ë“ÇÏ“´Â “½Ã“½º“ÅÛ“¶ó“¿î“µù“À» “½Å“¿ë“ÇÏ“Áö “¸ø“ÇÏ“°í,
“´ë“½Å“¿¡ “ÀÚ“±â“ÀÚ“½Å“ÀÌ “¶ó“¿î“µù“ÇÔ“¼ö“¸¦ “¸¸“µé“¾î“¾ß “ÇÕ“´Ï“´Ù.

=head2 Bigger Numbers
X<number, arbitrary precision>

(“º¸“´Ù “Å« “¼ö)

=begin original

The standard Math::BigInt and Math::BigFloat modules provide
variable-precision arithmetic and overloaded operators, although
they're currently pretty slow. At the cost of some space and
considerable speed, they avoid the normal pitfalls associated with
limited-precision representations.

=end original

“Ç¥“ÁØ“ÀÎ Math::BigInt “¿Í Math::BigFloat “¸ð“µâ“Àº “¸î “¹è“³ª “±ä “¿¬“»ê“À» “Á¦“°ø“ÇÏ“°í,
“¿¬“»ê“ÀÚ“¸¦ “¿À“¹ö“·Î“µå“ÇÏ“Áö“¸¸, “ÀÌ“°Í“Àº “Çö“Àç“´Â “²Ï “´À“¸³“´Ï“´Ù.
“´Ù“¼Ò “¿µ“¿ª“°ú “»ó“´ç“ÇÑ “¼Ó“µµ“¸¦ “Èñ“»ý“ÇØ“¼­, “ÁÙ “¼ö“°¡ “Á¦“ÇÑ“µÇ“¾î“ÀÖ“´Â “°Í“¿¡ “ÀÇ“ÇØ
“Èç“È÷ “ÀÖ“´Â “±¸“¸Û“À» “ÇÇ“ÇÒ “¼ö “ÀÖ“½À“´Ï“´Ù.

    use Math::BigInt;
    $x = Math::BigInt->new('123456789123456789');
    print $x * $x;

    # prints +15241578780673678515622620750190521

=begin original

There are several modules that let you calculate with (bound only by
memory and cpu-time) unlimited or fixed precision. There are also
some non-standard modules that provide faster implementations via
external C libraries.

=end original

(“¸Þ“¸ð“¸®“¿Í CPU “½Ã“°£“¿¡“¸¸ “ÀÇ“Á¸“ÇÏ“´Â) “¹«“Á¦“ÇÑ “È¤“Àº “°í“Á¤“ÀÇ “Á¤“µµ“¿¡“¼­“ÀÇ “°è“»ê“ÀÌ
“°¡“´É“ÇÑ “¸ð“µâ“ÀÌ “¸î“°³ “ÀÖ“½À“´Ï“´Ù.
“°Å“±â“¿¡ “¿Ü“ºÎ C “¶ó“ÀÌ“ºê“·¯“¸®“¸¦ “»ç“¿ë“ÇØ “º¸“´Ù “ºü“¸¥ “½Ç“Çà“À» “Á¦“°ø“ÇÏ“´Â
“ºñ“Ç¥“ÁØ “¸ð“µâ“µµ “ÀÖ“½À“´Ï“´Ù.

=begin original

Here is a short, but incomplete summary:

=end original

“¾Æ“·¡“´Â “Âª“Áö“¸¸ “ºÒ“¿Ï“Àü“ÇÑ “¸®“½º“Æ®“ÀÔ“´Ï“´Ù.

=begin original

	Math::Fraction		big, unlimited fractions like 9973 / 12967
	Math::String		treat string sequences like numbers
	Math::FixedPrecision	calculate with a fixed precision
	Math::Currency		for currency calculations
	Bit::Vector		manipulate bit vectors fast (uses C)
	Math::BigIntFast	Bit::Vector wrapper for big numbers
	Math::Pari		provides access to the Pari C library
	Math::BigInteger	uses an external C library
	Math::Cephes		uses external Cephes C library (no big numbers)
	Math::Cephes::Fraction	fractions via the Cephes library
	Math::GMP		another one using an external C library

=end original

	Math::Fraction		9973 / 12967 “°°“Àº “Å©“¸ç, “¹«“Á¦“ÇÑ“ÀÇ “ºÐ“¼ö 
	Math::String		“¹®“ÀÚ“¿­“À» “¼ý“ÀÚ“°ª“À¸“·Î “Ãë“±Þ 
	Math::FixedPrecision	“°í“Á¤“Á¤“µµ“·Î “°è“»ê
	Math::Currency		“Åë“È­“°è“»ê“¿ë 
	Bit::Vector		(C “¸¦ “»ç“¿ë)“ºñ“Æ®“º¤“ÅÍ“¸¦ “ºü“¸¥ “¼Ó“µµ“·Î “´Ù“·ë 
	Math::BigIntFast	“Å« “¼ö“¸¦ “À§“ÇÑ Bit::Vector “ªÎ“·¡“ÆÛ
	Math::Pari		Pari C “¶ó“ÀÌ“ºê“·¯“¸®“¿¡ “Á¢“±Ù“À» “Á¦“°ø 
	Math::BigInteger	“¿Ü“ºÎ C “¶ó“ÀÌ“ºê“·¯“¸®“¸¦ “»ç“¿ë
	Math::Cephes		“¿Ü“ºÎ Cephes C “¸¦ “»ç“¿ë(“Å« “¼ö“´Â “¾ø“À½)
	Math::Cephes::Fraction	Cephes “¶ó“ÀÌ“ºê“·¯“¸®“¸¦ “»ç“¿ë“ÇÑ “ºÐ“¼ö 
	Math::GMP		“ÀÌ“°Í“µµ “¿Ü“ºÎ C “¶ó“ÀÌ“ºê“·¯“¸®“¸¦ “»ç“¿ë 

=begin original

Choose wisely.

=end original

“ºÎ“µð “Çö“¸í“ÇÑ “¼±“ÅÃ“À»...

=cut

